/**
 *
 *  Class UmlRepository$Class.java
 *
 *  Generated by KMFStudio at 14 April 2004 22:36:47
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.ukc.cs.kmf.kmfstudio.uml.repository;

import java.io.*;
import java.util.*;
import javax.swing.tree.*;
import uk.ac.kent.cs.kmf.xmi.*;

import uk.ac.ukc.cs.kmf.kmfstudio.uml.*;

public class UmlRepository$Class
	extends uk.ac.kent.cs.kmf.common.RepositoryImpl
	implements UmlRepository
{
	/** Default repository constructor */
	public UmlRepository$Class() {
		setLog(new uk.ac.kent.cs.kmf.util.FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public UmlRepository$Class(uk.ac.kent.cs.kmf.util.ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init uml repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.UnlimitedInteger'");
		factories.put("uml.Foundation.Data_Types.UnlimitedInteger", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedIntegerFactory$Class(this));
		population.put("uml.Foundation.Data_Types.UnlimitedInteger", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.Time'");
		factories.put("uml.Foundation.Data_Types.Time", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeFactory$Class(this));
		population.put("uml.Foundation.Data_Types.Time", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.Expression'");
		factories.put("uml.Foundation.Data_Types.Expression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.Expression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.Name'");
		factories.put("uml.Foundation.Data_Types.Name", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.NameFactory$Class(this));
		population.put("uml.Foundation.Data_Types.Name", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.Multiplicity'");
		factories.put("uml.Foundation.Data_Types.Multiplicity", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityFactory$Class(this));
		population.put("uml.Foundation.Data_Types.Multiplicity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.MultiplicityRange'");
		factories.put("uml.Foundation.Data_Types.MultiplicityRange", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRangeFactory$Class(this));
		population.put("uml.Foundation.Data_Types.MultiplicityRange", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.LocationReference'");
		factories.put("uml.Foundation.Data_Types.LocationReference", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReferenceFactory$Class(this));
		population.put("uml.Foundation.Data_Types.LocationReference", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.MappingExpression'");
		factories.put("uml.Foundation.Data_Types.MappingExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.MappingExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.Geometry'");
		factories.put("uml.Foundation.Data_Types.Geometry", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.GeometryFactory$Class(this));
		population.put("uml.Foundation.Data_Types.Geometry", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ActionExpression'");
		factories.put("uml.Foundation.Data_Types.ActionExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ActionExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.BooleanExpression'");
		factories.put("uml.Foundation.Data_Types.BooleanExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.BooleanExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ProcedureExpression'");
		factories.put("uml.Foundation.Data_Types.ProcedureExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ProcedureExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.TypeExpression'");
		factories.put("uml.Foundation.Data_Types.TypeExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.TypeExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ArgListsExpression'");
		factories.put("uml.Foundation.Data_Types.ArgListsExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ArgListsExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.IterationExpression'");
		factories.put("uml.Foundation.Data_Types.IterationExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.IterationExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ObjectSetExpression'");
		factories.put("uml.Foundation.Data_Types.ObjectSetExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ObjectSetExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.TimeExpression'");
		factories.put("uml.Foundation.Data_Types.TimeExpression", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpressionFactory$Class(this));
		population.put("uml.Foundation.Data_Types.TimeExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ScopeKind'");
		factories.put("uml.Foundation.Data_Types.ScopeKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ScopeKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.MessageDirectionKind'");
		factories.put("uml.Foundation.Data_Types.MessageDirectionKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.MessageDirectionKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.OrderingKind'");
		factories.put("uml.Foundation.Data_Types.OrderingKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.OrderingKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ParameterDirectionKind'");
		factories.put("uml.Foundation.Data_Types.ParameterDirectionKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ParameterDirectionKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.VisibilityKind'");
		factories.put("uml.Foundation.Data_Types.VisibilityKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.VisibilityKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.CallConcurrencyKind'");
		factories.put("uml.Foundation.Data_Types.CallConcurrencyKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.CallConcurrencyKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.PseudostateKind'");
		factories.put("uml.Foundation.Data_Types.PseudostateKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.PseudostateKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.AggregationKind'");
		factories.put("uml.Foundation.Data_Types.AggregationKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.AggregationKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Data_Types.ChangeabilityKind'");
		factories.put("uml.Foundation.Data_Types.ChangeabilityKind", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKindFactory$Class(this));
		population.put("uml.Foundation.Data_Types.ChangeabilityKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Extension_Mechanisms.TaggedValue'");
		factories.put("uml.Foundation.Extension_Mechanisms.TaggedValue", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValueFactory$Class(this));
		population.put("uml.Foundation.Extension_Mechanisms.TaggedValue", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Extension_Mechanisms.Stereotype'");
		factories.put("uml.Foundation.Extension_Mechanisms.Stereotype", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StereotypeFactory$Class(this));
		population.put("uml.Foundation.Extension_Mechanisms.Stereotype", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Extension_Mechanisms.TagDefinition'");
		factories.put("uml.Foundation.Extension_Mechanisms.TagDefinition", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinitionFactory$Class(this));
		population.put("uml.Foundation.Extension_Mechanisms.TagDefinition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Extension_Mechanisms.StringArray'");
		factories.put("uml.Foundation.Extension_Mechanisms.StringArray", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArrayFactory$Class(this));
		population.put("uml.Foundation.Extension_Mechanisms.StringArray", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Parameter'");
		factories.put("uml.Foundation.Core.Parameter", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ParameterFactory$Class(this));
		population.put("uml.Foundation.Core.Parameter", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Method'");
		factories.put("uml.Foundation.Core.Method", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.MethodFactory$Class(this));
		population.put("uml.Foundation.Core.Method", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Element'");
		factories.put("uml.Foundation.Core.Element", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ElementFactory$Class(this));
		population.put("uml.Foundation.Core.Element", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Feature'");
		factories.put("uml.Foundation.Core.Feature", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.FeatureFactory$Class(this));
		population.put("uml.Foundation.Core.Feature", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.StructuralFeature'");
		factories.put("uml.Foundation.Core.StructuralFeature", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeatureFactory$Class(this));
		population.put("uml.Foundation.Core.StructuralFeature", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.BehavioralFeature'");
		factories.put("uml.Foundation.Core.BehavioralFeature", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeatureFactory$Class(this));
		population.put("uml.Foundation.Core.BehavioralFeature", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Operation'");
		factories.put("uml.Foundation.Core.Operation", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.OperationFactory$Class(this));
		population.put("uml.Foundation.Core.Operation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Attribute'");
		factories.put("uml.Foundation.Core.Attribute", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AttributeFactory$Class(this));
		population.put("uml.Foundation.Core.Attribute", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Relationship'");
		factories.put("uml.Foundation.Core.Relationship", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.RelationshipFactory$Class(this));
		population.put("uml.Foundation.Core.Relationship", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.AssociationEnd'");
		factories.put("uml.Foundation.Core.AssociationEnd", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEndFactory$Class(this));
		population.put("uml.Foundation.Core.AssociationEnd", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Association'");
		factories.put("uml.Foundation.Core.Association", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationFactory$Class(this));
		population.put("uml.Foundation.Core.Association", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Flow'");
		factories.put("uml.Foundation.Core.Flow", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.FlowFactory$Class(this));
		population.put("uml.Foundation.Core.Flow", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Generalization'");
		factories.put("uml.Foundation.Core.Generalization", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizationFactory$Class(this));
		population.put("uml.Foundation.Core.Generalization", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Classifier'");
		factories.put("uml.Foundation.Core.Classifier", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ClassifierFactory$Class(this));
		population.put("uml.Foundation.Core.Classifier", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Class_'");
		factories.put("uml.Foundation.Core.Class_", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_Factory$Class(this));
		population.put("uml.Foundation.Core.Class_", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.AssociationClass'");
		factories.put("uml.Foundation.Core.AssociationClass", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClassFactory$Class(this));
		population.put("uml.Foundation.Core.AssociationClass", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Dependency'");
		factories.put("uml.Foundation.Core.Dependency", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DependencyFactory$Class(this));
		population.put("uml.Foundation.Core.Dependency", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Binding'");
		factories.put("uml.Foundation.Core.Binding", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BindingFactory$Class(this));
		population.put("uml.Foundation.Core.Binding", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Usage'");
		factories.put("uml.Foundation.Core.Usage", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.UsageFactory$Class(this));
		population.put("uml.Foundation.Core.Usage", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Abstraction'");
		factories.put("uml.Foundation.Core.Abstraction", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AbstractionFactory$Class(this));
		population.put("uml.Foundation.Core.Abstraction", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Permission'");
		factories.put("uml.Foundation.Core.Permission", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PermissionFactory$Class(this));
		population.put("uml.Foundation.Core.Permission", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Interface'");
		factories.put("uml.Foundation.Core.Interface", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.InterfaceFactory$Class(this));
		population.put("uml.Foundation.Core.Interface", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.DataType'");
		factories.put("uml.Foundation.Core.DataType", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataTypeFactory$Class(this));
		population.put("uml.Foundation.Core.DataType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Node'");
		factories.put("uml.Foundation.Core.Node", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.NodeFactory$Class(this));
		population.put("uml.Foundation.Core.Node", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Component'");
		factories.put("uml.Foundation.Core.Component", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ComponentFactory$Class(this));
		population.put("uml.Foundation.Core.Component", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.GeneralizableElement'");
		factories.put("uml.Foundation.Core.GeneralizableElement", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElementFactory$Class(this));
		population.put("uml.Foundation.Core.GeneralizableElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Constraint'");
		factories.put("uml.Foundation.Core.Constraint", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ConstraintFactory$Class(this));
		population.put("uml.Foundation.Core.Constraint", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.ModelElement'");
		factories.put("uml.Foundation.Core.ModelElement", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElementFactory$Class(this));
		population.put("uml.Foundation.Core.ModelElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Namespace'");
		factories.put("uml.Foundation.Core.Namespace", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.NamespaceFactory$Class(this));
		population.put("uml.Foundation.Core.Namespace", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Comment'");
		factories.put("uml.Foundation.Core.Comment", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CommentFactory$Class(this));
		population.put("uml.Foundation.Core.Comment", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.PresentationElement'");
		factories.put("uml.Foundation.Core.PresentationElement", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElementFactory$Class(this));
		population.put("uml.Foundation.Core.PresentationElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Tie'");
		factories.put("uml.Foundation.Core.Tie", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TieFactory$Class(this));
		population.put("uml.Foundation.Core.Tie", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.TemplateParameter'");
		factories.put("uml.Foundation.Core.TemplateParameter", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameterFactory$Class(this));
		population.put("uml.Foundation.Core.TemplateParameter", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Signal'");
		factories.put("uml.Foundation.Core.Signal", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SignalFactory$Class(this));
		population.put("uml.Foundation.Core.Signal", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.CallAction'");
		factories.put("uml.Foundation.Core.CallAction", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallActionFactory$Class(this));
		population.put("uml.Foundation.Core.CallAction", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.SendAction'");
		factories.put("uml.Foundation.Core.SendAction", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendActionFactory$Class(this));
		population.put("uml.Foundation.Core.SendAction", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Primitive'");
		factories.put("uml.Foundation.Core.Primitive", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PrimitiveFactory$Class(this));
		population.put("uml.Foundation.Core.Primitive", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.Enumeration_'");
		factories.put("uml.Foundation.Core.Enumeration_", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_Factory$Class(this));
		population.put("uml.Foundation.Core.Enumeration_", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Foundation.Core.EnumLiteral'");
		factories.put("uml.Foundation.Core.EnumLiteral", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteralFactory$Class(this));
		population.put("uml.Foundation.Core.EnumLiteral", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Model_Management.Package'");
		factories.put("uml.Model_Management.Package", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.PackageFactory$Class(this));
		population.put("uml.Model_Management.Package", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Model_Management.Model'");
		factories.put("uml.Model_Management.Model", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.ModelFactory$Class(this));
		population.put("uml.Model_Management.Model", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Model_Management.Subsystem'");
		factories.put("uml.Model_Management.Subsystem", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.SubsystemFactory$Class(this));
		population.put("uml.Model_Management.Subsystem", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.StateMachine'");
		factories.put("uml.Behavioral_Elements.State_Machines.StateMachine", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachineFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.StateMachine", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.Guard'");
		factories.put("uml.Behavioral_Elements.State_Machines.Guard", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.GuardFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.Guard", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.Transition'");
		factories.put("uml.Behavioral_Elements.State_Machines.Transition", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.TransitionFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.Transition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.StateVertex'");
		factories.put("uml.Behavioral_Elements.State_Machines.StateVertex", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertexFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.StateVertex", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.State'");
		factories.put("uml.Behavioral_Elements.State_Machines.State", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.State", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.Action'");
		factories.put("uml.Behavioral_Elements.State_Machines.Action", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.ActionFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.Action", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.SynchState'");
		factories.put("uml.Behavioral_Elements.State_Machines.SynchState", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchStateFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.SynchState", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.Pseudostate'");
		factories.put("uml.Behavioral_Elements.State_Machines.Pseudostate", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.PseudostateFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.Pseudostate", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.StubState'");
		factories.put("uml.Behavioral_Elements.State_Machines.StubState", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubStateFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.StubState", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.Event'");
		factories.put("uml.Behavioral_Elements.State_Machines.Event", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.EventFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.Event", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.CallEvent'");
		factories.put("uml.Behavioral_Elements.State_Machines.CallEvent", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEventFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.CallEvent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'uml.Behavioral_Elements.State_Machines.CompositeState'");
		factories.put("uml.Behavioral_Elements.State_Machines.CompositeState", new uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeStateFactory$Class(this));
		population.put("uml.Behavioral_Elements.State_Machines.CompositeState", new Vector());
	}

	//--- MODEL NAME ---
	protected String modelName = "uml";
	public String getModelName() {
		return modelName;
	}

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			UmlFactory factory = (UmlFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}
	/** Get all instances from population */
	public List getAllElements() {
		List res = new ArrayList();
		Iterator i = population.keySet().iterator();
		while (i.hasNext()) {
			String key = (String)i.next();
			res.addAll((Collection)population.get(key));
		}
		return res;
	}
	/** Get the entire population */
	public Map getPopulation() {
		return population;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlFactory getFactory(String fullClassName) {
		uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlFactory factory = null;
		try {
			factory = (uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Get the all factories */
	public Map getFactories() {
		return factories;
	}

	//--- BROWSER ---
	/** Get a description using a JTree */
	public DefaultMutableTreeNode toJTree() {
		//--- Creat the JTree visitor ---
		UmlJTreeVisitor jtreeVisitor = new UmlJTreeVisitor$Class();
		//--- Init root ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Repository", true);
		DefaultMutableTreeNode factoriesNode = new DefaultMutableTreeNode("Lifecycle", true);
		DefaultMutableTreeNode elementsNode = new DefaultMutableTreeNode("Elements", true);
		root.add(factoriesNode);
		root.add(elementsNode);
		//--- Add every factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String factoryName = (String)i.next();
			UmlFactory factory = (UmlFactory)factories.get(factoryName);
			DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)factory.accept(jtreeVisitor, new Object());
			factoriesNode.add(factoryNode);
		}
		//--- Add every element ---
		Set visitedElements = new LinkedHashSet();
		Set elemNames = population.keySet();
		Iterator j = elemNames.iterator();
		while (j.hasNext()) {
			String elemName = (String)j.next();
			//--- Add a node for each class ---
			List elements = (List)population.get(elemName);
			if (elements.size() != 0) {
				DefaultMutableTreeNode elemNode = new DefaultMutableTreeNode("Instances of "+elemName, true);
				Iterator elementIt = elements.iterator();
				while (elementIt.hasNext()) {
					UmlElement element = (UmlElement)elementIt.next();
					//--- Add a node for each instance ---
					visitedElements.add(element);
					DefaultMutableTreeNode instanceNode = (DefaultMutableTreeNode)element.accept(jtreeVisitor, visitedElements);
					elemNode.add(instanceNode);
				}
				elementsNode.add(elemNode);
			}
		}
		return root;
	}

	/** Save the content into an XMI file */
	public void saveXMI(String fileName) {
		//--- Create an XMI file ---
		if (!fileName.toLowerCase().endsWith(".xml")) fileName += ".xml";
		XMIFile xmiFile = new XMIFile(fileName);
		//--- Create an XMI vistor ---
		UmlXMIVisitor xmiVisitor = new UmlXMIVisitor$Class();
		//--- Create an empty (reference, xmiObject) table  ---
		Map mapRefToXMI = new IdentityHashMap();
		//--- Create the top objects container ---
		Collection topObjs = xmiFile.getTopObjects();
		//--- For each factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String elemName = (String)i.next();
			UmlFactory factory = (UmlFactory)factories.get(elemName);
			//--- Create the factory ---
			XMIObject xmifactory = (XMIObject)factory.accept(xmiVisitor, mapRefToXMI);
			//--- Add factory to top objects ---
			//--- Compute all the instances created by the factory ---
			List elements = (List)population.get(elemName);
			if (elements == null) continue;
			Iterator j = elements.iterator();
			while (j.hasNext()) {
				UmlElement element = (UmlElement)j.next();
				//--- Create the XMI element ---
				XMIObject xmiElement = (XMIObject)element.accept(xmiVisitor, mapRefToXMI);
				//--- Add the element to top objects ---
				topObjs.add(xmiElement);
			}
		}
		try {
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new UmlFactoryAdapter$Class(this, log));
			//--- Save the elements ---
			IXMIWriter writer = new XMIWriter();
			writer.write(xmiFile, fileName, log);
		} catch (Exception e) {
			log.reportMessage(""+e);
		}
	}
	/** Create a new repository from an XMI file */
	public uk.ac.kent.cs.kmf.common.Repository loadXMI(String fileName) {
		try {
			//--- Create a repository ---
			UmlRepository rep = new UmlRepository$Class();
			rep.setLog(log);
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new UmlFactoryAdapter$Class(rep, log));
			//--- Build the elements ---
			XMIFile xmiFile = (new XMIReader()).read(fileName, log);
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}

	/** Get a HUTN description of the repository */
	public String toHUTN() {
		//--- Create the HUTN visitor ---
		UmlHUTNVisitor hutnVisitor = new UmlHUTNVisitor$Class();
		//--- Add every factory ---
		String buffer = new String();
		buffer += "UmlRepository {\n";
		buffer += "factories\n";
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			buffer += "  "+factoryName+"\n";
		}
		buffer += "\n";
		//--- Add every element ---
		buffer += "Elements\n";
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			buffer += "Instances of "+elemName+"\n";
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				UmlElement element = (UmlElement)elementIt.next();
				buffer += element.accept(hutnVisitor, new Object());
			}
		}
		buffer += "}\n";
		log.reportMessage(buffer);
		return buffer;
	}
	/** Save the content into a HUTN file */
	public void saveHUTN(String fileName) {
		//--- Open the HUTN file ---
		if (!fileName.toLowerCase().endsWith(".hutn")) fileName += ".hutn";
		PrintWriter out;
		try {
			out = new PrintWriter(new FileWriter(new File(fileName)), true);
		} catch (Exception e) {
			log.reportMessage(""+e);
			return;
		}
		//--- Create the HUTN visitor ---
		UmlHUTNVisitor hutnVisitor = new UmlHUTNVisitor$Class();
		//--- Add every factory ---
		out.println("UmlRepository {");
		out.println("factories");
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			out.println("  "+factoryName);
		}
		out.println();
		//--- Add every element ---
		out.println("Elements");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			out.println("Instances of "+elemName);
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				UmlElement element = (UmlElement)elementIt.next();
				out.println(element.accept(hutnVisitor, new Object()));
			}
		}
		out.println("}");
		out.close();
	}
	/** Create a new repository from an HUTN file */
	public UmlRepository loadHUTN(String fileName) {
		try {
			//--- Create a repository ---
			UmlRepository rep = new UmlRepository$Class();
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, UmlFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}

	/** Parse all invariants */
	UmlParseAllVisitor parseAllVis = new UmlParseAllVisitor$Class();
	public void parseInvariants() {
		Map data = new HashMap();
		data.put("log", getLog());
		//--- Parse every invariant ---
		log.reportMessage("Parsing invariants from repository ...");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				UmlElement element = (UmlElement)elementIt.next();
				element.accept(parseAllVis, data);
			}
		}
	}
	/** Evaluate all invariants */
	UmlEvaluateAllVisitor evaluateAllVis = new UmlEvaluateAllVisitor$Class(null);
	public void evaluateInvariants() {
		Map data = new HashMap();
		data.put("log", getLog());
		//--- Evaluate every invariant ---
		log.reportMessage("Evaluating invariants from repository ...");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				UmlElement element = (UmlElement)elementIt.next();
				element.accept(evaluateAllVis, data);
			}
		}
	}
	/** The factories */
	protected Hashtable factories = new Hashtable();

}
