/**
 *
 *  Class UmlJTreeVisitor$Class.java
 *
 *  Generated by KMFStudio at 14 April 2004 22:36:47
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.ukc.cs.kmf.kmfstudio.uml.repository;

import java.util.*;
import java.lang.reflect.*;
import javax.swing.tree.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.kmf.util.Type;

public class UmlJTreeVisitor$Class
	implements UmlJTreeVisitor
{
	/** Visit factory for 'UmlFactory' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedIntegerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for UnlimitedInteger ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Time ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.NameFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Name ---
		//--- Property body_ ---
		DefaultMutableTreeNode body_Node = getNode(this, "body_", host.getBody_(), data);
		root.add(body_Node);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Multiplicity ---
		//--- Association range ---
		DefaultMutableTreeNode rangeNode = getNode(this, "range", host.getRange(), data);
		root.add(rangeNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRangeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for MultiplicityRange ---
		//--- Property lower ---
		DefaultMutableTreeNode lowerNode = getNode(this, "lower", host.getLower(), data);
		root.add(lowerNode);
		//--- Property upper ---
		DefaultMutableTreeNode upperNode = getNode(this, "upper", host.getUpper(), data);
		root.add(upperNode);
		//--- Association multiplicity ---
		DefaultMutableTreeNode multiplicityNode = getNode(this, "multiplicity", host.getMultiplicity(), data);
		root.add(multiplicityNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReferenceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for LocationReference ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for MappingExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.GeometryFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Geometry ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ActionExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BooleanExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcedureExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TypeExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ArgListsExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for IterationExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ObjectSetExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TimeExpression ---
		//--- Properties for Expression ---
		//--- Property language ---
		DefaultMutableTreeNode languageNode = getNode(this, "language", host.getLanguage(), data);
		root.add(languageNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ScopeKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for MessageDirectionKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OrderingKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ParameterDirectionKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for VisibilityKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CallConcurrencyKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PseudostateKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AggregationKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ChangeabilityKind ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValueFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TaggedValue ---
		//--- Property dataValue ---
		DefaultMutableTreeNode dataValueNode = getNode(this, "dataValue", host.getDataValue(), data);
		root.add(dataValueNode);
		//--- Property tag ---
		DefaultMutableTreeNode tagNode = getNode(this, "tag", host.getTag(), data);
		root.add(tagNode);
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Association modelElement ---
		DefaultMutableTreeNode modelElementNode = getNode(this, "modelElement", host.getModelElement(), data);
		root.add(modelElementNode);
		//--- Association referenceValue ---
		DefaultMutableTreeNode referenceValueNode = getNode(this, "referenceValue", host.getReferenceValue(), data);
		root.add(referenceValueNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for ModelElement ---
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StereotypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Stereotype ---
		//--- Property icon ---
		DefaultMutableTreeNode iconNode = getNode(this, "icon", host.getIcon(), data);
		root.add(iconNode);
		//--- Property baseName ---
		DefaultMutableTreeNode baseNameNode = getNode(this, "baseName", host.getBaseName(), data);
		root.add(baseNameNode);
		//--- Property baseClass ---
		DefaultMutableTreeNode baseClassNode = getNode(this, "baseClass", host.getBaseClass(), data);
		root.add(baseClassNode);
		//--- Association stereotypeConstraint ---
		DefaultMutableTreeNode stereotypeConstraintNode = getNode(this, "stereotypeConstraint", host.getStereotypeConstraint(), data);
		root.add(stereotypeConstraintNode);
		//--- Association definedTag ---
		DefaultMutableTreeNode definedTagNode = getNode(this, "definedTag", host.getDefinedTag(), data);
		root.add(definedTagNode);
		//--- Association extendedElement ---
		DefaultMutableTreeNode extendedElementNode = getNode(this, "extendedElement", host.getExtendedElement(), data);
		root.add(extendedElementNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinitionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TagDefinition ---
		//--- Property tagType ---
		DefaultMutableTreeNode tagTypeNode = getNode(this, "tagType", host.getTagType(), data);
		root.add(tagTypeNode);
		//--- Property multiplicity ---
		DefaultMutableTreeNode multiplicityNode = getNode(this, "multiplicity", host.getMultiplicity(), data);
		root.add(multiplicityNode);
		//--- Association typedValue ---
		DefaultMutableTreeNode typedValueNode = getNode(this, "typedValue", host.getTypedValue(), data);
		root.add(typedValueNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArrayFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StringArray ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ParameterFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Parameter ---
		//--- Property defaultValue ---
		DefaultMutableTreeNode defaultValueNode = getNode(this, "defaultValue", host.getDefaultValue(), data);
		root.add(defaultValueNode);
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association behavioralFeature ---
		DefaultMutableTreeNode behavioralFeatureNode = getNode(this, "behavioralFeature", host.getBehavioralFeature(), data);
		root.add(behavioralFeatureNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.MethodFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Method ---
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Association specification ---
		DefaultMutableTreeNode specificationNode = getNode(this, "specification", host.getSpecification(), data);
		root.add(specificationNode);
		//--- Properties for BehavioralFeature ---
		//--- Property isQuery ---
		DefaultMutableTreeNode isQueryNode = getNode(this, "isQuery", host.getIsQuery(), data);
		root.add(isQueryNode);
		//--- Association parameter ---
		DefaultMutableTreeNode parameterNode = getNode(this, "parameter", host.getParameter(), data);
		root.add(parameterNode);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.FeatureFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeatureFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StructuralFeature ---
		//--- Property multiplicity ---
		DefaultMutableTreeNode multiplicityNode = getNode(this, "multiplicity", host.getMultiplicity(), data);
		root.add(multiplicityNode);
		//--- Property changeability ---
		DefaultMutableTreeNode changeabilityNode = getNode(this, "changeability", host.getChangeability(), data);
		root.add(changeabilityNode);
		//--- Property targetScope ---
		DefaultMutableTreeNode targetScopeNode = getNode(this, "targetScope", host.getTargetScope(), data);
		root.add(targetScopeNode);
		//--- Property ordering ---
		DefaultMutableTreeNode orderingNode = getNode(this, "ordering", host.getOrdering(), data);
		root.add(orderingNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeatureFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BehavioralFeature ---
		//--- Property isQuery ---
		DefaultMutableTreeNode isQueryNode = getNode(this, "isQuery", host.getIsQuery(), data);
		root.add(isQueryNode);
		//--- Association parameter ---
		DefaultMutableTreeNode parameterNode = getNode(this, "parameter", host.getParameter(), data);
		root.add(parameterNode);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.OperationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Operation ---
		//--- Property concurrency ---
		DefaultMutableTreeNode concurrencyNode = getNode(this, "concurrency", host.getConcurrency(), data);
		root.add(concurrencyNode);
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Property specification ---
		DefaultMutableTreeNode specificationNode = getNode(this, "specification", host.getSpecification(), data);
		root.add(specificationNode);
		//--- Association method ---
		DefaultMutableTreeNode methodNode = getNode(this, "method", host.getMethod(), data);
		root.add(methodNode);
		//--- Association callAction ---
		DefaultMutableTreeNode callActionNode = getNode(this, "callAction", host.getCallAction(), data);
		root.add(callActionNode);
		//--- Properties for BehavioralFeature ---
		//--- Property isQuery ---
		DefaultMutableTreeNode isQueryNode = getNode(this, "isQuery", host.getIsQuery(), data);
		root.add(isQueryNode);
		//--- Association parameter ---
		DefaultMutableTreeNode parameterNode = getNode(this, "parameter", host.getParameter(), data);
		root.add(parameterNode);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AttributeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Attribute ---
		//--- Property initialValue ---
		DefaultMutableTreeNode initialValueNode = getNode(this, "initialValue", host.getInitialValue(), data);
		root.add(initialValueNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Properties for StructuralFeature ---
		//--- Property multiplicity ---
		DefaultMutableTreeNode multiplicityNode = getNode(this, "multiplicity", host.getMultiplicity(), data);
		root.add(multiplicityNode);
		//--- Property changeability ---
		DefaultMutableTreeNode changeabilityNode = getNode(this, "changeability", host.getChangeability(), data);
		root.add(changeabilityNode);
		//--- Property targetScope ---
		DefaultMutableTreeNode targetScopeNode = getNode(this, "targetScope", host.getTargetScope(), data);
		root.add(targetScopeNode);
		//--- Property ordering ---
		DefaultMutableTreeNode orderingNode = getNode(this, "ordering", host.getOrdering(), data);
		root.add(orderingNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for Feature ---
		//--- Property ownerScope ---
		DefaultMutableTreeNode ownerScopeNode = getNode(this, "ownerScope", host.getOwnerScope(), data);
		root.add(ownerScopeNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.RelationshipFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEndFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AssociationEnd ---
		//--- Property isNavigable ---
		DefaultMutableTreeNode isNavigableNode = getNode(this, "isNavigable", host.getIsNavigable(), data);
		root.add(isNavigableNode);
		//--- Property ordering ---
		DefaultMutableTreeNode orderingNode = getNode(this, "ordering", host.getOrdering(), data);
		root.add(orderingNode);
		//--- Property aggregation ---
		DefaultMutableTreeNode aggregationNode = getNode(this, "aggregation", host.getAggregation(), data);
		root.add(aggregationNode);
		//--- Property targetScope ---
		DefaultMutableTreeNode targetScopeNode = getNode(this, "targetScope", host.getTargetScope(), data);
		root.add(targetScopeNode);
		//--- Property multiplicity ---
		DefaultMutableTreeNode multiplicityNode = getNode(this, "multiplicity", host.getMultiplicity(), data);
		root.add(multiplicityNode);
		//--- Property changeability ---
		DefaultMutableTreeNode changeabilityNode = getNode(this, "changeability", host.getChangeability(), data);
		root.add(changeabilityNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association association ---
		DefaultMutableTreeNode associationNode = getNode(this, "association", host.getAssociation(), data);
		root.add(associationNode);
		//--- Association qualifier ---
		DefaultMutableTreeNode qualifierNode = getNode(this, "qualifier", host.getQualifier(), data);
		root.add(qualifierNode);
		//--- Association specification ---
		DefaultMutableTreeNode specificationNode = getNode(this, "specification", host.getSpecification(), data);
		root.add(specificationNode);
		//--- Association participant ---
		DefaultMutableTreeNode participantNode = getNode(this, "participant", host.getParticipant(), data);
		root.add(participantNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Association ---
		//--- Association connection ---
		DefaultMutableTreeNode connectionNode = getNode(this, "connection", host.getConnection(), data);
		root.add(connectionNode);
		//--- Properties for Relationship ---
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.FlowFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Flow ---
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Generalization ---
		//--- Property discriminator ---
		DefaultMutableTreeNode discriminatorNode = getNode(this, "discriminator", host.getDiscriminator(), data);
		root.add(discriminatorNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ClassifierFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_Factory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_ host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Class_ ---
		//--- Property isActive ---
		DefaultMutableTreeNode isActiveNode = getNode(this, "isActive", host.getIsActive(), data);
		root.add(isActiveNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClassFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AssociationClass ---
		//--- Properties for Class_ ---
		//--- Property isActive ---
		DefaultMutableTreeNode isActiveNode = getNode(this, "isActive", host.getIsActive(), data);
		root.add(isActiveNode);
		//--- Properties for Association ---
		//--- Association connection ---
		DefaultMutableTreeNode connectionNode = getNode(this, "connection", host.getConnection(), data);
		root.add(connectionNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for Relationship ---
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DependencyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Dependency ---
		//--- Association client ---
		DefaultMutableTreeNode clientNode = getNode(this, "client", host.getClient(), data);
		root.add(clientNode);
		//--- Association supplier ---
		DefaultMutableTreeNode supplierNode = getNode(this, "supplier", host.getSupplier(), data);
		root.add(supplierNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BindingFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Binding ---
		//--- Association argument ---
		DefaultMutableTreeNode argumentNode = getNode(this, "argument", host.getArgument(), data);
		root.add(argumentNode);
		//--- Properties for Dependency ---
		//--- Association client ---
		DefaultMutableTreeNode clientNode = getNode(this, "client", host.getClient(), data);
		root.add(clientNode);
		//--- Association supplier ---
		DefaultMutableTreeNode supplierNode = getNode(this, "supplier", host.getSupplier(), data);
		root.add(supplierNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.UsageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Usage ---
		//--- Properties for Dependency ---
		//--- Association client ---
		DefaultMutableTreeNode clientNode = getNode(this, "client", host.getClient(), data);
		root.add(clientNode);
		//--- Association supplier ---
		DefaultMutableTreeNode supplierNode = getNode(this, "supplier", host.getSupplier(), data);
		root.add(supplierNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AbstractionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Abstraction ---
		//--- Property mapping ---
		DefaultMutableTreeNode mappingNode = getNode(this, "mapping", host.getMapping(), data);
		root.add(mappingNode);
		//--- Properties for Dependency ---
		//--- Association client ---
		DefaultMutableTreeNode clientNode = getNode(this, "client", host.getClient(), data);
		root.add(clientNode);
		//--- Association supplier ---
		DefaultMutableTreeNode supplierNode = getNode(this, "supplier", host.getSupplier(), data);
		root.add(supplierNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PermissionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Permission ---
		//--- Properties for Dependency ---
		//--- Association client ---
		DefaultMutableTreeNode clientNode = getNode(this, "client", host.getClient(), data);
		root.add(clientNode);
		//--- Association supplier ---
		DefaultMutableTreeNode supplierNode = getNode(this, "supplier", host.getSupplier(), data);
		root.add(supplierNode);
		//--- Properties for Relationship ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.InterfaceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Interface ---
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataType ---
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.NodeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Node ---
		//--- Association resident ---
		DefaultMutableTreeNode residentNode = getNode(this, "resident", host.getResident(), data);
		root.add(residentNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ComponentFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Component ---
		//--- Association deploymentLocation ---
		DefaultMutableTreeNode deploymentLocationNode = getNode(this, "deploymentLocation", host.getDeploymentLocation(), data);
		root.add(deploymentLocationNode);
		//--- Association resident ---
		DefaultMutableTreeNode residentNode = getNode(this, "resident", host.getResident(), data);
		root.add(residentNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ConstraintFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Constraint ---
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Association constrainedStereotye ---
		DefaultMutableTreeNode constrainedStereotyeNode = getNode(this, "constrainedStereotye", host.getConstrainedStereotye(), data);
		root.add(constrainedStereotyeNode);
		//--- Association constrainedElement ---
		DefaultMutableTreeNode constrainedElementNode = getNode(this, "constrainedElement", host.getConstrainedElement(), data);
		root.add(constrainedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.NamespaceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CommentFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Comment ---
		//--- Association annotatedElement ---
		DefaultMutableTreeNode annotatedElementNode = getNode(this, "annotatedElement", host.getAnnotatedElement(), data);
		root.add(annotatedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PresentationElement ---
		//--- Association subject ---
		DefaultMutableTreeNode subjectNode = getNode(this, "subject", host.getSubject(), data);
		root.add(subjectNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TieFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Tie ---
		//--- Association tiedElement ---
		DefaultMutableTreeNode tiedElementNode = getNode(this, "tiedElement", host.getTiedElement(), data);
		root.add(tiedElementNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameterFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TemplateParameter ---
		//--- Association defaultElement ---
		DefaultMutableTreeNode defaultElementNode = getNode(this, "defaultElement", host.getDefaultElement(), data);
		root.add(defaultElementNode);
		//--- Association parameter ---
		DefaultMutableTreeNode parameterNode = getNode(this, "parameter", host.getParameter(), data);
		root.add(parameterNode);
		//--- Association modelElement ---
		DefaultMutableTreeNode modelElementNode = getNode(this, "modelElement", host.getModelElement(), data);
		root.add(modelElementNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SignalFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Signal ---
		//--- Association sendAction ---
		DefaultMutableTreeNode sendActionNode = getNode(this, "sendAction", host.getSendAction(), data);
		root.add(sendActionNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallActionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CallAction ---
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendActionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SendAction ---
		//--- Association signal ---
		DefaultMutableTreeNode signalNode = getNode(this, "signal", host.getSignal(), data);
		root.add(signalNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PrimitiveFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Primitive ---
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_Factory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_ host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Enumeration_ ---
		//--- Association literals ---
		DefaultMutableTreeNode literalsNode = getNode(this, "literals", host.getLiterals(), data);
		root.add(literalsNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for Element ---
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteralFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EnumLiteral ---
		//--- Association enumeration ---
		DefaultMutableTreeNode enumerationNode = getNode(this, "enumeration", host.getEnumeration(), data);
		root.add(enumerationNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.PackageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Package ---
		//--- Association importedElement ---
		DefaultMutableTreeNode importedElementNode = getNode(this, "importedElement", host.getImportedElement(), data);
		root.add(importedElementNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.ModelFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Model ---
		//--- Properties for Package ---
		//--- Association importedElement ---
		DefaultMutableTreeNode importedElementNode = getNode(this, "importedElement", host.getImportedElement(), data);
		root.add(importedElementNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.SubsystemFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Subsystem ---
		//--- Property isInstantiable ---
		DefaultMutableTreeNode isInstantiableNode = getNode(this, "isInstantiable", host.getIsInstantiable(), data);
		root.add(isInstantiableNode);
		//--- Properties for Package ---
		//--- Association importedElement ---
		DefaultMutableTreeNode importedElementNode = getNode(this, "importedElement", host.getImportedElement(), data);
		root.add(importedElementNode);
		//--- Properties for Classifier ---
		//--- Association typedParameter ---
		DefaultMutableTreeNode typedParameterNode = getNode(this, "typedParameter", host.getTypedParameter(), data);
		root.add(typedParameterNode);
		//--- Association feature ---
		DefaultMutableTreeNode featureNode = getNode(this, "feature", host.getFeature(), data);
		root.add(featureNode);
		//--- Association typedFeature ---
		DefaultMutableTreeNode typedFeatureNode = getNode(this, "typedFeature", host.getTypedFeature(), data);
		root.add(typedFeatureNode);
		//--- Association associationEnd ---
		DefaultMutableTreeNode associationEndNode = getNode(this, "associationEnd", host.getAssociationEnd(), data);
		root.add(associationEndNode);
		//--- Association powertypeRange ---
		DefaultMutableTreeNode powertypeRangeNode = getNode(this, "powertypeRange", host.getPowertypeRange(), data);
		root.add(powertypeRangeNode);
		//--- Properties for Namespace ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for GeneralizableElement ---
		//--- Property isRoot ---
		DefaultMutableTreeNode isRootNode = getNode(this, "isRoot", host.getIsRoot(), data);
		root.add(isRootNode);
		//--- Property isLeaf ---
		DefaultMutableTreeNode isLeafNode = getNode(this, "isLeaf", host.getIsLeaf(), data);
		root.add(isLeafNode);
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Association generalization ---
		DefaultMutableTreeNode generalizationNode = getNode(this, "generalization", host.getGeneralization(), data);
		root.add(generalizationNode);
		//--- Association specialization ---
		DefaultMutableTreeNode specializationNode = getNode(this, "specialization", host.getSpecialization(), data);
		root.add(specializationNode);
		//--- Association powertype ---
		DefaultMutableTreeNode powertypeNode = getNode(this, "powertype", host.getPowertype(), data);
		root.add(powertypeNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachineFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StateMachine ---
		//--- Association context ---
		DefaultMutableTreeNode contextNode = getNode(this, "context", host.getContext(), data);
		root.add(contextNode);
		//--- Association transitions ---
		DefaultMutableTreeNode transitionsNode = getNode(this, "transitions", host.getTransitions(), data);
		root.add(transitionsNode);
		//--- Association top ---
		DefaultMutableTreeNode topNode = getNode(this, "top", host.getTop(), data);
		root.add(topNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.GuardFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Guard ---
		//--- Property expression ---
		DefaultMutableTreeNode expressionNode = getNode(this, "expression", host.getExpression(), data);
		root.add(expressionNode);
		//--- Association transition ---
		DefaultMutableTreeNode transitionNode = getNode(this, "transition", host.getTransition(), data);
		root.add(transitionNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.TransitionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Transition ---
		//--- Association stateMachine ---
		DefaultMutableTreeNode stateMachineNode = getNode(this, "stateMachine", host.getStateMachine(), data);
		root.add(stateMachineNode);
		//--- Association guard ---
		DefaultMutableTreeNode guardNode = getNode(this, "guard", host.getGuard(), data);
		root.add(guardNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association state ---
		DefaultMutableTreeNode stateNode = getNode(this, "state", host.getState(), data);
		root.add(stateNode);
		//--- Association effect ---
		DefaultMutableTreeNode effectNode = getNode(this, "effect", host.getEffect(), data);
		root.add(effectNode);
		//--- Association trigger ---
		DefaultMutableTreeNode triggerNode = getNode(this, "trigger", host.getTrigger(), data);
		root.add(triggerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertexFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for State ---
		//--- Association internal_ ---
		DefaultMutableTreeNode internal_Node = getNode(this, "internal_", host.getInternal_(), data);
		root.add(internal_Node);
		//--- Association stateMachine ---
		DefaultMutableTreeNode stateMachineNode = getNode(this, "stateMachine", host.getStateMachine(), data);
		root.add(stateMachineNode);
		//--- Association entry ---
		DefaultMutableTreeNode entryNode = getNode(this, "entry", host.getEntry(), data);
		root.add(entryNode);
		//--- Association exit ---
		DefaultMutableTreeNode exitNode = getNode(this, "exit", host.getExit(), data);
		root.add(exitNode);
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.ActionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Action ---
		//--- Association entry_state ---
		DefaultMutableTreeNode entry_stateNode = getNode(this, "entry_state", host.getEntry_state(), data);
		root.add(entry_stateNode);
		//--- Association transition ---
		DefaultMutableTreeNode transitionNode = getNode(this, "transition", host.getTransition(), data);
		root.add(transitionNode);
		//--- Association exit_state ---
		DefaultMutableTreeNode exit_stateNode = getNode(this, "exit_state", host.getExit_state(), data);
		root.add(exit_stateNode);
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchStateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SynchState ---
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.PseudostateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Pseudostate ---
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubStateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StubState ---
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.EventFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Event ---
		//--- Association transition ---
		DefaultMutableTreeNode transitionNode = getNode(this, "transition", host.getTransition(), data);
		root.add(transitionNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEventFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CallEvent ---
		//--- Properties for Event ---
		//--- Association transition ---
		DefaultMutableTreeNode transitionNode = getNode(this, "transition", host.getTransition(), data);
		root.add(transitionNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Visit factory for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeStateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CompositeState ---
		//--- Association subvertex ---
		DefaultMutableTreeNode subvertexNode = getNode(this, "subvertex", host.getSubvertex(), data);
		root.add(subvertexNode);
		//--- Properties for State ---
		//--- Association internal_ ---
		DefaultMutableTreeNode internal_Node = getNode(this, "internal_", host.getInternal_(), data);
		root.add(internal_Node);
		//--- Association stateMachine ---
		DefaultMutableTreeNode stateMachineNode = getNode(this, "stateMachine", host.getStateMachine(), data);
		root.add(stateMachineNode);
		//--- Association entry ---
		DefaultMutableTreeNode entryNode = getNode(this, "entry", host.getEntry(), data);
		root.add(entryNode);
		//--- Association exit ---
		DefaultMutableTreeNode exitNode = getNode(this, "exit", host.getExit(), data);
		root.add(exitNode);
		//--- Properties for StateVertex ---
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association container ---
		DefaultMutableTreeNode containerNode = getNode(this, "container", host.getContainer(), data);
		root.add(containerNode);
		//--- Properties for ModelElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property visibility ---
		DefaultMutableTreeNode visibilityNode = getNode(this, "visibility", host.getVisibility(), data);
		root.add(visibilityNode);
		//--- Property isSpecification ---
		DefaultMutableTreeNode isSpecificationNode = getNode(this, "isSpecification", host.getIsSpecification(), data);
		root.add(isSpecificationNode);
		//--- Association clientDependency ---
		DefaultMutableTreeNode clientDependencyNode = getNode(this, "clientDependency", host.getClientDependency(), data);
		root.add(clientDependencyNode);
		//--- Association supplierDependency ---
		DefaultMutableTreeNode supplierDependencyNode = getNode(this, "supplierDependency", host.getSupplierDependency(), data);
		root.add(supplierDependencyNode);
		//--- Association implementationLocation ---
		DefaultMutableTreeNode implementationLocationNode = getNode(this, "implementationLocation", host.getImplementationLocation(), data);
		root.add(implementationLocationNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Association package_ ---
		DefaultMutableTreeNode package_Node = getNode(this, "package_", host.getPackage_(), data);
		root.add(package_Node);
		//--- Association behavior ---
		DefaultMutableTreeNode behaviorNode = getNode(this, "behavior", host.getBehavior(), data);
		root.add(behaviorNode);
		//--- Association taggedValue ---
		DefaultMutableTreeNode taggedValueNode = getNode(this, "taggedValue", host.getTaggedValue(), data);
		root.add(taggedValueNode);
		//--- Association referenceTag ---
		DefaultMutableTreeNode referenceTagNode = getNode(this, "referenceTag", host.getReferenceTag(), data);
		root.add(referenceTagNode);
		//--- Association stereotype ---
		DefaultMutableTreeNode stereotypeNode = getNode(this, "stereotype", host.getStereotype(), data);
		root.add(stereotypeNode);
		//--- Association constraint ---
		DefaultMutableTreeNode constraintNode = getNode(this, "constraint", host.getConstraint(), data);
		root.add(constraintNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association targetFlow ---
		DefaultMutableTreeNode targetFlowNode = getNode(this, "targetFlow", host.getTargetFlow(), data);
		root.add(targetFlowNode);
		//--- Association sourceFlow ---
		DefaultMutableTreeNode sourceFlowNode = getNode(this, "sourceFlow", host.getSourceFlow(), data);
		root.add(sourceFlowNode);
		//--- Association comment ---
		DefaultMutableTreeNode commentNode = getNode(this, "comment", host.getComment(), data);
		root.add(commentNode);
		//--- Association presentation ---
		DefaultMutableTreeNode presentationNode = getNode(this, "presentation", host.getPresentation(), data);
		root.add(presentationNode);
		//--- Association tie ---
		DefaultMutableTreeNode tieNode = getNode(this, "tie", host.getTie(), data);
		root.add(tieNode);
		//--- Association templateParameter ---
		DefaultMutableTreeNode templateParameterNode = getNode(this, "templateParameter", host.getTemplateParameter(), data);
		root.add(templateParameterNode);
		//--- Association templateParameters ---
		DefaultMutableTreeNode templateParametersNode = getNode(this, "templateParameters", host.getTemplateParameters(), data);
		root.add(templateParametersNode);
		//--- Properties for Element ---
		return root;
	}
	/** Auxiliary function used by the vistors */
	DefaultMutableTreeNode getNode(UmlJTreeVisitor visitor, String name, Object obj, Object data) {
		//--- Elements visited on this branch ---
		Set visitedElements = (Set)data;
		//--- Create node ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(name);
		//--- Construct the value ---
		//--- Primitive types ---
		if (obj == null) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("null");
			root.add(objNode);
			return root;
		}
		if (Type.isInstanceofPrimitiveType(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj.toString());
			root.add(objNode);
			return root;
		}
		//--- Collection types ---
		if (Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				DefaultMutableTreeNode objNode = getNode(this, "Element", i.next(), data);
				root.add((DefaultMutableTreeNode)objNode.getChildAt(0));
			}
			return root;
		}
		//--- Enumerations types ---
		String fullClassName = obj.getClass().getName();
		if (fullClassName.endsWith("Enum") || fullClassName.endsWith("Kind")) {
			//--- Get class ---
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("Error");
			try {
				Class objClass = obj.getClass();
				Class visitorClass = Class.forName("uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlVisitor");
				Class dataClass = data.getClass();
				Method accept = objClass.getMethod("accept", new Class[] {visitorClass, dataClass});
				objNode = (DefaultMutableTreeNode)accept.invoke(obj, new Object[] {visitor, data});
			} catch (Exception e) {
			}
			root.add(objNode);
			return root;
		}
		//--- User types ---
		//--- Already added on the current branch: make a toSring node ---
		if (visitedElements.contains(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj, false);
			root.add(objNode);
		//--- Was not visited previously on the current branch ---
		} else {
			// Add it
			visitedElements.add(obj);
			// Visit it
			DefaultMutableTreeNode objNode = (DefaultMutableTreeNode)((uk.ac.ukc.cs.kmf.kmfstudio.uml.UmlElement)obj).accept(visitor, visitedElements);
			root.add(objNode);
		}
		return root;
	}
}
