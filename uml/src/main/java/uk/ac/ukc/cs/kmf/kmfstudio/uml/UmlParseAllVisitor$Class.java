/**
 *
 *  Class UmlParseAllVisitor.java
 *
 *  Generated by KMFStudio at 14 April 2004 22:36:48
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.ukc.cs.kmf.kmfstudio.uml;

import java.util.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.syntax.ast.contexts.*;
import uk.ac.kent.cs.ocl20.syntax.parser.*;

public class UmlParseAllVisitor$Class
	extends UmlVisitor$Class
	implements UmlParseAllVisitor
{
	// Create an OCL parser
	protected OclParser oclParser = new OclParserImpl();
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Data_Types::Multiplicity inv range_size: 1<=range->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv modelElement_bidirectional: Set{modelElement}->forAll(x | x.taggedValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceValue_size: 0<=referenceValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceValue_bidirectional: referenceValue->forAll(x | x.referenceTag->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv type_bidirectional: Set{type}->forAll(x | x.typedValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotypeConstraint_size: 0<=stereotypeConstraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotypeConstraint_bidirectional: stereotypeConstraint->forAll(x | x.constrainedStereotye=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv definedTag_size: 0<=definedTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv definedTag_bidirectional: definedTag->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv extendedElement_size: 0<=extendedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv extendedElement_bidirectional: extendedElement->forAll(x | x.stereotype->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv typedValue_size: 0<=typedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv typedValue_bidirectional: typedValue->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv owner_bidirectional: Set{owner}->forAll(x | x.definedTag->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv type_bidirectional: Set{type}->forAll(x | x.typedParameter->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Parameter inv behavioralFeature_bidirectional: Set{behavioralFeature}->forAll(x | x.parameter->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv parameter_size: 0<=parameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Method inv specification_bidirectional: Set{specification}->forAll(x | x.method->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Feature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::StructuralFeature inv type_bidirectional: Set{type}->forAll(x | x.typedFeature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv parameter_size: 0<=parameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::BehavioralFeature inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv parameter_size: 0<=parameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv method_size: 0<=method->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv method_bidirectional: method->forAll(x | x.specification=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv callAction_size: 0<=callAction->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Operation inv callAction_bidirectional: callAction->forAll(x | x.operation=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv type_bidirectional: Set{type}->forAll(x | x.typedFeature->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Attribute inv associationEnd_bidirectional: associationEnd.qualifier = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Relationship inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv association_bidirectional: Set{association}->forAll(x | x.connection->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationEnd inv qualifier_bidirectional: qualifier.associationEnd=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv connection_size: 2<=connection->size() and connection->size()<=2";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Association inv connection_bidirectional: connection->forAll(x | x.association=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv target_size: 0<=target->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv target_bidirectional: target->forAll(x | x.targetFlow->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv source_size: 0<=source->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Flow inv source_bidirectional: source->forAll(x | x.sourceFlow->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv child_bidirectional: Set{child}->forAll(x | x.generalization->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Generalization inv parent_bidirectional: Set{parent}->forAll(x | x.specialization->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Classifier inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_ host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Class_ inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv connection_size: 2<=connection->size() and connection->size()<=2";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::AssociationClass inv connection_bidirectional: connection->forAll(x | x.association=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv client_size: 1<=client->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv supplier_size: 1<=supplier->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Dependency inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv client_size: 1<=client->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv supplier_size: 1<=supplier->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Binding inv argument_size: 1<=argument->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv client_size: 1<=client->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv supplier_size: 1<=supplier->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Usage inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv client_size: 1<=client->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv supplier_size: 1<=supplier->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Abstraction inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv client_size: 1<=client->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv supplier_size: 1<=supplier->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Permission inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Interface inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::DataType inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv resident_size: 0<=resident->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Node inv resident_bidirectional: resident->forAll(x | x.deploymentLocation->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv deploymentLocation_size: 0<=deploymentLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv deploymentLocation_bidirectional: deploymentLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv resident_size: 0<=resident->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Component inv resident_bidirectional: resident->forAll(x | x.implementationLocation->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::GeneralizableElement inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv constrainedStereotye_bidirectional: Set{constrainedStereotye}->forAll(x | x.stereotypeConstraint->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv constrainedElement_size: 0<=constrainedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Constraint inv constrainedElement_bidirectional: constrainedElement->forAll(x | x.constraint->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::ModelElement inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Namespace inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv annotatedElement_size: 0<=annotatedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Comment inv annotatedElement_bidirectional: annotatedElement->forAll(x | x.comment->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::PresentationElement inv subject_size: 0<=subject->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::PresentationElement inv subject_bidirectional: subject->forAll(x | x.presentation->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv tiedElement_size: 0<=tiedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Tie inv tiedElement_bidirectional: tiedElement->forAll(x | x.tie->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::TemplateParameter inv defaultElement_size: 0<=defaultElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::TemplateParameter inv parameter_size: 0<=parameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv sendAction_size: 0<=sendAction->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Signal inv sendAction_bidirectional: sendAction->forAll(x | x.signal=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::CallAction inv operation_bidirectional: Set{operation}->forAll(x | x.callAction->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::SendAction inv signal_bidirectional: Set{signal}->forAll(x | x.sendAction->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Primitive inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_ host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv literals_size: 0<=literals->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::Enumeration_ inv literals_bidirectional: literals->forAll(x | x.enumeration=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Foundation::Core::EnumLiteral inv enumeration_bidirectional: Set{enumeration}->forAll(x | x.literals->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Package inv importedElement_size: 0<=importedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Model inv importedElement_size: 0<=importedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv generalization_size: 0<=generalization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv specialization_size: 0<=specialization->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv powertype_bidirectional: powertype.powertypeRange = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv ownedElement_size: 0<=ownedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv typedParameter_size: 0<=typedParameter->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv feature_size: 0<=feature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv feature_bidirectional: feature->forAll(x | x.owner=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv typedFeature_size: 0<=typedFeature->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv powertypeRange_bidirectional: powertypeRange.powertype=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Model_Management::Subsystem inv importedElement_size: 0<=importedElement->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv context_bidirectional: Set{context}->forAll(x | x.behavior->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv transitions_size: 0<=transitions->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv transitions_bidirectional: transitions->forAll(x | x.stateMachine=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv top_bidirectional: top.stateMachine=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv transition_bidirectional: transition.guard=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stateMachine_bidirectional: Set{stateMachine}->forAll(x | x.transitions->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv guard_bidirectional: guard.transition = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv source_bidirectional: Set{source}->forAll(x | x.outgoing->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv target_bidirectional: Set{target}->forAll(x | x.incoming->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv state_bidirectional: Set{state}->forAll(x | x.internal_->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv effect_bidirectional: effect.transition = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv trigger_bidirectional: Set{trigger}->forAll(x | x.transition->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv internal__size: 0<=internal_->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv internal__bidirectional: internal_->forAll(x | x.state=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv stateMachine_bidirectional: stateMachine.top = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv entry_bidirectional: entry.entry_state = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::State inv exit_bidirectional: exit.exit_state=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Action inv entry_state_bidirectional: entry_state.entry=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Action inv transition_bidirectional: transition.effect=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Action inv exit_state_bidirectional: exit_state.exit = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv transition_size: 0<=transition->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::Event inv transition_bidirectional: transition->forAll(x | x.trigger=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv transition_size: 0<=transition->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv transition_bidirectional: transition->forAll(x | x.trigger=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState host, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		int errorNo;
		PackageDeclarationAS pkgDeclAS;
		log.reportMessage("Parsing invariants for "+host+"...");
		try {
			errorNo = log.getErrors();
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv clientDependency_size: 0<=clientDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv supplierDependency_size: 0<=supplierDependency->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv implementationLocation_size: 0<=implementationLocation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv behavior_size: 0<=behavior->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv taggedValue_size: 0<=taggedValue->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv referenceTag_size: 0<=referenceTag->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stereotype_size: 0<=stereotype->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv constraint_size: 0<=constraint->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv targetFlow_size: 0<=targetFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv sourceFlow_size: 0<=sourceFlow->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv comment_size: 0<=comment->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv presentation_size: 0<=presentation->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv tie_size: 0<=tie->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv templateParameters_size: 0<=templateParameters->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv outgoing_size: 0<=outgoing->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv incoming_size: 0<=incoming->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv internal__size: 0<=internal_->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv internal__bidirectional: internal_->forAll(x | x.state=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stateMachine_bidirectional: stateMachine.top = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv entry_bidirectional: entry.entry_state = self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv exit_bidirectional: exit.exit_state=self";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv subvertex_size: 0<=subvertex->size()";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			//--- Print invariant ---
			invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv subvertex_bidirectional: subvertex->forAll(x | x.container=self)";
			log.reportMessage(invariant);
			pkgDeclAS = oclParser.parse(invariant, log);
			if (pkgDeclAS == null) errorNo--;
			if (errorNo == log.getErrors()) {
			log.reportMessage("No errors");
			}
		} catch (Exception e1) {
			log.reportError("Runtime error: ", e1);
			e1.printStackTrace(System.out);
		}
		return null;
	}
}
