/**
 *
 *  Class UmlEvaluateAllVisitor.java
 *
 *  Generated by KMFStudio at 14 April 2004 22:36:49
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.ukc.cs.kmf.kmfstudio.uml;

import java.util.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.standard.lib.*;
import uk.ac.kent.cs.ocl20.synthesis.ModelImplementationAdapter;

public class UmlEvaluateAllVisitor$Class
	extends UmlVisitor$Class
	implements UmlEvaluateAllVisitor
{
    private ModelImplementationAdapter modelImplementationAdapter;

    public UmlEvaluateAllVisitor$Class(ModelImplementationAdapter modelImplementationAdapter) {
        this.modelImplementationAdapter = modelImplementationAdapter;
    }

	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.UnlimitedInteger self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Time self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Expression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Name self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Multiplicity self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Data_Types::Multiplicity inv range_size: 1<=range->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MultiplicityRange self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.LocationReference self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MappingExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.Geometry self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ActionExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.BooleanExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ProcedureExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TypeExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ArgListsExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.IterationExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ObjectSetExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.TimeExpression self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ScopeKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.MessageDirectionKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.OrderingKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ParameterDirectionKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.VisibilityKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.CallConcurrencyKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.PseudostateKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.AggregationKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Data_Types.ChangeabilityKind self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv modelElement_bidirectional: Set{modelElement}->forAll(x | x.taggedValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceValue_size: 0<=referenceValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv referenceValue_bidirectional: referenceValue->forAll(x | x.referenceTag->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TaggedValue inv type_bidirectional: Set{type}->forAll(x | x.typedValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotypeConstraint_size: 0<=stereotypeConstraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv stereotypeConstraint_bidirectional: stereotypeConstraint->forAll(x | x.constrainedStereotye=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv definedTag_size: 0<=definedTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv definedTag_bidirectional: definedTag->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv extendedElement_size: 0<=extendedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::Stereotype inv extendedElement_bidirectional: extendedElement->forAll(x | x.stereotype->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TagDefinition self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv typedValue_size: 0<=typedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv typedValue_bidirectional: typedValue->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Extension_Mechanisms::TagDefinition inv owner_bidirectional: Set{owner}->forAll(x | x.definedTag->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.StringArray self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t4 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t5 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t6 = StdLibAdapterImpl.INSTANCE.impl(t4).iterator();
			while (t6.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t6.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t8 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t7 = (OclBoolean)t8.includes(self);
				t5 = t7;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t5).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t5);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t11 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t10 = (OclInteger)t11.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t9 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t10);

			//--- Print result ---
			log.reportMessage(": "+t9);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t12 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t13 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t14 = StdLibAdapterImpl.INSTANCE.impl(t12).iterator();
			while (t14.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t14.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t16 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t15 = (OclBoolean)t16.includes(self);
				t13 = t15;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t13).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t13);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t19 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t18 = (OclInteger)t19.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t17 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t18);

			//--- Print result ---
			log.reportMessage(": "+t17);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t20 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t21 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t22 = StdLibAdapterImpl.INSTANCE.impl(t20).iterator();
			while (t22.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t22.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t24 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t23 = (OclBoolean)t24.includes(self);
				t21 = t23;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t21).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t21);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t27 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t26 = (OclInteger)t27.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t25 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t26);

			//--- Print result ---
			log.reportMessage(": "+t25);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t31 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t32 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t33 = StdLibAdapterImpl.INSTANCE.impl(t31).iterator();
			while (t33.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t33.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t35 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t34 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t35, self));
				t32 = t34;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t32).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t32);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t38 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t37 = (OclInteger)t38.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t36 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t37);

			//--- Print result ---
			log.reportMessage(": "+t36);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t39 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t40 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t41 = StdLibAdapterImpl.INSTANCE.impl(t39).iterator();
			while (t41.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t41.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t43 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t42 = (OclBoolean)t43.includes(self);
				t40 = t42;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t40).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t40);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t46 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t45 = (OclInteger)t46.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t44 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t45);

			//--- Print result ---
			log.reportMessage(": "+t44);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t47 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t48 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t49 = StdLibAdapterImpl.INSTANCE.impl(t47).iterator();
			while (t49.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t49.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t51 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t50 = (OclBoolean)t51.includes(self);
				t48 = t50;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t48).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t48);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t54 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t53 = (OclInteger)t54.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t52 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t53);

			//--- Print result ---
			log.reportMessage(": "+t52);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t55 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t56 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t57 = StdLibAdapterImpl.INSTANCE.impl(t55).iterator();
			while (t57.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t57.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t59 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t58 = (OclBoolean)t59.includes(self);
				t56 = t58;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t56).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t56);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t63 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t64 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t65 = StdLibAdapterImpl.INSTANCE.impl(t63).iterator();
			while (t65.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t65.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t67 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t66 = (OclBoolean)t67.includes(self);
				t64 = t66;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t64).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t64);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t70 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t69 = (OclInteger)t70.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t68 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t69);

			//--- Print result ---
			log.reportMessage(": "+t68);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t71 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t72 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t73 = StdLibAdapterImpl.INSTANCE.impl(t71).iterator();
			while (t73.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t73.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t75 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t74 = (OclBoolean)t75.includes(self);
				t72 = t74;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t72).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t72);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t78 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t77 = (OclInteger)t78.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t76 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t77);

			//--- Print result ---
			log.reportMessage(": "+t76);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t79 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t80 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t81 = StdLibAdapterImpl.INSTANCE.impl(t79).iterator();
			while (t81.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t81.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t83 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t82 = (OclBoolean)t83.includes(self);
				t80 = t82;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t80).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t80);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t86 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t85 = (OclInteger)t86.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t84 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t85);

			//--- Print result ---
			log.reportMessage(": "+t84);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t87 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t88 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t89 = StdLibAdapterImpl.INSTANCE.impl(t87).iterator();
			while (t89.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t89.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t91 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t90 = (OclBoolean)t91.includes(self);
				t88 = t90;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t88).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t88);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t94 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t93 = (OclInteger)t94.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t92 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t93);

			//--- Print result ---
			log.reportMessage(": "+t92);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t95 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t96 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t97 = StdLibAdapterImpl.INSTANCE.impl(t95).iterator();
			while (t97.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t97.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t99 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t98 = (OclBoolean)t99.includes(self);
				t96 = t98;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t96).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t96);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t102 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t101 = (OclInteger)t102.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t100 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t101);

			//--- Print result ---
			log.reportMessage(": "+t100);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv type_bidirectional: Set{type}->forAll(x | x.typedParameter->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t103 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'type'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t104 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getType();
			t103 = t103.including(t104);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t105 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t106 = StdLibAdapterImpl.INSTANCE.impl(t103).iterator();
			while (t106.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t106.next();
				//--- Compute body ---
				// Call property 'typedParameter'
				OclBag t108 = StdLibAdapterImpl.INSTANCE.Bag(x.getTypedParameter());
				// Call operation 'includes'
				OclBoolean t107 = (OclBoolean)t108.includes(self);
				t105 = t107;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t105).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t105);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Parameter inv behavioralFeature_bidirectional: Set{behavioralFeature}->forAll(x | x.parameter->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t109 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'behavioralFeature'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature t110 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature)self.getBehavioralFeature();
			t109 = t109.including(t110);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature x = null;
			//--- Init flag ---
			OclBoolean t111 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t112 = StdLibAdapterImpl.INSTANCE.impl(t109).iterator();
			while (t112.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature)t112.next();
				//--- Compute body ---
				// Call property 'parameter'
				OclSequence t114 = StdLibAdapterImpl.INSTANCE.Sequence(x.getParameter());
				// Call operation 'includes'
				OclBoolean t113 = (OclBoolean)t114.includes(self);
				t111 = t113;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t111).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t111);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t117 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t116 = (OclInteger)t117.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t115 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t116);

			//--- Print result ---
			log.reportMessage(": "+t115);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t118 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t119 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t120 = StdLibAdapterImpl.INSTANCE.impl(t118).iterator();
			while (t120.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t120.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t122 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t121 = (OclBoolean)t122.includes(self);
				t119 = t121;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t119).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t119);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t125 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t124 = (OclInteger)t125.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t123 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t124);

			//--- Print result ---
			log.reportMessage(": "+t123);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t126 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t127 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t128 = StdLibAdapterImpl.INSTANCE.impl(t126).iterator();
			while (t128.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t128.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t130 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t129 = (OclBoolean)t130.includes(self);
				t127 = t129;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t127).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t127);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t133 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t132 = (OclInteger)t133.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t131 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t132);

			//--- Print result ---
			log.reportMessage(": "+t131);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t134 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t135 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t136 = StdLibAdapterImpl.INSTANCE.impl(t134).iterator();
			while (t136.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t136.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t138 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t137 = (OclBoolean)t138.includes(self);
				t135 = t137;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t135).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t135);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t141 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t140 = (OclInteger)t141.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t139 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t140);

			//--- Print result ---
			log.reportMessage(": "+t139);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t145 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t146 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t147 = StdLibAdapterImpl.INSTANCE.impl(t145).iterator();
			while (t147.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t147.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t149 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t148 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t149, self));
				t146 = t148;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t146).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t146);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t152 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t151 = (OclInteger)t152.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t150 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t151);

			//--- Print result ---
			log.reportMessage(": "+t150);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t153 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t154 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t155 = StdLibAdapterImpl.INSTANCE.impl(t153).iterator();
			while (t155.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t155.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t157 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t156 = (OclBoolean)t157.includes(self);
				t154 = t156;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t154).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t154);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t160 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t159 = (OclInteger)t160.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t158 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t159);

			//--- Print result ---
			log.reportMessage(": "+t158);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t161 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t162 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t163 = StdLibAdapterImpl.INSTANCE.impl(t161).iterator();
			while (t163.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t163.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t165 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t164 = (OclBoolean)t165.includes(self);
				t162 = t164;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t162).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t162);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t168 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t167 = (OclInteger)t168.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t166 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t167);

			//--- Print result ---
			log.reportMessage(": "+t166);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t169 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t170 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t171 = StdLibAdapterImpl.INSTANCE.impl(t169).iterator();
			while (t171.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t171.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t173 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t172 = (OclBoolean)t173.includes(self);
				t170 = t172;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t170).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t170);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t177 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t178 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t179 = StdLibAdapterImpl.INSTANCE.impl(t177).iterator();
			while (t179.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t179.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t181 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t180 = (OclBoolean)t181.includes(self);
				t178 = t180;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t178).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t178);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t184 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t183 = (OclInteger)t184.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t182 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t183);

			//--- Print result ---
			log.reportMessage(": "+t182);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t185 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t186 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t187 = StdLibAdapterImpl.INSTANCE.impl(t185).iterator();
			while (t187.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t187.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t189 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t188 = (OclBoolean)t189.includes(self);
				t186 = t188;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t186).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t186);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t192 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t191 = (OclInteger)t192.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t190 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t191);

			//--- Print result ---
			log.reportMessage(": "+t190);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t193 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t194 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t195 = StdLibAdapterImpl.INSTANCE.impl(t193).iterator();
			while (t195.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t195.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t197 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t196 = (OclBoolean)t197.includes(self);
				t194 = t196;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t194).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t194);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t200 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t199 = (OclInteger)t200.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t198 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t199);

			//--- Print result ---
			log.reportMessage(": "+t198);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t201 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t202 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t203 = StdLibAdapterImpl.INSTANCE.impl(t201).iterator();
			while (t203.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t203.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t205 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t204 = (OclBoolean)t205.includes(self);
				t202 = t204;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t202).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t202);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t208 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t207 = (OclInteger)t208.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t206 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t207);

			//--- Print result ---
			log.reportMessage(": "+t206);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t209 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t210 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t211 = StdLibAdapterImpl.INSTANCE.impl(t209).iterator();
			while (t211.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t211.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t213 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t212 = (OclBoolean)t213.includes(self);
				t210 = t212;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t210).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t210);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t216 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t215 = (OclInteger)t216.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t214 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t215);

			//--- Print result ---
			log.reportMessage(": "+t214);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t217 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t218 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t217 = t217.including(t218);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t219 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t220 = StdLibAdapterImpl.INSTANCE.impl(t217).iterator();
			while (t220.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t220.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t222 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t221 = (OclBoolean)t222.includes(self);
				t219 = t221;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t219).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t219);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv parameter_size: 0<=parameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'parameter'
			OclSequence t225 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			// Call operation 'size'
			OclInteger t224 = (OclInteger)t225.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t223 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t224);

			//--- Print result ---
			log.reportMessage(": "+t223);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'parameter'
			OclSequence t226 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t227 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t228 = StdLibAdapterImpl.INSTANCE.impl(t226).iterator();
			while (t228.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t228.next();
				//--- Compute body ---
				// Call property 'behavioralFeature'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature t230 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature)x.getBehavioralFeature();
				// Call operation 'equalTo'
				OclBoolean t229 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t230, self));
				t227 = t229;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t227).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t227);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Method inv specification_bidirectional: Set{specification}->forAll(x | x.method->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t231 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'specification'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation t232 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)self.getSpecification();
			t231 = t231.including(t232);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation x = null;
			//--- Init flag ---
			OclBoolean t233 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t234 = StdLibAdapterImpl.INSTANCE.impl(t231).iterator();
			while (t234.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)t234.next();
				//--- Compute body ---
				// Call property 'method'
				OclBag t236 = StdLibAdapterImpl.INSTANCE.Bag(x.getMethod());
				// Call operation 'includes'
				OclBoolean t235 = (OclBoolean)t236.includes(self);
				t233 = t235;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t233).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t233);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Element self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t239 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t238 = (OclInteger)t239.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t237 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t238);

			//--- Print result ---
			log.reportMessage(": "+t237);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t240 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t241 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t242 = StdLibAdapterImpl.INSTANCE.impl(t240).iterator();
			while (t242.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t242.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t244 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t243 = (OclBoolean)t244.includes(self);
				t241 = t243;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t241).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t241);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t247 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t246 = (OclInteger)t247.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t245 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t246);

			//--- Print result ---
			log.reportMessage(": "+t245);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t248 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t249 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t250 = StdLibAdapterImpl.INSTANCE.impl(t248).iterator();
			while (t250.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t250.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t252 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t251 = (OclBoolean)t252.includes(self);
				t249 = t251;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t249).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t249);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t255 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t254 = (OclInteger)t255.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t253 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t254);

			//--- Print result ---
			log.reportMessage(": "+t253);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t256 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t257 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t258 = StdLibAdapterImpl.INSTANCE.impl(t256).iterator();
			while (t258.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t258.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t260 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t259 = (OclBoolean)t260.includes(self);
				t257 = t259;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t257).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t257);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t263 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t262 = (OclInteger)t263.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t261 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t262);

			//--- Print result ---
			log.reportMessage(": "+t261);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t267 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t268 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t269 = StdLibAdapterImpl.INSTANCE.impl(t267).iterator();
			while (t269.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t269.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t271 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t270 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t271, self));
				t268 = t270;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t268).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t268);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t274 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t273 = (OclInteger)t274.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t272 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t273);

			//--- Print result ---
			log.reportMessage(": "+t272);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t275 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t276 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t277 = StdLibAdapterImpl.INSTANCE.impl(t275).iterator();
			while (t277.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t277.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t279 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t278 = (OclBoolean)t279.includes(self);
				t276 = t278;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t276).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t276);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t282 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t281 = (OclInteger)t282.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t280 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t281);

			//--- Print result ---
			log.reportMessage(": "+t280);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t283 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t284 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t285 = StdLibAdapterImpl.INSTANCE.impl(t283).iterator();
			while (t285.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t285.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t287 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t286 = (OclBoolean)t287.includes(self);
				t284 = t286;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t284).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t284);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t290 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t289 = (OclInteger)t290.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t288 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t289);

			//--- Print result ---
			log.reportMessage(": "+t288);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t291 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t292 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t293 = StdLibAdapterImpl.INSTANCE.impl(t291).iterator();
			while (t293.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t293.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t295 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t294 = (OclBoolean)t295.includes(self);
				t292 = t294;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t292).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t292);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t299 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t300 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t301 = StdLibAdapterImpl.INSTANCE.impl(t299).iterator();
			while (t301.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t301.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t303 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t302 = (OclBoolean)t303.includes(self);
				t300 = t302;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t300).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t300);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t306 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t305 = (OclInteger)t306.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t304 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t305);

			//--- Print result ---
			log.reportMessage(": "+t304);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t307 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t308 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t309 = StdLibAdapterImpl.INSTANCE.impl(t307).iterator();
			while (t309.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t309.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t311 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t310 = (OclBoolean)t311.includes(self);
				t308 = t310;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t308).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t308);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t314 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t313 = (OclInteger)t314.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t312 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t313);

			//--- Print result ---
			log.reportMessage(": "+t312);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t315 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t316 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t317 = StdLibAdapterImpl.INSTANCE.impl(t315).iterator();
			while (t317.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t317.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t319 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t318 = (OclBoolean)t319.includes(self);
				t316 = t318;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t316).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t316);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t322 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t321 = (OclInteger)t322.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t320 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t321);

			//--- Print result ---
			log.reportMessage(": "+t320);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t323 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t324 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t325 = StdLibAdapterImpl.INSTANCE.impl(t323).iterator();
			while (t325.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t325.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t327 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t326 = (OclBoolean)t327.includes(self);
				t324 = t326;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t324).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t324);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t330 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t329 = (OclInteger)t330.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t328 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t329);

			//--- Print result ---
			log.reportMessage(": "+t328);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t331 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t332 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t333 = StdLibAdapterImpl.INSTANCE.impl(t331).iterator();
			while (t333.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t333.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t335 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t334 = (OclBoolean)t335.includes(self);
				t332 = t334;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t332).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t332);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t338 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t337 = (OclInteger)t338.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t336 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t337);

			//--- Print result ---
			log.reportMessage(": "+t336);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Feature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t339 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t340 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t339 = t339.including(t340);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t341 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t342 = StdLibAdapterImpl.INSTANCE.impl(t339).iterator();
			while (t342.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t342.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t344 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t343 = (OclBoolean)t344.includes(self);
				t341 = t343;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t341).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t341);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t347 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t346 = (OclInteger)t347.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t345 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t346);

			//--- Print result ---
			log.reportMessage(": "+t345);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t348 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t349 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t350 = StdLibAdapterImpl.INSTANCE.impl(t348).iterator();
			while (t350.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t350.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t352 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t351 = (OclBoolean)t352.includes(self);
				t349 = t351;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t349).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t349);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t355 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t354 = (OclInteger)t355.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t353 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t354);

			//--- Print result ---
			log.reportMessage(": "+t353);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t356 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t357 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t358 = StdLibAdapterImpl.INSTANCE.impl(t356).iterator();
			while (t358.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t358.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t360 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t359 = (OclBoolean)t360.includes(self);
				t357 = t359;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t357).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t357);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t363 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t362 = (OclInteger)t363.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t361 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t362);

			//--- Print result ---
			log.reportMessage(": "+t361);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t364 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t365 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t366 = StdLibAdapterImpl.INSTANCE.impl(t364).iterator();
			while (t366.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t366.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t368 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t367 = (OclBoolean)t368.includes(self);
				t365 = t367;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t365).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t365);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t371 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t370 = (OclInteger)t371.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t369 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t370);

			//--- Print result ---
			log.reportMessage(": "+t369);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t375 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t376 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t377 = StdLibAdapterImpl.INSTANCE.impl(t375).iterator();
			while (t377.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t377.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t379 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t378 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t379, self));
				t376 = t378;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t376).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t376);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t382 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t381 = (OclInteger)t382.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t380 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t381);

			//--- Print result ---
			log.reportMessage(": "+t380);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t383 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t384 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t385 = StdLibAdapterImpl.INSTANCE.impl(t383).iterator();
			while (t385.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t385.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t387 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t386 = (OclBoolean)t387.includes(self);
				t384 = t386;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t384).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t384);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t390 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t389 = (OclInteger)t390.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t388 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t389);

			//--- Print result ---
			log.reportMessage(": "+t388);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t391 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t392 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t393 = StdLibAdapterImpl.INSTANCE.impl(t391).iterator();
			while (t393.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t393.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t395 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t394 = (OclBoolean)t395.includes(self);
				t392 = t394;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t392).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t392);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t398 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t397 = (OclInteger)t398.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t396 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t397);

			//--- Print result ---
			log.reportMessage(": "+t396);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t399 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t400 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t401 = StdLibAdapterImpl.INSTANCE.impl(t399).iterator();
			while (t401.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t401.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t403 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t402 = (OclBoolean)t403.includes(self);
				t400 = t402;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t400).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t400);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t407 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t408 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t409 = StdLibAdapterImpl.INSTANCE.impl(t407).iterator();
			while (t409.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t409.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t411 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t410 = (OclBoolean)t411.includes(self);
				t408 = t410;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t408).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t408);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t414 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t413 = (OclInteger)t414.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t412 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t413);

			//--- Print result ---
			log.reportMessage(": "+t412);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t415 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t416 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t417 = StdLibAdapterImpl.INSTANCE.impl(t415).iterator();
			while (t417.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t417.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t419 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t418 = (OclBoolean)t419.includes(self);
				t416 = t418;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t416).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t416);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t422 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t421 = (OclInteger)t422.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t420 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t421);

			//--- Print result ---
			log.reportMessage(": "+t420);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t423 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t424 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t425 = StdLibAdapterImpl.INSTANCE.impl(t423).iterator();
			while (t425.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t425.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t427 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t426 = (OclBoolean)t427.includes(self);
				t424 = t426;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t424).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t424);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t430 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t429 = (OclInteger)t430.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t428 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t429);

			//--- Print result ---
			log.reportMessage(": "+t428);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t431 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t432 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t433 = StdLibAdapterImpl.INSTANCE.impl(t431).iterator();
			while (t433.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t433.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t435 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t434 = (OclBoolean)t435.includes(self);
				t432 = t434;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t432).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t432);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t438 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t437 = (OclInteger)t438.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t436 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t437);

			//--- Print result ---
			log.reportMessage(": "+t436);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t439 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t440 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t441 = StdLibAdapterImpl.INSTANCE.impl(t439).iterator();
			while (t441.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t441.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t443 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t442 = (OclBoolean)t443.includes(self);
				t440 = t442;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t440).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t440);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t446 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t445 = (OclInteger)t446.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t444 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t445);

			//--- Print result ---
			log.reportMessage(": "+t444);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t447 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t448 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t447 = t447.including(t448);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t449 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t450 = StdLibAdapterImpl.INSTANCE.impl(t447).iterator();
			while (t450.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t450.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t452 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t451 = (OclBoolean)t452.includes(self);
				t449 = t451;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t449).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t449);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::StructuralFeature inv type_bidirectional: Set{type}->forAll(x | x.typedFeature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t453 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'type'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t454 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getType();
			t453 = t453.including(t454);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t455 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t456 = StdLibAdapterImpl.INSTANCE.impl(t453).iterator();
			while (t456.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t456.next();
				//--- Compute body ---
				// Call property 'typedFeature'
				OclBag t458 = StdLibAdapterImpl.INSTANCE.Bag(x.getTypedFeature());
				// Call operation 'includes'
				OclBoolean t457 = (OclBoolean)t458.includes(self);
				t455 = t457;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t455).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t455);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t461 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t460 = (OclInteger)t461.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t459 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t460);

			//--- Print result ---
			log.reportMessage(": "+t459);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t462 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t463 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t464 = StdLibAdapterImpl.INSTANCE.impl(t462).iterator();
			while (t464.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t464.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t466 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t465 = (OclBoolean)t466.includes(self);
				t463 = t465;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t463).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t463);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t469 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t468 = (OclInteger)t469.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t467 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t468);

			//--- Print result ---
			log.reportMessage(": "+t467);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t470 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t471 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t472 = StdLibAdapterImpl.INSTANCE.impl(t470).iterator();
			while (t472.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t472.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t474 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t473 = (OclBoolean)t474.includes(self);
				t471 = t473;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t471).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t471);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t477 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t476 = (OclInteger)t477.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t475 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t476);

			//--- Print result ---
			log.reportMessage(": "+t475);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t478 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t479 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t480 = StdLibAdapterImpl.INSTANCE.impl(t478).iterator();
			while (t480.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t480.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t482 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t481 = (OclBoolean)t482.includes(self);
				t479 = t481;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t479).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t479);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t485 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t484 = (OclInteger)t485.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t483 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t484);

			//--- Print result ---
			log.reportMessage(": "+t483);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t489 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t490 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t491 = StdLibAdapterImpl.INSTANCE.impl(t489).iterator();
			while (t491.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t491.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t493 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t492 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t493, self));
				t490 = t492;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t490).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t490);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t496 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t495 = (OclInteger)t496.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t494 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t495);

			//--- Print result ---
			log.reportMessage(": "+t494);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t497 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t498 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t499 = StdLibAdapterImpl.INSTANCE.impl(t497).iterator();
			while (t499.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t499.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t501 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t500 = (OclBoolean)t501.includes(self);
				t498 = t500;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t498).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t498);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t504 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t503 = (OclInteger)t504.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t502 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t503);

			//--- Print result ---
			log.reportMessage(": "+t502);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t505 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t506 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t507 = StdLibAdapterImpl.INSTANCE.impl(t505).iterator();
			while (t507.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t507.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t509 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t508 = (OclBoolean)t509.includes(self);
				t506 = t508;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t506).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t506);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t512 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t511 = (OclInteger)t512.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t510 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t511);

			//--- Print result ---
			log.reportMessage(": "+t510);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t513 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t514 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t515 = StdLibAdapterImpl.INSTANCE.impl(t513).iterator();
			while (t515.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t515.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t517 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t516 = (OclBoolean)t517.includes(self);
				t514 = t516;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t514).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t514);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t521 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t522 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t523 = StdLibAdapterImpl.INSTANCE.impl(t521).iterator();
			while (t523.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t523.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t525 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t524 = (OclBoolean)t525.includes(self);
				t522 = t524;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t522).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t522);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t528 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t527 = (OclInteger)t528.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t526 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t527);

			//--- Print result ---
			log.reportMessage(": "+t526);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t529 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t530 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t531 = StdLibAdapterImpl.INSTANCE.impl(t529).iterator();
			while (t531.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t531.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t533 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t532 = (OclBoolean)t533.includes(self);
				t530 = t532;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t530).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t530);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t536 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t535 = (OclInteger)t536.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t534 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t535);

			//--- Print result ---
			log.reportMessage(": "+t534);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t537 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t538 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t539 = StdLibAdapterImpl.INSTANCE.impl(t537).iterator();
			while (t539.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t539.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t541 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t540 = (OclBoolean)t541.includes(self);
				t538 = t540;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t538).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t538);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t544 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t543 = (OclInteger)t544.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t542 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t543);

			//--- Print result ---
			log.reportMessage(": "+t542);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t545 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t546 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t547 = StdLibAdapterImpl.INSTANCE.impl(t545).iterator();
			while (t547.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t547.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t549 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t548 = (OclBoolean)t549.includes(self);
				t546 = t548;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t546).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t546);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t552 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t551 = (OclInteger)t552.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t550 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t551);

			//--- Print result ---
			log.reportMessage(": "+t550);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t553 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t554 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t555 = StdLibAdapterImpl.INSTANCE.impl(t553).iterator();
			while (t555.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t555.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t557 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t556 = (OclBoolean)t557.includes(self);
				t554 = t556;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t554).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t554);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t560 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t559 = (OclInteger)t560.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t558 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t559);

			//--- Print result ---
			log.reportMessage(": "+t558);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t561 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t562 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t561 = t561.including(t562);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t563 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t564 = StdLibAdapterImpl.INSTANCE.impl(t561).iterator();
			while (t564.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t564.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t566 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t565 = (OclBoolean)t566.includes(self);
				t563 = t565;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t563).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t563);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv parameter_size: 0<=parameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'parameter'
			OclSequence t569 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			// Call operation 'size'
			OclInteger t568 = (OclInteger)t569.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t567 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t568);

			//--- Print result ---
			log.reportMessage(": "+t567);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::BehavioralFeature inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'parameter'
			OclSequence t570 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t571 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t572 = StdLibAdapterImpl.INSTANCE.impl(t570).iterator();
			while (t572.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t572.next();
				//--- Compute body ---
				// Call property 'behavioralFeature'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature t574 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature)x.getBehavioralFeature();
				// Call operation 'equalTo'
				OclBoolean t573 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t574, self));
				t571 = t573;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t571).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t571);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t577 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t576 = (OclInteger)t577.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t575 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t576);

			//--- Print result ---
			log.reportMessage(": "+t575);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t578 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t579 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t580 = StdLibAdapterImpl.INSTANCE.impl(t578).iterator();
			while (t580.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t580.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t582 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t581 = (OclBoolean)t582.includes(self);
				t579 = t581;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t579).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t579);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t585 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t584 = (OclInteger)t585.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t583 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t584);

			//--- Print result ---
			log.reportMessage(": "+t583);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t586 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t587 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t588 = StdLibAdapterImpl.INSTANCE.impl(t586).iterator();
			while (t588.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t588.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t590 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t589 = (OclBoolean)t590.includes(self);
				t587 = t589;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t587).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t587);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t593 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t592 = (OclInteger)t593.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t591 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t592);

			//--- Print result ---
			log.reportMessage(": "+t591);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t594 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t595 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t596 = StdLibAdapterImpl.INSTANCE.impl(t594).iterator();
			while (t596.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t596.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t598 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t597 = (OclBoolean)t598.includes(self);
				t595 = t597;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t595).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t595);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t601 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t600 = (OclInteger)t601.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t599 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t600);

			//--- Print result ---
			log.reportMessage(": "+t599);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t605 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t606 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t607 = StdLibAdapterImpl.INSTANCE.impl(t605).iterator();
			while (t607.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t607.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t609 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t608 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t609, self));
				t606 = t608;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t606).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t606);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t612 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t611 = (OclInteger)t612.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t610 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t611);

			//--- Print result ---
			log.reportMessage(": "+t610);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t613 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t614 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t615 = StdLibAdapterImpl.INSTANCE.impl(t613).iterator();
			while (t615.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t615.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t617 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t616 = (OclBoolean)t617.includes(self);
				t614 = t616;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t614).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t614);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t620 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t619 = (OclInteger)t620.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t618 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t619);

			//--- Print result ---
			log.reportMessage(": "+t618);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t621 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t622 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t623 = StdLibAdapterImpl.INSTANCE.impl(t621).iterator();
			while (t623.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t623.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t625 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t624 = (OclBoolean)t625.includes(self);
				t622 = t624;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t622).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t622);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t628 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t627 = (OclInteger)t628.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t626 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t627);

			//--- Print result ---
			log.reportMessage(": "+t626);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t629 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t630 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t631 = StdLibAdapterImpl.INSTANCE.impl(t629).iterator();
			while (t631.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t631.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t633 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t632 = (OclBoolean)t633.includes(self);
				t630 = t632;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t630).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t630);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t637 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t638 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t639 = StdLibAdapterImpl.INSTANCE.impl(t637).iterator();
			while (t639.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t639.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t641 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t640 = (OclBoolean)t641.includes(self);
				t638 = t640;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t638).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t638);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t644 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t643 = (OclInteger)t644.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t642 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t643);

			//--- Print result ---
			log.reportMessage(": "+t642);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t645 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t646 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t647 = StdLibAdapterImpl.INSTANCE.impl(t645).iterator();
			while (t647.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t647.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t649 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t648 = (OclBoolean)t649.includes(self);
				t646 = t648;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t646).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t646);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t652 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t651 = (OclInteger)t652.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t650 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t651);

			//--- Print result ---
			log.reportMessage(": "+t650);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t653 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t654 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t655 = StdLibAdapterImpl.INSTANCE.impl(t653).iterator();
			while (t655.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t655.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t657 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t656 = (OclBoolean)t657.includes(self);
				t654 = t656;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t654).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t654);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t660 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t659 = (OclInteger)t660.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t658 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t659);

			//--- Print result ---
			log.reportMessage(": "+t658);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t661 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t662 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t663 = StdLibAdapterImpl.INSTANCE.impl(t661).iterator();
			while (t663.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t663.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t665 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t664 = (OclBoolean)t665.includes(self);
				t662 = t664;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t662).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t662);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t668 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t667 = (OclInteger)t668.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t666 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t667);

			//--- Print result ---
			log.reportMessage(": "+t666);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t669 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t670 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t671 = StdLibAdapterImpl.INSTANCE.impl(t669).iterator();
			while (t671.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t671.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t673 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t672 = (OclBoolean)t673.includes(self);
				t670 = t672;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t670).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t670);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t676 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t675 = (OclInteger)t676.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t674 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t675);

			//--- Print result ---
			log.reportMessage(": "+t674);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t677 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t678 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t677 = t677.including(t678);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t679 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t680 = StdLibAdapterImpl.INSTANCE.impl(t677).iterator();
			while (t680.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t680.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t682 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t681 = (OclBoolean)t682.includes(self);
				t679 = t681;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t679).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t679);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv parameter_size: 0<=parameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'parameter'
			OclSequence t685 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			// Call operation 'size'
			OclInteger t684 = (OclInteger)t685.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t683 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t684);

			//--- Print result ---
			log.reportMessage(": "+t683);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv parameter_bidirectional: parameter->forAll(x | x.behavioralFeature=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'parameter'
			OclSequence t686 = StdLibAdapterImpl.INSTANCE.Sequence(self.getParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t687 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t688 = StdLibAdapterImpl.INSTANCE.impl(t686).iterator();
			while (t688.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t688.next();
				//--- Compute body ---
				// Call property 'behavioralFeature'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature t690 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.BehavioralFeature)x.getBehavioralFeature();
				// Call operation 'equalTo'
				OclBoolean t689 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t690, self));
				t687 = t689;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t687).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t687);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv method_size: 0<=method->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'method'
			OclBag t693 = StdLibAdapterImpl.INSTANCE.Bag(self.getMethod());
			// Call operation 'size'
			OclInteger t692 = (OclInteger)t693.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t691 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t692);

			//--- Print result ---
			log.reportMessage(": "+t691);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv method_bidirectional: method->forAll(x | x.specification=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'method'
			OclBag t694 = StdLibAdapterImpl.INSTANCE.Bag(self.getMethod());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method x = null;
			//--- Init flag ---
			OclBoolean t695 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t696 = StdLibAdapterImpl.INSTANCE.impl(t694).iterator();
			while (t696.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Method)t696.next();
				//--- Compute body ---
				// Call property 'specification'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation t698 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)x.getSpecification();
				// Call operation 'equalTo'
				OclBoolean t697 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t698, self));
				t695 = t697;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t695).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t695);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv callAction_size: 0<=callAction->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'callAction'
			OclBag t701 = StdLibAdapterImpl.INSTANCE.Bag(self.getCallAction());
			// Call operation 'size'
			OclInteger t700 = (OclInteger)t701.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t699 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t700);

			//--- Print result ---
			log.reportMessage(": "+t699);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Operation inv callAction_bidirectional: callAction->forAll(x | x.operation=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'callAction'
			OclBag t702 = StdLibAdapterImpl.INSTANCE.Bag(self.getCallAction());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction x = null;
			//--- Init flag ---
			OclBoolean t703 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t704 = StdLibAdapterImpl.INSTANCE.impl(t702).iterator();
			while (t704.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction)t704.next();
				//--- Compute body ---
				// Call property 'operation'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation t706 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)x.getOperation();
				// Call operation 'equalTo'
				OclBoolean t705 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t706, self));
				t703 = t705;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t703).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t703);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t709 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t708 = (OclInteger)t709.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t707 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t708);

			//--- Print result ---
			log.reportMessage(": "+t707);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t710 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t711 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t712 = StdLibAdapterImpl.INSTANCE.impl(t710).iterator();
			while (t712.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t712.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t714 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t713 = (OclBoolean)t714.includes(self);
				t711 = t713;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t711).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t711);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t717 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t716 = (OclInteger)t717.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t715 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t716);

			//--- Print result ---
			log.reportMessage(": "+t715);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t718 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t719 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t720 = StdLibAdapterImpl.INSTANCE.impl(t718).iterator();
			while (t720.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t720.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t722 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t721 = (OclBoolean)t722.includes(self);
				t719 = t721;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t719).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t719);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t725 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t724 = (OclInteger)t725.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t723 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t724);

			//--- Print result ---
			log.reportMessage(": "+t723);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t726 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t727 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t728 = StdLibAdapterImpl.INSTANCE.impl(t726).iterator();
			while (t728.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t728.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t730 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t729 = (OclBoolean)t730.includes(self);
				t727 = t729;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t727).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t727);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t733 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t732 = (OclInteger)t733.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t731 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t732);

			//--- Print result ---
			log.reportMessage(": "+t731);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t737 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t738 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t739 = StdLibAdapterImpl.INSTANCE.impl(t737).iterator();
			while (t739.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t739.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t741 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t740 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t741, self));
				t738 = t740;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t738).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t738);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t744 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t743 = (OclInteger)t744.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t742 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t743);

			//--- Print result ---
			log.reportMessage(": "+t742);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t745 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t746 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t747 = StdLibAdapterImpl.INSTANCE.impl(t745).iterator();
			while (t747.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t747.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t749 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t748 = (OclBoolean)t749.includes(self);
				t746 = t748;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t746).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t746);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t752 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t751 = (OclInteger)t752.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t750 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t751);

			//--- Print result ---
			log.reportMessage(": "+t750);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t753 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t754 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t755 = StdLibAdapterImpl.INSTANCE.impl(t753).iterator();
			while (t755.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t755.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t757 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t756 = (OclBoolean)t757.includes(self);
				t754 = t756;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t754).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t754);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t760 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t759 = (OclInteger)t760.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t758 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t759);

			//--- Print result ---
			log.reportMessage(": "+t758);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t761 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t762 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t763 = StdLibAdapterImpl.INSTANCE.impl(t761).iterator();
			while (t763.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t763.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t765 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t764 = (OclBoolean)t765.includes(self);
				t762 = t764;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t762).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t762);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t769 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t770 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t771 = StdLibAdapterImpl.INSTANCE.impl(t769).iterator();
			while (t771.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t771.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t773 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t772 = (OclBoolean)t773.includes(self);
				t770 = t772;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t770).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t770);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t776 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t775 = (OclInteger)t776.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t774 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t775);

			//--- Print result ---
			log.reportMessage(": "+t774);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t777 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t778 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t779 = StdLibAdapterImpl.INSTANCE.impl(t777).iterator();
			while (t779.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t779.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t781 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t780 = (OclBoolean)t781.includes(self);
				t778 = t780;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t778).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t778);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t784 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t783 = (OclInteger)t784.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t782 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t783);

			//--- Print result ---
			log.reportMessage(": "+t782);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t785 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t786 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t787 = StdLibAdapterImpl.INSTANCE.impl(t785).iterator();
			while (t787.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t787.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t789 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t788 = (OclBoolean)t789.includes(self);
				t786 = t788;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t786).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t786);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t792 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t791 = (OclInteger)t792.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t790 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t791);

			//--- Print result ---
			log.reportMessage(": "+t790);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t793 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t794 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t795 = StdLibAdapterImpl.INSTANCE.impl(t793).iterator();
			while (t795.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t795.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t797 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t796 = (OclBoolean)t797.includes(self);
				t794 = t796;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t794).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t794);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t800 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t799 = (OclInteger)t800.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t798 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t799);

			//--- Print result ---
			log.reportMessage(": "+t798);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t801 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t802 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t803 = StdLibAdapterImpl.INSTANCE.impl(t801).iterator();
			while (t803.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t803.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t805 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t804 = (OclBoolean)t805.includes(self);
				t802 = t804;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t802).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t802);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t808 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t807 = (OclInteger)t808.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t806 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t807);

			//--- Print result ---
			log.reportMessage(": "+t806);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv owner_bidirectional: Set{owner}->forAll(x | x.feature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t809 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'owner'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t810 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getOwner();
			t809 = t809.including(t810);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t811 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t812 = StdLibAdapterImpl.INSTANCE.impl(t809).iterator();
			while (t812.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t812.next();
				//--- Compute body ---
				// Call property 'feature'
				OclSequence t814 = StdLibAdapterImpl.INSTANCE.Sequence(x.getFeature());
				// Call operation 'includes'
				OclBoolean t813 = (OclBoolean)t814.includes(self);
				t811 = t813;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t811).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t811);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv type_bidirectional: Set{type}->forAll(x | x.typedFeature->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t815 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'type'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t816 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getType();
			t815 = t815.including(t816);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier x = null;
			//--- Init flag ---
			OclBoolean t817 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t818 = StdLibAdapterImpl.INSTANCE.impl(t815).iterator();
			while (t818.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t818.next();
				//--- Compute body ---
				// Call property 'typedFeature'
				OclBag t820 = StdLibAdapterImpl.INSTANCE.Bag(x.getTypedFeature());
				// Call operation 'includes'
				OclBoolean t819 = (OclBoolean)t820.includes(self);
				t817 = t819;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t817).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t817);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Attribute inv associationEnd_bidirectional: associationEnd.qualifier = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'associationEnd'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd t823 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd)self.getAssociationEnd();
			// Call property 'qualifier'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute t822 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute)t823.getQualifier();
			// Call operation 'equalTo'
			OclBoolean t821 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t822, self));

			//--- Print result ---
			log.reportMessage(": "+t821);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Relationship self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t826 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t825 = (OclInteger)t826.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t824 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t825);

			//--- Print result ---
			log.reportMessage(": "+t824);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t827 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t828 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t829 = StdLibAdapterImpl.INSTANCE.impl(t827).iterator();
			while (t829.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t829.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t831 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t830 = (OclBoolean)t831.includes(self);
				t828 = t830;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t828).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t828);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t834 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t833 = (OclInteger)t834.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t832 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t833);

			//--- Print result ---
			log.reportMessage(": "+t832);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t835 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t836 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t837 = StdLibAdapterImpl.INSTANCE.impl(t835).iterator();
			while (t837.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t837.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t839 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t838 = (OclBoolean)t839.includes(self);
				t836 = t838;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t836).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t836);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t842 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t841 = (OclInteger)t842.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t840 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t841);

			//--- Print result ---
			log.reportMessage(": "+t840);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t843 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t844 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t845 = StdLibAdapterImpl.INSTANCE.impl(t843).iterator();
			while (t845.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t845.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t847 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t846 = (OclBoolean)t847.includes(self);
				t844 = t846;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t844).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t844);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t850 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t849 = (OclInteger)t850.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t848 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t849);

			//--- Print result ---
			log.reportMessage(": "+t848);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t854 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t855 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t856 = StdLibAdapterImpl.INSTANCE.impl(t854).iterator();
			while (t856.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t856.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t858 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t857 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t858, self));
				t855 = t857;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t855).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t855);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t861 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t860 = (OclInteger)t861.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t859 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t860);

			//--- Print result ---
			log.reportMessage(": "+t859);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t862 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t863 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t864 = StdLibAdapterImpl.INSTANCE.impl(t862).iterator();
			while (t864.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t864.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t866 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t865 = (OclBoolean)t866.includes(self);
				t863 = t865;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t863).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t863);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t869 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t868 = (OclInteger)t869.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t867 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t868);

			//--- Print result ---
			log.reportMessage(": "+t867);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t870 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t871 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t872 = StdLibAdapterImpl.INSTANCE.impl(t870).iterator();
			while (t872.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t872.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t874 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t873 = (OclBoolean)t874.includes(self);
				t871 = t873;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t871).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t871);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t877 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t876 = (OclInteger)t877.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t875 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t876);

			//--- Print result ---
			log.reportMessage(": "+t875);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t878 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t879 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t880 = StdLibAdapterImpl.INSTANCE.impl(t878).iterator();
			while (t880.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t880.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t882 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t881 = (OclBoolean)t882.includes(self);
				t879 = t881;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t879).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t879);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t886 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t887 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t888 = StdLibAdapterImpl.INSTANCE.impl(t886).iterator();
			while (t888.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t888.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t890 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t889 = (OclBoolean)t890.includes(self);
				t887 = t889;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t887).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t887);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t893 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t892 = (OclInteger)t893.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t891 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t892);

			//--- Print result ---
			log.reportMessage(": "+t891);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t894 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t895 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t896 = StdLibAdapterImpl.INSTANCE.impl(t894).iterator();
			while (t896.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t896.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t898 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t897 = (OclBoolean)t898.includes(self);
				t895 = t897;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t895).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t895);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t901 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t900 = (OclInteger)t901.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t899 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t900);

			//--- Print result ---
			log.reportMessage(": "+t899);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t902 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t903 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t904 = StdLibAdapterImpl.INSTANCE.impl(t902).iterator();
			while (t904.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t904.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t906 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t905 = (OclBoolean)t906.includes(self);
				t903 = t905;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t903).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t903);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t909 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t908 = (OclInteger)t909.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t907 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t908);

			//--- Print result ---
			log.reportMessage(": "+t907);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t910 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t911 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t912 = StdLibAdapterImpl.INSTANCE.impl(t910).iterator();
			while (t912.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t912.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t914 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t913 = (OclBoolean)t914.includes(self);
				t911 = t913;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t911).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t911);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t917 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t916 = (OclInteger)t917.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t915 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t916);

			//--- Print result ---
			log.reportMessage(": "+t915);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t918 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t919 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t920 = StdLibAdapterImpl.INSTANCE.impl(t918).iterator();
			while (t920.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t920.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t922 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t921 = (OclBoolean)t922.includes(self);
				t919 = t921;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t919).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t919);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Relationship inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t925 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t924 = (OclInteger)t925.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t923 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t924);

			//--- Print result ---
			log.reportMessage(": "+t923);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t928 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t927 = (OclInteger)t928.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t926 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t927);

			//--- Print result ---
			log.reportMessage(": "+t926);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t929 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t930 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t931 = StdLibAdapterImpl.INSTANCE.impl(t929).iterator();
			while (t931.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t931.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t933 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t932 = (OclBoolean)t933.includes(self);
				t930 = t932;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t930).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t930);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t936 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t935 = (OclInteger)t936.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t934 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t935);

			//--- Print result ---
			log.reportMessage(": "+t934);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t937 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t938 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t939 = StdLibAdapterImpl.INSTANCE.impl(t937).iterator();
			while (t939.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t939.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t941 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t940 = (OclBoolean)t941.includes(self);
				t938 = t940;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t938).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t938);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t944 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t943 = (OclInteger)t944.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t942 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t943);

			//--- Print result ---
			log.reportMessage(": "+t942);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t945 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t946 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t947 = StdLibAdapterImpl.INSTANCE.impl(t945).iterator();
			while (t947.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t947.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t949 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t948 = (OclBoolean)t949.includes(self);
				t946 = t948;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t946).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t946);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t952 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t951 = (OclInteger)t952.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t950 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t951);

			//--- Print result ---
			log.reportMessage(": "+t950);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t956 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t957 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t958 = StdLibAdapterImpl.INSTANCE.impl(t956).iterator();
			while (t958.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t958.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t960 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t959 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t960, self));
				t957 = t959;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t957).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t957);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t963 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t962 = (OclInteger)t963.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t961 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t962);

			//--- Print result ---
			log.reportMessage(": "+t961);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t964 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t965 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t966 = StdLibAdapterImpl.INSTANCE.impl(t964).iterator();
			while (t966.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t966.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t968 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t967 = (OclBoolean)t968.includes(self);
				t965 = t967;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t965).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t965);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t971 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t970 = (OclInteger)t971.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t969 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t970);

			//--- Print result ---
			log.reportMessage(": "+t969);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t972 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t973 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t974 = StdLibAdapterImpl.INSTANCE.impl(t972).iterator();
			while (t974.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t974.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t976 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t975 = (OclBoolean)t976.includes(self);
				t973 = t975;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t973).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t973);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t979 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t978 = (OclInteger)t979.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t977 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t978);

			//--- Print result ---
			log.reportMessage(": "+t977);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t980 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t981 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t982 = StdLibAdapterImpl.INSTANCE.impl(t980).iterator();
			while (t982.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t982.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t984 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t983 = (OclBoolean)t984.includes(self);
				t981 = t983;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t981).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t981);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t988 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t989 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t990 = StdLibAdapterImpl.INSTANCE.impl(t988).iterator();
			while (t990.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t990.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t992 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t991 = (OclBoolean)t992.includes(self);
				t989 = t991;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t989).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t989);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t995 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t994 = (OclInteger)t995.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t993 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t994);

			//--- Print result ---
			log.reportMessage(": "+t993);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t996 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t997 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t998 = StdLibAdapterImpl.INSTANCE.impl(t996).iterator();
			while (t998.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t998.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1000 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t999 = (OclBoolean)t1000.includes(self);
				t997 = t999;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t997).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t997);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1003 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1002 = (OclInteger)t1003.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1001 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1002);

			//--- Print result ---
			log.reportMessage(": "+t1001);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1004 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1005 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1006 = StdLibAdapterImpl.INSTANCE.impl(t1004).iterator();
			while (t1006.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1006.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1008 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1007 = (OclBoolean)t1008.includes(self);
				t1005 = t1007;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1005).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1005);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1011 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1010 = (OclInteger)t1011.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1009 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1010);

			//--- Print result ---
			log.reportMessage(": "+t1009);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1012 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1013 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1014 = StdLibAdapterImpl.INSTANCE.impl(t1012).iterator();
			while (t1014.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1014.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1016 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1015 = (OclBoolean)t1016.includes(self);
				t1013 = t1015;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1013).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1013);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1019 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1018 = (OclInteger)t1019.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1017 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1018);

			//--- Print result ---
			log.reportMessage(": "+t1017);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1020 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1021 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1022 = StdLibAdapterImpl.INSTANCE.impl(t1020).iterator();
			while (t1022.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1022.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1024 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1023 = (OclBoolean)t1024.includes(self);
				t1021 = t1023;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1021).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1021);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1027 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1026 = (OclInteger)t1027.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1025 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1026);

			//--- Print result ---
			log.reportMessage(": "+t1025);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv association_bidirectional: Set{association}->forAll(x | x.connection->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t1028 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'association'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association t1029 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association)self.getAssociation();
			t1028 = t1028.including(t1029);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association x = null;
			//--- Init flag ---
			OclBoolean t1030 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1031 = StdLibAdapterImpl.INSTANCE.impl(t1028).iterator();
			while (t1031.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association)t1031.next();
				//--- Compute body ---
				// Call property 'connection'
				OclSequence t1033 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConnection());
				// Call operation 'includes'
				OclBoolean t1032 = (OclBoolean)t1033.includes(self);
				t1030 = t1032;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1030).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1030);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationEnd inv qualifier_bidirectional: qualifier.associationEnd=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'qualifier'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute t1036 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Attribute)self.getQualifier();
			// Call property 'associationEnd'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd t1035 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd)t1036.getAssociationEnd();
			// Call operation 'equalTo'
			OclBoolean t1034 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1035, self));

			//--- Print result ---
			log.reportMessage(": "+t1034);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1039 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1038 = (OclInteger)t1039.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1037 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1038);

			//--- Print result ---
			log.reportMessage(": "+t1037);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1040 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1041 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1042 = StdLibAdapterImpl.INSTANCE.impl(t1040).iterator();
			while (t1042.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1042.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1044 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1043 = (OclBoolean)t1044.includes(self);
				t1041 = t1043;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1041).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1041);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1047 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1046 = (OclInteger)t1047.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1045 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1046);

			//--- Print result ---
			log.reportMessage(": "+t1045);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1048 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1049 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1050 = StdLibAdapterImpl.INSTANCE.impl(t1048).iterator();
			while (t1050.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1050.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1052 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1051 = (OclBoolean)t1052.includes(self);
				t1049 = t1051;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1049).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1049);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1055 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1054 = (OclInteger)t1055.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1053 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1054);

			//--- Print result ---
			log.reportMessage(": "+t1053);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1056 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1057 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1058 = StdLibAdapterImpl.INSTANCE.impl(t1056).iterator();
			while (t1058.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1058.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1060 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1059 = (OclBoolean)t1060.includes(self);
				t1057 = t1059;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1057).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1057);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1063 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1062 = (OclInteger)t1063.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1061 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1062);

			//--- Print result ---
			log.reportMessage(": "+t1061);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1067 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1068 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1069 = StdLibAdapterImpl.INSTANCE.impl(t1067).iterator();
			while (t1069.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1069.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1071 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1070 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1071, self));
				t1068 = t1070;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1068).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1068);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1074 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1073 = (OclInteger)t1074.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1072 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1073);

			//--- Print result ---
			log.reportMessage(": "+t1072);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1075 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1076 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1077 = StdLibAdapterImpl.INSTANCE.impl(t1075).iterator();
			while (t1077.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1077.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1079 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1078 = (OclBoolean)t1079.includes(self);
				t1076 = t1078;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1076).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1076);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1082 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1081 = (OclInteger)t1082.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1080 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1081);

			//--- Print result ---
			log.reportMessage(": "+t1080);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1083 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1084 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1085 = StdLibAdapterImpl.INSTANCE.impl(t1083).iterator();
			while (t1085.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1085.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1087 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1086 = (OclBoolean)t1087.includes(self);
				t1084 = t1086;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1084).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1084);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1090 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1089 = (OclInteger)t1090.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1088 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1089);

			//--- Print result ---
			log.reportMessage(": "+t1088);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1091 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1092 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1093 = StdLibAdapterImpl.INSTANCE.impl(t1091).iterator();
			while (t1093.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1093.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1095 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1094 = (OclBoolean)t1095.includes(self);
				t1092 = t1094;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1092).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1092);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1099 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1100 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1101 = StdLibAdapterImpl.INSTANCE.impl(t1099).iterator();
			while (t1101.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1101.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1103 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1102 = (OclBoolean)t1103.includes(self);
				t1100 = t1102;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1100).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1100);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1106 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1105 = (OclInteger)t1106.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1104 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1105);

			//--- Print result ---
			log.reportMessage(": "+t1104);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1107 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1108 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1109 = StdLibAdapterImpl.INSTANCE.impl(t1107).iterator();
			while (t1109.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1109.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1111 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1110 = (OclBoolean)t1111.includes(self);
				t1108 = t1110;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1108).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1108);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1114 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1113 = (OclInteger)t1114.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1112 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1113);

			//--- Print result ---
			log.reportMessage(": "+t1112);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1115 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1116 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1117 = StdLibAdapterImpl.INSTANCE.impl(t1115).iterator();
			while (t1117.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1117.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1119 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1118 = (OclBoolean)t1119.includes(self);
				t1116 = t1118;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1116).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1116);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1122 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1121 = (OclInteger)t1122.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1120 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1121);

			//--- Print result ---
			log.reportMessage(": "+t1120);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1123 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1124 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1125 = StdLibAdapterImpl.INSTANCE.impl(t1123).iterator();
			while (t1125.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1125.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1127 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1126 = (OclBoolean)t1127.includes(self);
				t1124 = t1126;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1124).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1124);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1130 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1129 = (OclInteger)t1130.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1128 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1129);

			//--- Print result ---
			log.reportMessage(": "+t1128);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1131 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1132 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1133 = StdLibAdapterImpl.INSTANCE.impl(t1131).iterator();
			while (t1133.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1133.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1135 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1134 = (OclBoolean)t1135.includes(self);
				t1132 = t1134;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1132).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1132);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1138 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1137 = (OclInteger)t1138.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1136 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1137);

			//--- Print result ---
			log.reportMessage(": "+t1136);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'generalization'
			OclBag t1141 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			// Call operation 'size'
			OclInteger t1140 = (OclInteger)t1141.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1139 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1140);

			//--- Print result ---
			log.reportMessage(": "+t1139);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t1142 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1143 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1144 = StdLibAdapterImpl.INSTANCE.impl(t1142).iterator();
			while (t1144.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1144.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1146 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t1145 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1146, self));
				t1143 = t1145;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1143).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1143);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t1149 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t1148 = (OclInteger)t1149.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1147 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1148);

			//--- Print result ---
			log.reportMessage(": "+t1147);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t1150 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1151 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1152 = StdLibAdapterImpl.INSTANCE.impl(t1150).iterator();
			while (t1152.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1152.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1154 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t1153 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1154, self));
				t1151 = t1153;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1151).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1151);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1157 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1156 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t1157.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t1155 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1156, self));

			//--- Print result ---
			log.reportMessage(": "+t1155);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv connection_size: 2<=connection->size() and connection->size()<=2";
		log.printMessage("  "+invariant);

		try {
			OclBoolean t1159;
			try {
				// Call property 'connection'
				OclSequence t1162 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
				// Call operation 'size'
				OclInteger t1161 = (OclInteger)t1162.size();
				// Call operation 'lessThanOrEqualTo'
				OclBoolean t1160 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(2).lessThanOrEqualTo(t1161);
				t1159 = t1160;
			} catch (Exception e) {
				t1159 = StdLibAdapterImpl.INSTANCE.Undefined();
			}
			OclBoolean t1163;
			try {
				// Call property 'connection'
				OclSequence t1166 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
				// Call operation 'size'
				OclInteger t1165 = (OclInteger)t1166.size();
				// Call operation 'lessThanOrEqualTo'
				OclBoolean t1164 = (OclBoolean)t1165.lessThanOrEqualTo(StdLibAdapterImpl.INSTANCE.Integer(2));
				t1163 = t1164;
			} catch (Exception e) {
				t1163 = StdLibAdapterImpl.INSTANCE.Undefined();
			}
			// Call operation 'and'
			OclBoolean t1158 = t1159.and(t1163);

			//--- Print result ---
			log.reportMessage(": "+t1158);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Association inv connection_bidirectional: connection->forAll(x | x.association=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'connection'
			OclSequence t1167 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd x = null;
			//--- Init flag ---
			OclBoolean t1168 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1169 = StdLibAdapterImpl.INSTANCE.impl(t1167).iterator();
			while (t1169.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd)t1169.next();
				//--- Compute body ---
				// Call property 'association'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association t1171 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association)x.getAssociation();
				// Call operation 'equalTo'
				OclBoolean t1170 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1171, self));
				t1168 = t1170;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1168).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1168);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1174 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1173 = (OclInteger)t1174.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1172 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1173);

			//--- Print result ---
			log.reportMessage(": "+t1172);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1175 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1176 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1177 = StdLibAdapterImpl.INSTANCE.impl(t1175).iterator();
			while (t1177.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1177.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1179 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1178 = (OclBoolean)t1179.includes(self);
				t1176 = t1178;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1176).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1176);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1182 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1181 = (OclInteger)t1182.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1180 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1181);

			//--- Print result ---
			log.reportMessage(": "+t1180);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1183 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1184 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1185 = StdLibAdapterImpl.INSTANCE.impl(t1183).iterator();
			while (t1185.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1185.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1187 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1186 = (OclBoolean)t1187.includes(self);
				t1184 = t1186;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1184).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1184);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1190 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1189 = (OclInteger)t1190.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1188 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1189);

			//--- Print result ---
			log.reportMessage(": "+t1188);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1191 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1192 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1193 = StdLibAdapterImpl.INSTANCE.impl(t1191).iterator();
			while (t1193.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1193.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1195 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1194 = (OclBoolean)t1195.includes(self);
				t1192 = t1194;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1192).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1192);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1198 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1197 = (OclInteger)t1198.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1196 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1197);

			//--- Print result ---
			log.reportMessage(": "+t1196);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1202 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1203 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1204 = StdLibAdapterImpl.INSTANCE.impl(t1202).iterator();
			while (t1204.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1204.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1206 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1205 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1206, self));
				t1203 = t1205;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1203).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1203);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1209 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1208 = (OclInteger)t1209.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1207 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1208);

			//--- Print result ---
			log.reportMessage(": "+t1207);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1210 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1211 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1212 = StdLibAdapterImpl.INSTANCE.impl(t1210).iterator();
			while (t1212.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1212.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1214 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1213 = (OclBoolean)t1214.includes(self);
				t1211 = t1213;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1211).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1211);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1217 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1216 = (OclInteger)t1217.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1215 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1216);

			//--- Print result ---
			log.reportMessage(": "+t1215);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1218 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1219 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1220 = StdLibAdapterImpl.INSTANCE.impl(t1218).iterator();
			while (t1220.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1220.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1222 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1221 = (OclBoolean)t1222.includes(self);
				t1219 = t1221;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1219).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1219);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1225 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1224 = (OclInteger)t1225.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1223 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1224);

			//--- Print result ---
			log.reportMessage(": "+t1223);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1226 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1227 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1228 = StdLibAdapterImpl.INSTANCE.impl(t1226).iterator();
			while (t1228.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1228.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1230 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1229 = (OclBoolean)t1230.includes(self);
				t1227 = t1229;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1227).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1227);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1234 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1235 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1236 = StdLibAdapterImpl.INSTANCE.impl(t1234).iterator();
			while (t1236.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1236.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1238 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1237 = (OclBoolean)t1238.includes(self);
				t1235 = t1237;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1235).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1235);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1241 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1240 = (OclInteger)t1241.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1239 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1240);

			//--- Print result ---
			log.reportMessage(": "+t1239);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1242 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1243 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1244 = StdLibAdapterImpl.INSTANCE.impl(t1242).iterator();
			while (t1244.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1244.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1246 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1245 = (OclBoolean)t1246.includes(self);
				t1243 = t1245;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1243).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1243);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1249 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1248 = (OclInteger)t1249.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1247 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1248);

			//--- Print result ---
			log.reportMessage(": "+t1247);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1250 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1251 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1252 = StdLibAdapterImpl.INSTANCE.impl(t1250).iterator();
			while (t1252.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1252.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1254 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1253 = (OclBoolean)t1254.includes(self);
				t1251 = t1253;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1251).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1251);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1257 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1256 = (OclInteger)t1257.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1255 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1256);

			//--- Print result ---
			log.reportMessage(": "+t1255);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1258 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1259 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1260 = StdLibAdapterImpl.INSTANCE.impl(t1258).iterator();
			while (t1260.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1260.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1262 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1261 = (OclBoolean)t1262.includes(self);
				t1259 = t1261;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1259).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1259);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1265 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1264 = (OclInteger)t1265.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1263 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1264);

			//--- Print result ---
			log.reportMessage(": "+t1263);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1266 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1267 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1268 = StdLibAdapterImpl.INSTANCE.impl(t1266).iterator();
			while (t1268.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1268.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1270 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1269 = (OclBoolean)t1270.includes(self);
				t1267 = t1269;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1267).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1267);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1273 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1272 = (OclInteger)t1273.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1271 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1272);

			//--- Print result ---
			log.reportMessage(": "+t1271);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv target_size: 0<=target->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'target'
			OclBag t1276 = StdLibAdapterImpl.INSTANCE.Bag(self.getTarget());
			// Call operation 'size'
			OclInteger t1275 = (OclInteger)t1276.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1274 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1275);

			//--- Print result ---
			log.reportMessage(": "+t1274);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv target_bidirectional: target->forAll(x | x.targetFlow->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'target'
			OclBag t1277 = StdLibAdapterImpl.INSTANCE.Bag(self.getTarget());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1278 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1279 = StdLibAdapterImpl.INSTANCE.impl(t1277).iterator();
			while (t1279.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1279.next();
				//--- Compute body ---
				// Call property 'targetFlow'
				OclBag t1281 = StdLibAdapterImpl.INSTANCE.Bag(x.getTargetFlow());
				// Call operation 'includes'
				OclBoolean t1280 = (OclBoolean)t1281.includes(self);
				t1278 = t1280;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1278).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1278);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv source_size: 0<=source->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'source'
			OclBag t1284 = StdLibAdapterImpl.INSTANCE.Bag(self.getSource());
			// Call operation 'size'
			OclInteger t1283 = (OclInteger)t1284.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1282 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1283);

			//--- Print result ---
			log.reportMessage(": "+t1282);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Flow inv source_bidirectional: source->forAll(x | x.sourceFlow->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'source'
			OclBag t1285 = StdLibAdapterImpl.INSTANCE.Bag(self.getSource());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1286 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1287 = StdLibAdapterImpl.INSTANCE.impl(t1285).iterator();
			while (t1287.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1287.next();
				//--- Compute body ---
				// Call property 'sourceFlow'
				OclBag t1289 = StdLibAdapterImpl.INSTANCE.Bag(x.getSourceFlow());
				// Call operation 'includes'
				OclBoolean t1288 = (OclBoolean)t1289.includes(self);
				t1286 = t1288;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1286).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1286);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1292 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1291 = (OclInteger)t1292.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1290 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1291);

			//--- Print result ---
			log.reportMessage(": "+t1290);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1293 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1294 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1295 = StdLibAdapterImpl.INSTANCE.impl(t1293).iterator();
			while (t1295.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1295.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1297 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1296 = (OclBoolean)t1297.includes(self);
				t1294 = t1296;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1294).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1294);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1300 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1299 = (OclInteger)t1300.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1298 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1299);

			//--- Print result ---
			log.reportMessage(": "+t1298);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1301 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1302 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1303 = StdLibAdapterImpl.INSTANCE.impl(t1301).iterator();
			while (t1303.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1303.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1305 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1304 = (OclBoolean)t1305.includes(self);
				t1302 = t1304;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1302).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1302);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1308 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1307 = (OclInteger)t1308.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1306 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1307);

			//--- Print result ---
			log.reportMessage(": "+t1306);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1309 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1310 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1311 = StdLibAdapterImpl.INSTANCE.impl(t1309).iterator();
			while (t1311.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1311.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1313 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1312 = (OclBoolean)t1313.includes(self);
				t1310 = t1312;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1310).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1310);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1316 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1315 = (OclInteger)t1316.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1314 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1315);

			//--- Print result ---
			log.reportMessage(": "+t1314);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1320 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1321 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1322 = StdLibAdapterImpl.INSTANCE.impl(t1320).iterator();
			while (t1322.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1322.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1324 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1323 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1324, self));
				t1321 = t1323;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1321).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1321);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1327 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1326 = (OclInteger)t1327.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1325 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1326);

			//--- Print result ---
			log.reportMessage(": "+t1325);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1328 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1329 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1330 = StdLibAdapterImpl.INSTANCE.impl(t1328).iterator();
			while (t1330.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1330.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1332 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1331 = (OclBoolean)t1332.includes(self);
				t1329 = t1331;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1329).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1329);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1335 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1334 = (OclInteger)t1335.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1333 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1334);

			//--- Print result ---
			log.reportMessage(": "+t1333);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1336 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1337 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1338 = StdLibAdapterImpl.INSTANCE.impl(t1336).iterator();
			while (t1338.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1338.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1340 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1339 = (OclBoolean)t1340.includes(self);
				t1337 = t1339;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1337).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1337);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1343 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1342 = (OclInteger)t1343.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1341 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1342);

			//--- Print result ---
			log.reportMessage(": "+t1341);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1344 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1345 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1346 = StdLibAdapterImpl.INSTANCE.impl(t1344).iterator();
			while (t1346.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1346.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1348 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1347 = (OclBoolean)t1348.includes(self);
				t1345 = t1347;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1345).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1345);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1352 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1353 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1354 = StdLibAdapterImpl.INSTANCE.impl(t1352).iterator();
			while (t1354.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1354.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1356 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1355 = (OclBoolean)t1356.includes(self);
				t1353 = t1355;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1353).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1353);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1359 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1358 = (OclInteger)t1359.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1357 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1358);

			//--- Print result ---
			log.reportMessage(": "+t1357);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1360 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1361 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1362 = StdLibAdapterImpl.INSTANCE.impl(t1360).iterator();
			while (t1362.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1362.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1364 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1363 = (OclBoolean)t1364.includes(self);
				t1361 = t1363;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1361).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1361);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1367 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1366 = (OclInteger)t1367.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1365 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1366);

			//--- Print result ---
			log.reportMessage(": "+t1365);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1368 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1369 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1370 = StdLibAdapterImpl.INSTANCE.impl(t1368).iterator();
			while (t1370.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1370.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1372 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1371 = (OclBoolean)t1372.includes(self);
				t1369 = t1371;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1369).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1369);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1375 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1374 = (OclInteger)t1375.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1373 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1374);

			//--- Print result ---
			log.reportMessage(": "+t1373);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1376 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1377 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1378 = StdLibAdapterImpl.INSTANCE.impl(t1376).iterator();
			while (t1378.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1378.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1380 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1379 = (OclBoolean)t1380.includes(self);
				t1377 = t1379;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1377).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1377);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1383 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1382 = (OclInteger)t1383.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1381 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1382);

			//--- Print result ---
			log.reportMessage(": "+t1381);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1384 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1385 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1386 = StdLibAdapterImpl.INSTANCE.impl(t1384).iterator();
			while (t1386.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1386.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1388 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1387 = (OclBoolean)t1388.includes(self);
				t1385 = t1387;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1385).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1385);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1391 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1390 = (OclInteger)t1391.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1389 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1390);

			//--- Print result ---
			log.reportMessage(": "+t1389);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv child_bidirectional: Set{child}->forAll(x | x.generalization->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t1392 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'child'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1393 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getChild();
			t1392 = t1392.including(t1393);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement x = null;
			//--- Init flag ---
			OclBoolean t1394 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1395 = StdLibAdapterImpl.INSTANCE.impl(t1392).iterator();
			while (t1395.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t1395.next();
				//--- Compute body ---
				// Call property 'generalization'
				OclBag t1397 = StdLibAdapterImpl.INSTANCE.Bag(x.getGeneralization());
				// Call operation 'includes'
				OclBoolean t1396 = (OclBoolean)t1397.includes(self);
				t1394 = t1396;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1394).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1394);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Generalization inv parent_bidirectional: Set{parent}->forAll(x | x.specialization->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t1398 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'parent'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1399 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getParent();
			t1398 = t1398.including(t1399);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement x = null;
			//--- Init flag ---
			OclBoolean t1400 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1401 = StdLibAdapterImpl.INSTANCE.impl(t1398).iterator();
			while (t1401.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t1401.next();
				//--- Compute body ---
				// Call property 'specialization'
				OclBag t1403 = StdLibAdapterImpl.INSTANCE.Bag(x.getSpecialization());
				// Call operation 'includes'
				OclBoolean t1402 = (OclBoolean)t1403.includes(self);
				t1400 = t1402;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1400).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1400);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1406 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1405 = (OclInteger)t1406.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1404 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1405);

			//--- Print result ---
			log.reportMessage(": "+t1404);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1407 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1408 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1409 = StdLibAdapterImpl.INSTANCE.impl(t1407).iterator();
			while (t1409.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1409.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1411 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1410 = (OclBoolean)t1411.includes(self);
				t1408 = t1410;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1408).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1408);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1414 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1413 = (OclInteger)t1414.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1412 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1413);

			//--- Print result ---
			log.reportMessage(": "+t1412);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1415 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1416 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1417 = StdLibAdapterImpl.INSTANCE.impl(t1415).iterator();
			while (t1417.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1417.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1419 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1418 = (OclBoolean)t1419.includes(self);
				t1416 = t1418;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1416).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1416);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1422 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1421 = (OclInteger)t1422.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1420 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1421);

			//--- Print result ---
			log.reportMessage(": "+t1420);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1423 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1424 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1425 = StdLibAdapterImpl.INSTANCE.impl(t1423).iterator();
			while (t1425.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1425.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1427 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1426 = (OclBoolean)t1427.includes(self);
				t1424 = t1426;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1424).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1424);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1430 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1429 = (OclInteger)t1430.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1428 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1429);

			//--- Print result ---
			log.reportMessage(": "+t1428);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1434 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1435 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1436 = StdLibAdapterImpl.INSTANCE.impl(t1434).iterator();
			while (t1436.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1436.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1438 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1437 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1438, self));
				t1435 = t1437;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1435).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1435);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1441 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1440 = (OclInteger)t1441.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1439 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1440);

			//--- Print result ---
			log.reportMessage(": "+t1439);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1442 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1443 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1444 = StdLibAdapterImpl.INSTANCE.impl(t1442).iterator();
			while (t1444.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1444.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1446 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1445 = (OclBoolean)t1446.includes(self);
				t1443 = t1445;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1443).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1443);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1449 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1448 = (OclInteger)t1449.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1447 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1448);

			//--- Print result ---
			log.reportMessage(": "+t1447);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1450 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1451 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1452 = StdLibAdapterImpl.INSTANCE.impl(t1450).iterator();
			while (t1452.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1452.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1454 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1453 = (OclBoolean)t1454.includes(self);
				t1451 = t1453;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1451).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1451);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1457 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1456 = (OclInteger)t1457.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1455 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1456);

			//--- Print result ---
			log.reportMessage(": "+t1455);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1458 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1459 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1460 = StdLibAdapterImpl.INSTANCE.impl(t1458).iterator();
			while (t1460.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1460.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1462 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1461 = (OclBoolean)t1462.includes(self);
				t1459 = t1461;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1459).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1459);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1466 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1467 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1468 = StdLibAdapterImpl.INSTANCE.impl(t1466).iterator();
			while (t1468.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1468.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1470 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1469 = (OclBoolean)t1470.includes(self);
				t1467 = t1469;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1467).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1467);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1473 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1472 = (OclInteger)t1473.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1471 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1472);

			//--- Print result ---
			log.reportMessage(": "+t1471);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1474 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1475 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1476 = StdLibAdapterImpl.INSTANCE.impl(t1474).iterator();
			while (t1476.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1476.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1478 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1477 = (OclBoolean)t1478.includes(self);
				t1475 = t1477;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1475).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1475);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1481 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1480 = (OclInteger)t1481.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1479 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1480);

			//--- Print result ---
			log.reportMessage(": "+t1479);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1482 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1483 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1484 = StdLibAdapterImpl.INSTANCE.impl(t1482).iterator();
			while (t1484.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1484.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1486 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1485 = (OclBoolean)t1486.includes(self);
				t1483 = t1485;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1483).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1483);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1489 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1488 = (OclInteger)t1489.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1487 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1488);

			//--- Print result ---
			log.reportMessage(": "+t1487);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1490 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1491 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1492 = StdLibAdapterImpl.INSTANCE.impl(t1490).iterator();
			while (t1492.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1492.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1494 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1493 = (OclBoolean)t1494.includes(self);
				t1491 = t1493;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1491).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1491);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1497 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1496 = (OclInteger)t1497.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1495 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1496);

			//--- Print result ---
			log.reportMessage(": "+t1495);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1498 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1499 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1500 = StdLibAdapterImpl.INSTANCE.impl(t1498).iterator();
			while (t1500.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1500.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1502 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1501 = (OclBoolean)t1502.includes(self);
				t1499 = t1501;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1499).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1499);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1505 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1504 = (OclInteger)t1505.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1503 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1504);

			//--- Print result ---
			log.reportMessage(": "+t1503);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t1508 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t1507 = (OclInteger)t1508.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1506 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1507);

			//--- Print result ---
			log.reportMessage(": "+t1506);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t1512 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1513 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1514 = StdLibAdapterImpl.INSTANCE.impl(t1512).iterator();
			while (t1514.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1514.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1516 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t1515 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1516, self));
				t1513 = t1515;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1513).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1513);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t1519 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t1518 = (OclInteger)t1519.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1517 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1518);

			//--- Print result ---
			log.reportMessage(": "+t1517);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t1520 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1521 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1522 = StdLibAdapterImpl.INSTANCE.impl(t1520).iterator();
			while (t1522.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1522.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1524 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t1523 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1524, self));
				t1521 = t1523;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1521).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1521);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1527 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1526 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t1527.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t1525 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1526, self));

			//--- Print result ---
			log.reportMessage(": "+t1525);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t1530 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t1529 = (OclInteger)t1530.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1528 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1529);

			//--- Print result ---
			log.reportMessage(": "+t1528);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t1531 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t1532 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1533 = StdLibAdapterImpl.INSTANCE.impl(t1531).iterator();
			while (t1533.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t1533.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1535 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t1534 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1535, self));
				t1532 = t1534;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1532).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1532);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t1538 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t1537 = (OclInteger)t1538.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1536 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1537);

			//--- Print result ---
			log.reportMessage(": "+t1536);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t1539 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t1540 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1541 = StdLibAdapterImpl.INSTANCE.impl(t1539).iterator();
			while (t1541.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t1541.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1543 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t1542 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1543, self));
				t1540 = t1542;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1540).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1540);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t1546 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t1545 = (OclInteger)t1546.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1544 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1545);

			//--- Print result ---
			log.reportMessage(": "+t1544);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t1547 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t1548 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1549 = StdLibAdapterImpl.INSTANCE.impl(t1547).iterator();
			while (t1549.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t1549.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1551 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t1550 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1551, self));
				t1548 = t1550;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1548).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1548);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Classifier inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1554 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1553 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t1554.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t1552 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1553, self));

			//--- Print result ---
			log.reportMessage(": "+t1552);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Class_ self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Class_ inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationClass self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1558 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1559 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1560 = StdLibAdapterImpl.INSTANCE.impl(t1558).iterator();
			while (t1560.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1560.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1562 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1561 = (OclBoolean)t1562.includes(self);
				t1559 = t1561;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1559).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1559);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1565 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1564 = (OclInteger)t1565.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1563 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1564);

			//--- Print result ---
			log.reportMessage(": "+t1563);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1566 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1567 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1568 = StdLibAdapterImpl.INSTANCE.impl(t1566).iterator();
			while (t1568.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1568.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1570 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1569 = (OclBoolean)t1570.includes(self);
				t1567 = t1569;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1567).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1567);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1573 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1572 = (OclInteger)t1573.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1571 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1572);

			//--- Print result ---
			log.reportMessage(": "+t1571);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1574 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1575 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1576 = StdLibAdapterImpl.INSTANCE.impl(t1574).iterator();
			while (t1576.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1576.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1578 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1577 = (OclBoolean)t1578.includes(self);
				t1575 = t1577;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1575).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1575);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1581 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1580 = (OclInteger)t1581.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1579 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1580);

			//--- Print result ---
			log.reportMessage(": "+t1579);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1585 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1586 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1587 = StdLibAdapterImpl.INSTANCE.impl(t1585).iterator();
			while (t1587.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1587.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1589 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1588 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1589, self));
				t1586 = t1588;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1586).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1586);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1592 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1591 = (OclInteger)t1592.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1590 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1591);

			//--- Print result ---
			log.reportMessage(": "+t1590);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1593 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1594 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1595 = StdLibAdapterImpl.INSTANCE.impl(t1593).iterator();
			while (t1595.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1595.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1597 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1596 = (OclBoolean)t1597.includes(self);
				t1594 = t1596;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1594).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1594);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1600 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1599 = (OclInteger)t1600.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1598 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1599);

			//--- Print result ---
			log.reportMessage(": "+t1598);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1601 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1602 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1603 = StdLibAdapterImpl.INSTANCE.impl(t1601).iterator();
			while (t1603.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1603.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1605 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1604 = (OclBoolean)t1605.includes(self);
				t1602 = t1604;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1602).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1602);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1608 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1607 = (OclInteger)t1608.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1606 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1607);

			//--- Print result ---
			log.reportMessage(": "+t1606);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1609 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1610 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1611 = StdLibAdapterImpl.INSTANCE.impl(t1609).iterator();
			while (t1611.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1611.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1613 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1612 = (OclBoolean)t1613.includes(self);
				t1610 = t1612;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1610).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1610);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1617 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1618 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1619 = StdLibAdapterImpl.INSTANCE.impl(t1617).iterator();
			while (t1619.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1619.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1621 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1620 = (OclBoolean)t1621.includes(self);
				t1618 = t1620;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1618).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1618);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1624 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1623 = (OclInteger)t1624.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1622 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1623);

			//--- Print result ---
			log.reportMessage(": "+t1622);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1625 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1626 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1627 = StdLibAdapterImpl.INSTANCE.impl(t1625).iterator();
			while (t1627.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1627.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1629 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1628 = (OclBoolean)t1629.includes(self);
				t1626 = t1628;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1626).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1626);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1632 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1631 = (OclInteger)t1632.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1630 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1631);

			//--- Print result ---
			log.reportMessage(": "+t1630);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1633 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1634 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1635 = StdLibAdapterImpl.INSTANCE.impl(t1633).iterator();
			while (t1635.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1635.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1637 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1636 = (OclBoolean)t1637.includes(self);
				t1634 = t1636;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1634).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1634);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1640 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1639 = (OclInteger)t1640.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1638 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1639);

			//--- Print result ---
			log.reportMessage(": "+t1638);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1641 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1642 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1643 = StdLibAdapterImpl.INSTANCE.impl(t1641).iterator();
			while (t1643.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1643.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1645 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1644 = (OclBoolean)t1645.includes(self);
				t1642 = t1644;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1642).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1642);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1648 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1647 = (OclInteger)t1648.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1646 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1647);

			//--- Print result ---
			log.reportMessage(": "+t1646);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1649 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1650 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1651 = StdLibAdapterImpl.INSTANCE.impl(t1649).iterator();
			while (t1651.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1651.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1653 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1652 = (OclBoolean)t1653.includes(self);
				t1650 = t1652;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1650).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1650);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1656 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1655 = (OclInteger)t1656.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1654 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1655);

			//--- Print result ---
			log.reportMessage(": "+t1654);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t1659 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t1658 = (OclInteger)t1659.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1657 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1658);

			//--- Print result ---
			log.reportMessage(": "+t1657);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t1663 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1664 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1665 = StdLibAdapterImpl.INSTANCE.impl(t1663).iterator();
			while (t1665.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1665.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1667 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t1666 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1667, self));
				t1664 = t1666;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1664).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1664);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t1670 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t1669 = (OclInteger)t1670.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1668 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1669);

			//--- Print result ---
			log.reportMessage(": "+t1668);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t1671 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t1672 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1673 = StdLibAdapterImpl.INSTANCE.impl(t1671).iterator();
			while (t1673.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t1673.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1675 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t1674 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1675, self));
				t1672 = t1674;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1672).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1672);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1678 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1677 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t1678.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t1676 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1677, self));

			//--- Print result ---
			log.reportMessage(": "+t1676);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t1681 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t1680 = (OclInteger)t1681.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1679 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1680);

			//--- Print result ---
			log.reportMessage(": "+t1679);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t1682 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t1683 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1684 = StdLibAdapterImpl.INSTANCE.impl(t1682).iterator();
			while (t1684.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t1684.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1686 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t1685 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1686, self));
				t1683 = t1685;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1683).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1683);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t1689 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t1688 = (OclInteger)t1689.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1687 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1688);

			//--- Print result ---
			log.reportMessage(": "+t1687);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t1690 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t1691 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1692 = StdLibAdapterImpl.INSTANCE.impl(t1690).iterator();
			while (t1692.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t1692.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1694 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t1693 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1694, self));
				t1691 = t1693;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1691).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1691);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t1697 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t1696 = (OclInteger)t1697.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1695 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1696);

			//--- Print result ---
			log.reportMessage(": "+t1695);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t1698 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t1699 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1700 = StdLibAdapterImpl.INSTANCE.impl(t1698).iterator();
			while (t1700.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t1700.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1702 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t1701 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1702, self));
				t1699 = t1701;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1699).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1699);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t1705 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t1704 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t1705.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t1703 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1704, self));

			//--- Print result ---
			log.reportMessage(": "+t1703);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv connection_size: 2<=connection->size() and connection->size()<=2";
		log.printMessage("  "+invariant);

		try {
			OclBoolean t1707;
			try {
				// Call property 'connection'
				OclSequence t1710 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
				// Call operation 'size'
				OclInteger t1709 = (OclInteger)t1710.size();
				// Call operation 'lessThanOrEqualTo'
				OclBoolean t1708 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(2).lessThanOrEqualTo(t1709);
				t1707 = t1708;
			} catch (Exception e) {
				t1707 = StdLibAdapterImpl.INSTANCE.Undefined();
			}
			OclBoolean t1711;
			try {
				// Call property 'connection'
				OclSequence t1714 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
				// Call operation 'size'
				OclInteger t1713 = (OclInteger)t1714.size();
				// Call operation 'lessThanOrEqualTo'
				OclBoolean t1712 = (OclBoolean)t1713.lessThanOrEqualTo(StdLibAdapterImpl.INSTANCE.Integer(2));
				t1711 = t1712;
			} catch (Exception e) {
				t1711 = StdLibAdapterImpl.INSTANCE.Undefined();
			}
			// Call operation 'and'
			OclBoolean t1706 = t1707.and(t1711);

			//--- Print result ---
			log.reportMessage(": "+t1706);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::AssociationClass inv connection_bidirectional: connection->forAll(x | x.association=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'connection'
			OclSequence t1715 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConnection());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd x = null;
			//--- Init flag ---
			OclBoolean t1716 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1717 = StdLibAdapterImpl.INSTANCE.impl(t1715).iterator();
			while (t1717.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.AssociationEnd)t1717.next();
				//--- Compute body ---
				// Call property 'association'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association t1719 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Association)x.getAssociation();
				// Call operation 'equalTo'
				OclBoolean t1718 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1719, self));
				t1716 = t1718;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1716).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1716);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1722 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1721 = (OclInteger)t1722.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1720 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1721);

			//--- Print result ---
			log.reportMessage(": "+t1720);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1723 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1724 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1725 = StdLibAdapterImpl.INSTANCE.impl(t1723).iterator();
			while (t1725.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1725.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1727 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1726 = (OclBoolean)t1727.includes(self);
				t1724 = t1726;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1724).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1724);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1730 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1729 = (OclInteger)t1730.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1728 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1729);

			//--- Print result ---
			log.reportMessage(": "+t1728);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1731 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1732 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1733 = StdLibAdapterImpl.INSTANCE.impl(t1731).iterator();
			while (t1733.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1733.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1735 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1734 = (OclBoolean)t1735.includes(self);
				t1732 = t1734;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1732).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1732);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1738 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1737 = (OclInteger)t1738.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1736 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1737);

			//--- Print result ---
			log.reportMessage(": "+t1736);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1739 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1740 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1741 = StdLibAdapterImpl.INSTANCE.impl(t1739).iterator();
			while (t1741.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1741.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1743 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1742 = (OclBoolean)t1743.includes(self);
				t1740 = t1742;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1740).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1740);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1746 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1745 = (OclInteger)t1746.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1744 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1745);

			//--- Print result ---
			log.reportMessage(": "+t1744);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1750 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1751 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1752 = StdLibAdapterImpl.INSTANCE.impl(t1750).iterator();
			while (t1752.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1752.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1754 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1753 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1754, self));
				t1751 = t1753;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1751).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1751);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1757 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1756 = (OclInteger)t1757.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1755 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1756);

			//--- Print result ---
			log.reportMessage(": "+t1755);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1758 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1759 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1760 = StdLibAdapterImpl.INSTANCE.impl(t1758).iterator();
			while (t1760.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1760.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1762 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1761 = (OclBoolean)t1762.includes(self);
				t1759 = t1761;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1759).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1759);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1765 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1764 = (OclInteger)t1765.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1763 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1764);

			//--- Print result ---
			log.reportMessage(": "+t1763);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1766 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1767 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1768 = StdLibAdapterImpl.INSTANCE.impl(t1766).iterator();
			while (t1768.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1768.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1770 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1769 = (OclBoolean)t1770.includes(self);
				t1767 = t1769;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1767).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1767);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1773 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1772 = (OclInteger)t1773.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1771 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1772);

			//--- Print result ---
			log.reportMessage(": "+t1771);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1774 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1775 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1776 = StdLibAdapterImpl.INSTANCE.impl(t1774).iterator();
			while (t1776.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1776.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1778 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1777 = (OclBoolean)t1778.includes(self);
				t1775 = t1777;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1775).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1775);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1782 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1783 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1784 = StdLibAdapterImpl.INSTANCE.impl(t1782).iterator();
			while (t1784.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1784.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1786 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1785 = (OclBoolean)t1786.includes(self);
				t1783 = t1785;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1783).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1783);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1789 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1788 = (OclInteger)t1789.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1787 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1788);

			//--- Print result ---
			log.reportMessage(": "+t1787);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1790 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1791 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1792 = StdLibAdapterImpl.INSTANCE.impl(t1790).iterator();
			while (t1792.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1792.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1794 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1793 = (OclBoolean)t1794.includes(self);
				t1791 = t1793;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1791).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1791);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1797 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1796 = (OclInteger)t1797.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1795 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1796);

			//--- Print result ---
			log.reportMessage(": "+t1795);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1798 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1799 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1800 = StdLibAdapterImpl.INSTANCE.impl(t1798).iterator();
			while (t1800.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1800.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1802 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1801 = (OclBoolean)t1802.includes(self);
				t1799 = t1801;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1799).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1799);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1805 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1804 = (OclInteger)t1805.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1803 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1804);

			//--- Print result ---
			log.reportMessage(": "+t1803);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1806 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1807 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1808 = StdLibAdapterImpl.INSTANCE.impl(t1806).iterator();
			while (t1808.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1808.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1810 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1809 = (OclBoolean)t1810.includes(self);
				t1807 = t1809;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1807).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1807);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1813 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1812 = (OclInteger)t1813.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1811 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1812);

			//--- Print result ---
			log.reportMessage(": "+t1811);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1814 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1815 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1816 = StdLibAdapterImpl.INSTANCE.impl(t1814).iterator();
			while (t1816.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1816.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1818 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1817 = (OclBoolean)t1818.includes(self);
				t1815 = t1817;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1815).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1815);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1821 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1820 = (OclInteger)t1821.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1819 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1820);

			//--- Print result ---
			log.reportMessage(": "+t1819);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv client_size: 1<=client->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'client'
			OclBag t1824 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			// Call operation 'size'
			OclInteger t1823 = (OclInteger)t1824.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1822 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t1823);

			//--- Print result ---
			log.reportMessage(": "+t1822);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'client'
			OclBag t1825 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1826 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1827 = StdLibAdapterImpl.INSTANCE.impl(t1825).iterator();
			while (t1827.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1827.next();
				//--- Compute body ---
				// Call property 'clientDependency'
				OclBag t1829 = StdLibAdapterImpl.INSTANCE.Bag(x.getClientDependency());
				// Call operation 'includes'
				OclBoolean t1828 = (OclBoolean)t1829.includes(self);
				t1826 = t1828;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1826).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1826);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv supplier_size: 1<=supplier->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplier'
			OclBag t1832 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			// Call operation 'size'
			OclInteger t1831 = (OclInteger)t1832.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1830 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t1831);

			//--- Print result ---
			log.reportMessage(": "+t1830);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Dependency inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplier'
			OclBag t1833 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1834 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1835 = StdLibAdapterImpl.INSTANCE.impl(t1833).iterator();
			while (t1835.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1835.next();
				//--- Compute body ---
				// Call property 'supplierDependency'
				OclBag t1837 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplierDependency());
				// Call operation 'includes'
				OclBoolean t1836 = (OclBoolean)t1837.includes(self);
				t1834 = t1836;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1834).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1834);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Binding self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1840 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1839 = (OclInteger)t1840.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1838 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1839);

			//--- Print result ---
			log.reportMessage(": "+t1838);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1841 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1842 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1843 = StdLibAdapterImpl.INSTANCE.impl(t1841).iterator();
			while (t1843.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1843.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1845 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1844 = (OclBoolean)t1845.includes(self);
				t1842 = t1844;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1842).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1842);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1848 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1847 = (OclInteger)t1848.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1846 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1847);

			//--- Print result ---
			log.reportMessage(": "+t1846);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1849 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1850 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1851 = StdLibAdapterImpl.INSTANCE.impl(t1849).iterator();
			while (t1851.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1851.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1853 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1852 = (OclBoolean)t1853.includes(self);
				t1850 = t1852;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1850).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1850);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1856 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1855 = (OclInteger)t1856.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1854 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1855);

			//--- Print result ---
			log.reportMessage(": "+t1854);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1857 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1858 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1859 = StdLibAdapterImpl.INSTANCE.impl(t1857).iterator();
			while (t1859.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1859.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1861 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1860 = (OclBoolean)t1861.includes(self);
				t1858 = t1860;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1858).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1858);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1864 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1863 = (OclInteger)t1864.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1862 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1863);

			//--- Print result ---
			log.reportMessage(": "+t1862);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1868 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1869 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1870 = StdLibAdapterImpl.INSTANCE.impl(t1868).iterator();
			while (t1870.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1870.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1872 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1871 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1872, self));
				t1869 = t1871;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1869).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1869);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1875 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1874 = (OclInteger)t1875.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1873 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1874);

			//--- Print result ---
			log.reportMessage(": "+t1873);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1876 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1877 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1878 = StdLibAdapterImpl.INSTANCE.impl(t1876).iterator();
			while (t1878.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1878.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t1880 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t1879 = (OclBoolean)t1880.includes(self);
				t1877 = t1879;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1877).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1877);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t1883 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t1882 = (OclInteger)t1883.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1881 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1882);

			//--- Print result ---
			log.reportMessage(": "+t1881);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t1884 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t1885 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1886 = StdLibAdapterImpl.INSTANCE.impl(t1884).iterator();
			while (t1886.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t1886.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t1888 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t1887 = (OclBoolean)t1888.includes(self);
				t1885 = t1887;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1885).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1885);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t1891 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t1890 = (OclInteger)t1891.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1889 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1890);

			//--- Print result ---
			log.reportMessage(": "+t1889);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t1892 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t1893 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1894 = StdLibAdapterImpl.INSTANCE.impl(t1892).iterator();
			while (t1894.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t1894.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t1896 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t1895 = (OclBoolean)t1896.includes(self);
				t1893 = t1895;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1893).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1893);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t1900 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1901 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1902 = StdLibAdapterImpl.INSTANCE.impl(t1900).iterator();
			while (t1902.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1902.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t1904 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t1903 = (OclBoolean)t1904.includes(self);
				t1901 = t1903;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1901).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1901);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t1907 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t1906 = (OclInteger)t1907.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1905 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1906);

			//--- Print result ---
			log.reportMessage(": "+t1905);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t1908 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t1909 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1910 = StdLibAdapterImpl.INSTANCE.impl(t1908).iterator();
			while (t1910.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t1910.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t1912 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t1911 = (OclBoolean)t1912.includes(self);
				t1909 = t1911;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1909).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1909);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t1915 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t1914 = (OclInteger)t1915.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1913 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1914);

			//--- Print result ---
			log.reportMessage(": "+t1913);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t1916 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t1917 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1918 = StdLibAdapterImpl.INSTANCE.impl(t1916).iterator();
			while (t1918.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t1918.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t1920 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t1919 = (OclBoolean)t1920.includes(self);
				t1917 = t1919;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1917).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1917);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t1923 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t1922 = (OclInteger)t1923.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1921 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1922);

			//--- Print result ---
			log.reportMessage(": "+t1921);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t1924 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t1925 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1926 = StdLibAdapterImpl.INSTANCE.impl(t1924).iterator();
			while (t1926.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t1926.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t1928 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t1927 = (OclBoolean)t1928.includes(self);
				t1925 = t1927;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1925).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1925);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t1931 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t1930 = (OclInteger)t1931.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1929 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1930);

			//--- Print result ---
			log.reportMessage(": "+t1929);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t1932 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t1933 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1934 = StdLibAdapterImpl.INSTANCE.impl(t1932).iterator();
			while (t1934.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t1934.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t1936 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t1935 = (OclBoolean)t1936.includes(self);
				t1933 = t1935;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1933).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1933);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t1939 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t1938 = (OclInteger)t1939.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1937 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1938);

			//--- Print result ---
			log.reportMessage(": "+t1937);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv client_size: 1<=client->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'client'
			OclBag t1942 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			// Call operation 'size'
			OclInteger t1941 = (OclInteger)t1942.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1940 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t1941);

			//--- Print result ---
			log.reportMessage(": "+t1940);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'client'
			OclBag t1943 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1944 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1945 = StdLibAdapterImpl.INSTANCE.impl(t1943).iterator();
			while (t1945.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1945.next();
				//--- Compute body ---
				// Call property 'clientDependency'
				OclBag t1947 = StdLibAdapterImpl.INSTANCE.Bag(x.getClientDependency());
				// Call operation 'includes'
				OclBoolean t1946 = (OclBoolean)t1947.includes(self);
				t1944 = t1946;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1944).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1944);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv supplier_size: 1<=supplier->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplier'
			OclBag t1950 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			// Call operation 'size'
			OclInteger t1949 = (OclInteger)t1950.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1948 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t1949);

			//--- Print result ---
			log.reportMessage(": "+t1948);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplier'
			OclBag t1951 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t1952 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1953 = StdLibAdapterImpl.INSTANCE.impl(t1951).iterator();
			while (t1953.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t1953.next();
				//--- Compute body ---
				// Call property 'supplierDependency'
				OclBag t1955 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplierDependency());
				// Call operation 'includes'
				OclBoolean t1954 = (OclBoolean)t1955.includes(self);
				t1952 = t1954;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1952).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1952);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Binding inv argument_size: 1<=argument->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'argument'
			OclBag t1958 = StdLibAdapterImpl.INSTANCE.Bag(self.getArgument());
			// Call operation 'size'
			OclInteger t1957 = (OclInteger)t1958.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1956 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t1957);

			//--- Print result ---
			log.reportMessage(": "+t1956);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Usage self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t1961 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t1960 = (OclInteger)t1961.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1959 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1960);

			//--- Print result ---
			log.reportMessage(": "+t1959);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t1962 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1963 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1964 = StdLibAdapterImpl.INSTANCE.impl(t1962).iterator();
			while (t1964.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1964.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t1966 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t1965 = (OclBoolean)t1966.includes(self);
				t1963 = t1965;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1963).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1963);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t1969 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t1968 = (OclInteger)t1969.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1967 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1968);

			//--- Print result ---
			log.reportMessage(": "+t1967);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t1970 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t1971 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1972 = StdLibAdapterImpl.INSTANCE.impl(t1970).iterator();
			while (t1972.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t1972.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t1974 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t1973 = (OclBoolean)t1974.includes(self);
				t1971 = t1973;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1971).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1971);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t1977 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t1976 = (OclInteger)t1977.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1975 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1976);

			//--- Print result ---
			log.reportMessage(": "+t1975);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t1978 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t1979 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1980 = StdLibAdapterImpl.INSTANCE.impl(t1978).iterator();
			while (t1980.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t1980.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t1982 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t1981 = (OclBoolean)t1982.includes(self);
				t1979 = t1981;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1979).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1979);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t1985 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t1984 = (OclInteger)t1985.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1983 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1984);

			//--- Print result ---
			log.reportMessage(": "+t1983);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t1989 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1990 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1991 = StdLibAdapterImpl.INSTANCE.impl(t1989).iterator();
			while (t1991.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1991.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t1993 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t1992 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t1993, self));
				t1990 = t1992;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1990).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1990);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t1996 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t1995 = (OclInteger)t1996.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t1994 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t1995);

			//--- Print result ---
			log.reportMessage(": "+t1994);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t1997 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t1998 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t1999 = StdLibAdapterImpl.INSTANCE.impl(t1997).iterator();
			while (t1999.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t1999.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2001 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2000 = (OclBoolean)t2001.includes(self);
				t1998 = t2000;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t1998).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t1998);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2004 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2003 = (OclInteger)t2004.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2002 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2003);

			//--- Print result ---
			log.reportMessage(": "+t2002);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2005 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2006 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2007 = StdLibAdapterImpl.INSTANCE.impl(t2005).iterator();
			while (t2007.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2007.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2009 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2008 = (OclBoolean)t2009.includes(self);
				t2006 = t2008;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2006).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2006);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2012 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2011 = (OclInteger)t2012.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2010 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2011);

			//--- Print result ---
			log.reportMessage(": "+t2010);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2013 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2014 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2015 = StdLibAdapterImpl.INSTANCE.impl(t2013).iterator();
			while (t2015.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2015.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2017 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2016 = (OclBoolean)t2017.includes(self);
				t2014 = t2016;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2014).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2014);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2021 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2022 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2023 = StdLibAdapterImpl.INSTANCE.impl(t2021).iterator();
			while (t2023.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2023.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2025 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2024 = (OclBoolean)t2025.includes(self);
				t2022 = t2024;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2022).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2022);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2028 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2027 = (OclInteger)t2028.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2026 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2027);

			//--- Print result ---
			log.reportMessage(": "+t2026);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2029 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2030 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2031 = StdLibAdapterImpl.INSTANCE.impl(t2029).iterator();
			while (t2031.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2031.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2033 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2032 = (OclBoolean)t2033.includes(self);
				t2030 = t2032;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2030).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2030);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2036 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2035 = (OclInteger)t2036.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2034 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2035);

			//--- Print result ---
			log.reportMessage(": "+t2034);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2037 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2038 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2039 = StdLibAdapterImpl.INSTANCE.impl(t2037).iterator();
			while (t2039.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2039.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2041 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2040 = (OclBoolean)t2041.includes(self);
				t2038 = t2040;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2038).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2038);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2044 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2043 = (OclInteger)t2044.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2042 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2043);

			//--- Print result ---
			log.reportMessage(": "+t2042);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2045 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2046 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2047 = StdLibAdapterImpl.INSTANCE.impl(t2045).iterator();
			while (t2047.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2047.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2049 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2048 = (OclBoolean)t2049.includes(self);
				t2046 = t2048;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2046).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2046);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2052 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2051 = (OclInteger)t2052.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2050 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2051);

			//--- Print result ---
			log.reportMessage(": "+t2050);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2053 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2054 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2055 = StdLibAdapterImpl.INSTANCE.impl(t2053).iterator();
			while (t2055.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2055.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2057 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2056 = (OclBoolean)t2057.includes(self);
				t2054 = t2056;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2054).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2054);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2060 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2059 = (OclInteger)t2060.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2058 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2059);

			//--- Print result ---
			log.reportMessage(": "+t2058);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv client_size: 1<=client->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'client'
			OclBag t2063 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			// Call operation 'size'
			OclInteger t2062 = (OclInteger)t2063.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2061 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2062);

			//--- Print result ---
			log.reportMessage(": "+t2061);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'client'
			OclBag t2064 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2065 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2066 = StdLibAdapterImpl.INSTANCE.impl(t2064).iterator();
			while (t2066.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2066.next();
				//--- Compute body ---
				// Call property 'clientDependency'
				OclBag t2068 = StdLibAdapterImpl.INSTANCE.Bag(x.getClientDependency());
				// Call operation 'includes'
				OclBoolean t2067 = (OclBoolean)t2068.includes(self);
				t2065 = t2067;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2065).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2065);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv supplier_size: 1<=supplier->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplier'
			OclBag t2071 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			// Call operation 'size'
			OclInteger t2070 = (OclInteger)t2071.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2069 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2070);

			//--- Print result ---
			log.reportMessage(": "+t2069);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Usage inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplier'
			OclBag t2072 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2073 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2074 = StdLibAdapterImpl.INSTANCE.impl(t2072).iterator();
			while (t2074.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2074.next();
				//--- Compute body ---
				// Call property 'supplierDependency'
				OclBag t2076 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplierDependency());
				// Call operation 'includes'
				OclBoolean t2075 = (OclBoolean)t2076.includes(self);
				t2073 = t2075;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2073).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2073);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Abstraction self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2079 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2078 = (OclInteger)t2079.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2077 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2078);

			//--- Print result ---
			log.reportMessage(": "+t2077);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2080 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2081 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2082 = StdLibAdapterImpl.INSTANCE.impl(t2080).iterator();
			while (t2082.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2082.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2084 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2083 = (OclBoolean)t2084.includes(self);
				t2081 = t2083;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2081).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2081);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2087 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2086 = (OclInteger)t2087.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2085 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2086);

			//--- Print result ---
			log.reportMessage(": "+t2085);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2088 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2089 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2090 = StdLibAdapterImpl.INSTANCE.impl(t2088).iterator();
			while (t2090.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2090.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2092 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2091 = (OclBoolean)t2092.includes(self);
				t2089 = t2091;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2089).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2089);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2095 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2094 = (OclInteger)t2095.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2093 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2094);

			//--- Print result ---
			log.reportMessage(": "+t2093);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2096 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2097 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2098 = StdLibAdapterImpl.INSTANCE.impl(t2096).iterator();
			while (t2098.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2098.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2100 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2099 = (OclBoolean)t2100.includes(self);
				t2097 = t2099;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2097).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2097);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2103 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2102 = (OclInteger)t2103.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2101 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2102);

			//--- Print result ---
			log.reportMessage(": "+t2101);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2107 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2108 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2109 = StdLibAdapterImpl.INSTANCE.impl(t2107).iterator();
			while (t2109.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2109.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2111 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2110 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2111, self));
				t2108 = t2110;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2108).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2108);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2114 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2113 = (OclInteger)t2114.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2112 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2113);

			//--- Print result ---
			log.reportMessage(": "+t2112);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2115 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2116 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2117 = StdLibAdapterImpl.INSTANCE.impl(t2115).iterator();
			while (t2117.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2117.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2119 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2118 = (OclBoolean)t2119.includes(self);
				t2116 = t2118;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2116).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2116);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2122 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2121 = (OclInteger)t2122.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2120 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2121);

			//--- Print result ---
			log.reportMessage(": "+t2120);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2123 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2124 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2125 = StdLibAdapterImpl.INSTANCE.impl(t2123).iterator();
			while (t2125.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2125.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2127 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2126 = (OclBoolean)t2127.includes(self);
				t2124 = t2126;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2124).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2124);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2130 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2129 = (OclInteger)t2130.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2128 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2129);

			//--- Print result ---
			log.reportMessage(": "+t2128);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2131 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2132 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2133 = StdLibAdapterImpl.INSTANCE.impl(t2131).iterator();
			while (t2133.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2133.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2135 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2134 = (OclBoolean)t2135.includes(self);
				t2132 = t2134;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2132).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2132);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2139 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2140 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2141 = StdLibAdapterImpl.INSTANCE.impl(t2139).iterator();
			while (t2141.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2141.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2143 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2142 = (OclBoolean)t2143.includes(self);
				t2140 = t2142;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2140).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2140);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2146 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2145 = (OclInteger)t2146.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2144 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2145);

			//--- Print result ---
			log.reportMessage(": "+t2144);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2147 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2148 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2149 = StdLibAdapterImpl.INSTANCE.impl(t2147).iterator();
			while (t2149.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2149.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2151 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2150 = (OclBoolean)t2151.includes(self);
				t2148 = t2150;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2148).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2148);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2154 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2153 = (OclInteger)t2154.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2152 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2153);

			//--- Print result ---
			log.reportMessage(": "+t2152);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2155 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2156 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2157 = StdLibAdapterImpl.INSTANCE.impl(t2155).iterator();
			while (t2157.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2157.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2159 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2158 = (OclBoolean)t2159.includes(self);
				t2156 = t2158;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2156).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2156);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2162 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2161 = (OclInteger)t2162.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2160 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2161);

			//--- Print result ---
			log.reportMessage(": "+t2160);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2163 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2164 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2165 = StdLibAdapterImpl.INSTANCE.impl(t2163).iterator();
			while (t2165.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2165.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2167 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2166 = (OclBoolean)t2167.includes(self);
				t2164 = t2166;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2164).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2164);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2170 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2169 = (OclInteger)t2170.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2168 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2169);

			//--- Print result ---
			log.reportMessage(": "+t2168);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2171 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2172 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2173 = StdLibAdapterImpl.INSTANCE.impl(t2171).iterator();
			while (t2173.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2173.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2175 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2174 = (OclBoolean)t2175.includes(self);
				t2172 = t2174;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2172).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2172);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2178 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2177 = (OclInteger)t2178.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2176 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2177);

			//--- Print result ---
			log.reportMessage(": "+t2176);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv client_size: 1<=client->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'client'
			OclBag t2181 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			// Call operation 'size'
			OclInteger t2180 = (OclInteger)t2181.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2179 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2180);

			//--- Print result ---
			log.reportMessage(": "+t2179);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'client'
			OclBag t2182 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2183 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2184 = StdLibAdapterImpl.INSTANCE.impl(t2182).iterator();
			while (t2184.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2184.next();
				//--- Compute body ---
				// Call property 'clientDependency'
				OclBag t2186 = StdLibAdapterImpl.INSTANCE.Bag(x.getClientDependency());
				// Call operation 'includes'
				OclBoolean t2185 = (OclBoolean)t2186.includes(self);
				t2183 = t2185;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2183).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2183);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv supplier_size: 1<=supplier->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplier'
			OclBag t2189 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			// Call operation 'size'
			OclInteger t2188 = (OclInteger)t2189.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2187 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2188);

			//--- Print result ---
			log.reportMessage(": "+t2187);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Abstraction inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplier'
			OclBag t2190 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2191 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2192 = StdLibAdapterImpl.INSTANCE.impl(t2190).iterator();
			while (t2192.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2192.next();
				//--- Compute body ---
				// Call property 'supplierDependency'
				OclBag t2194 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplierDependency());
				// Call operation 'includes'
				OclBoolean t2193 = (OclBoolean)t2194.includes(self);
				t2191 = t2193;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2191).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2191);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Permission self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2197 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2196 = (OclInteger)t2197.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2195 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2196);

			//--- Print result ---
			log.reportMessage(": "+t2195);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2198 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2199 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2200 = StdLibAdapterImpl.INSTANCE.impl(t2198).iterator();
			while (t2200.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2200.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2202 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2201 = (OclBoolean)t2202.includes(self);
				t2199 = t2201;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2199).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2199);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2205 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2204 = (OclInteger)t2205.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2203 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2204);

			//--- Print result ---
			log.reportMessage(": "+t2203);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2206 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2207 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2208 = StdLibAdapterImpl.INSTANCE.impl(t2206).iterator();
			while (t2208.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2208.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2210 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2209 = (OclBoolean)t2210.includes(self);
				t2207 = t2209;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2207).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2207);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2213 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2212 = (OclInteger)t2213.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2211 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2212);

			//--- Print result ---
			log.reportMessage(": "+t2211);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2214 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2215 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2216 = StdLibAdapterImpl.INSTANCE.impl(t2214).iterator();
			while (t2216.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2216.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2218 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2217 = (OclBoolean)t2218.includes(self);
				t2215 = t2217;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2215).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2215);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2221 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2220 = (OclInteger)t2221.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2219 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2220);

			//--- Print result ---
			log.reportMessage(": "+t2219);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2225 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2226 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2227 = StdLibAdapterImpl.INSTANCE.impl(t2225).iterator();
			while (t2227.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2227.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2229 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2228 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2229, self));
				t2226 = t2228;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2226).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2226);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2232 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2231 = (OclInteger)t2232.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2230 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2231);

			//--- Print result ---
			log.reportMessage(": "+t2230);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2233 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2234 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2235 = StdLibAdapterImpl.INSTANCE.impl(t2233).iterator();
			while (t2235.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2235.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2237 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2236 = (OclBoolean)t2237.includes(self);
				t2234 = t2236;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2234).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2234);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2240 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2239 = (OclInteger)t2240.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2238 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2239);

			//--- Print result ---
			log.reportMessage(": "+t2238);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2241 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2242 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2243 = StdLibAdapterImpl.INSTANCE.impl(t2241).iterator();
			while (t2243.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2243.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2245 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2244 = (OclBoolean)t2245.includes(self);
				t2242 = t2244;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2242).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2242);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2248 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2247 = (OclInteger)t2248.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2246 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2247);

			//--- Print result ---
			log.reportMessage(": "+t2246);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2249 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2250 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2251 = StdLibAdapterImpl.INSTANCE.impl(t2249).iterator();
			while (t2251.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2251.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2253 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2252 = (OclBoolean)t2253.includes(self);
				t2250 = t2252;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2250).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2250);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2257 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2258 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2259 = StdLibAdapterImpl.INSTANCE.impl(t2257).iterator();
			while (t2259.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2259.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2261 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2260 = (OclBoolean)t2261.includes(self);
				t2258 = t2260;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2258).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2258);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2264 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2263 = (OclInteger)t2264.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2262 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2263);

			//--- Print result ---
			log.reportMessage(": "+t2262);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2265 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2266 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2267 = StdLibAdapterImpl.INSTANCE.impl(t2265).iterator();
			while (t2267.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2267.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2269 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2268 = (OclBoolean)t2269.includes(self);
				t2266 = t2268;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2266).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2266);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2272 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2271 = (OclInteger)t2272.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2270 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2271);

			//--- Print result ---
			log.reportMessage(": "+t2270);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2273 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2274 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2275 = StdLibAdapterImpl.INSTANCE.impl(t2273).iterator();
			while (t2275.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2275.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2277 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2276 = (OclBoolean)t2277.includes(self);
				t2274 = t2276;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2274).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2274);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2280 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2279 = (OclInteger)t2280.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2278 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2279);

			//--- Print result ---
			log.reportMessage(": "+t2278);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2281 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2282 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2283 = StdLibAdapterImpl.INSTANCE.impl(t2281).iterator();
			while (t2283.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2283.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2285 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2284 = (OclBoolean)t2285.includes(self);
				t2282 = t2284;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2282).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2282);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2288 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2287 = (OclInteger)t2288.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2286 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2287);

			//--- Print result ---
			log.reportMessage(": "+t2286);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2289 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2290 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2291 = StdLibAdapterImpl.INSTANCE.impl(t2289).iterator();
			while (t2291.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2291.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2293 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2292 = (OclBoolean)t2293.includes(self);
				t2290 = t2292;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2290).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2290);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2296 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2295 = (OclInteger)t2296.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2294 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2295);

			//--- Print result ---
			log.reportMessage(": "+t2294);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv client_size: 1<=client->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'client'
			OclBag t2299 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			// Call operation 'size'
			OclInteger t2298 = (OclInteger)t2299.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2297 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2298);

			//--- Print result ---
			log.reportMessage(": "+t2297);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv client_bidirectional: client->forAll(x | x.clientDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'client'
			OclBag t2300 = StdLibAdapterImpl.INSTANCE.Bag(self.getClient());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2301 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2302 = StdLibAdapterImpl.INSTANCE.impl(t2300).iterator();
			while (t2302.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2302.next();
				//--- Compute body ---
				// Call property 'clientDependency'
				OclBag t2304 = StdLibAdapterImpl.INSTANCE.Bag(x.getClientDependency());
				// Call operation 'includes'
				OclBoolean t2303 = (OclBoolean)t2304.includes(self);
				t2301 = t2303;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2301).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2301);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv supplier_size: 1<=supplier->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplier'
			OclBag t2307 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			// Call operation 'size'
			OclInteger t2306 = (OclInteger)t2307.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2305 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(1).lessThanOrEqualTo(t2306);

			//--- Print result ---
			log.reportMessage(": "+t2305);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Permission inv supplier_bidirectional: supplier->forAll(x | x.supplierDependency->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplier'
			OclBag t2308 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplier());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2309 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2310 = StdLibAdapterImpl.INSTANCE.impl(t2308).iterator();
			while (t2310.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2310.next();
				//--- Compute body ---
				// Call property 'supplierDependency'
				OclBag t2312 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplierDependency());
				// Call operation 'includes'
				OclBoolean t2311 = (OclBoolean)t2312.includes(self);
				t2309 = t2311;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2309).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2309);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Interface self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2315 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2314 = (OclInteger)t2315.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2313 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2314);

			//--- Print result ---
			log.reportMessage(": "+t2313);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2316 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2317 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2318 = StdLibAdapterImpl.INSTANCE.impl(t2316).iterator();
			while (t2318.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2318.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2320 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2319 = (OclBoolean)t2320.includes(self);
				t2317 = t2319;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2317).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2317);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2323 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2322 = (OclInteger)t2323.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2321 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2322);

			//--- Print result ---
			log.reportMessage(": "+t2321);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2324 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2325 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2326 = StdLibAdapterImpl.INSTANCE.impl(t2324).iterator();
			while (t2326.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2326.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2328 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2327 = (OclBoolean)t2328.includes(self);
				t2325 = t2327;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2325).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2325);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2331 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2330 = (OclInteger)t2331.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2329 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2330);

			//--- Print result ---
			log.reportMessage(": "+t2329);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2332 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2333 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2334 = StdLibAdapterImpl.INSTANCE.impl(t2332).iterator();
			while (t2334.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2334.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2336 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2335 = (OclBoolean)t2336.includes(self);
				t2333 = t2335;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2333).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2333);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2339 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2338 = (OclInteger)t2339.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2337 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2338);

			//--- Print result ---
			log.reportMessage(": "+t2337);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2343 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2344 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2345 = StdLibAdapterImpl.INSTANCE.impl(t2343).iterator();
			while (t2345.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2345.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2347 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2346 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2347, self));
				t2344 = t2346;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2344).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2344);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2350 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2349 = (OclInteger)t2350.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2348 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2349);

			//--- Print result ---
			log.reportMessage(": "+t2348);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2351 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2352 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2353 = StdLibAdapterImpl.INSTANCE.impl(t2351).iterator();
			while (t2353.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2353.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2355 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2354 = (OclBoolean)t2355.includes(self);
				t2352 = t2354;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2352).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2352);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2358 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2357 = (OclInteger)t2358.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2356 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2357);

			//--- Print result ---
			log.reportMessage(": "+t2356);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2359 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2360 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2361 = StdLibAdapterImpl.INSTANCE.impl(t2359).iterator();
			while (t2361.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2361.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2363 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2362 = (OclBoolean)t2363.includes(self);
				t2360 = t2362;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2360).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2360);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2366 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2365 = (OclInteger)t2366.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2364 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2365);

			//--- Print result ---
			log.reportMessage(": "+t2364);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2367 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2368 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2369 = StdLibAdapterImpl.INSTANCE.impl(t2367).iterator();
			while (t2369.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2369.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2371 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2370 = (OclBoolean)t2371.includes(self);
				t2368 = t2370;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2368).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2368);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2375 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2376 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2377 = StdLibAdapterImpl.INSTANCE.impl(t2375).iterator();
			while (t2377.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2377.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2379 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2378 = (OclBoolean)t2379.includes(self);
				t2376 = t2378;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2376).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2376);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2382 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2381 = (OclInteger)t2382.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2380 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2381);

			//--- Print result ---
			log.reportMessage(": "+t2380);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2383 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2384 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2385 = StdLibAdapterImpl.INSTANCE.impl(t2383).iterator();
			while (t2385.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2385.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2387 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2386 = (OclBoolean)t2387.includes(self);
				t2384 = t2386;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2384).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2384);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2390 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2389 = (OclInteger)t2390.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2388 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2389);

			//--- Print result ---
			log.reportMessage(": "+t2388);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2391 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2392 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2393 = StdLibAdapterImpl.INSTANCE.impl(t2391).iterator();
			while (t2393.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2393.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2395 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2394 = (OclBoolean)t2395.includes(self);
				t2392 = t2394;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2392).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2392);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2398 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2397 = (OclInteger)t2398.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2396 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2397);

			//--- Print result ---
			log.reportMessage(": "+t2396);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2399 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2400 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2401 = StdLibAdapterImpl.INSTANCE.impl(t2399).iterator();
			while (t2401.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2401.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2403 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2402 = (OclBoolean)t2403.includes(self);
				t2400 = t2402;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2400).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2400);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2406 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2405 = (OclInteger)t2406.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2404 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2405);

			//--- Print result ---
			log.reportMessage(": "+t2404);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2407 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2408 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2409 = StdLibAdapterImpl.INSTANCE.impl(t2407).iterator();
			while (t2409.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2409.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2411 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2410 = (OclBoolean)t2411.includes(self);
				t2408 = t2410;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2408).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2408);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2414 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2413 = (OclInteger)t2414.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2412 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2413);

			//--- Print result ---
			log.reportMessage(": "+t2412);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t2417 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t2416 = (OclInteger)t2417.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2415 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2416);

			//--- Print result ---
			log.reportMessage(": "+t2415);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t2421 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2422 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2423 = StdLibAdapterImpl.INSTANCE.impl(t2421).iterator();
			while (t2423.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2423.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2425 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t2424 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2425, self));
				t2422 = t2424;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2422).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2422);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t2428 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t2427 = (OclInteger)t2428.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2426 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2427);

			//--- Print result ---
			log.reportMessage(": "+t2426);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t2429 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2430 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2431 = StdLibAdapterImpl.INSTANCE.impl(t2429).iterator();
			while (t2431.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2431.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2433 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t2432 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2433, self));
				t2430 = t2432;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2430).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2430);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2436 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2435 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t2436.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t2434 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2435, self));

			//--- Print result ---
			log.reportMessage(": "+t2434);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t2439 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t2438 = (OclInteger)t2439.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2437 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2438);

			//--- Print result ---
			log.reportMessage(": "+t2437);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t2440 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t2441 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2442 = StdLibAdapterImpl.INSTANCE.impl(t2440).iterator();
			while (t2442.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t2442.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2444 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2443 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2444, self));
				t2441 = t2443;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2441).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2441);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t2447 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t2446 = (OclInteger)t2447.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2445 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2446);

			//--- Print result ---
			log.reportMessage(": "+t2445);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t2448 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t2449 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2450 = StdLibAdapterImpl.INSTANCE.impl(t2448).iterator();
			while (t2450.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t2450.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2452 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t2451 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2452, self));
				t2449 = t2451;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2449).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2449);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t2455 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t2454 = (OclInteger)t2455.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2453 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2454);

			//--- Print result ---
			log.reportMessage(": "+t2453);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t2456 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t2457 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2458 = StdLibAdapterImpl.INSTANCE.impl(t2456).iterator();
			while (t2458.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t2458.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2460 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2459 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2460, self));
				t2457 = t2459;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2457).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2457);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Interface inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2463 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2462 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t2463.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t2461 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2462, self));

			//--- Print result ---
			log.reportMessage(": "+t2461);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.DataType self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2466 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2465 = (OclInteger)t2466.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2464 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2465);

			//--- Print result ---
			log.reportMessage(": "+t2464);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2467 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2468 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2469 = StdLibAdapterImpl.INSTANCE.impl(t2467).iterator();
			while (t2469.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2469.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2471 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2470 = (OclBoolean)t2471.includes(self);
				t2468 = t2470;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2468).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2468);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2474 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2473 = (OclInteger)t2474.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2472 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2473);

			//--- Print result ---
			log.reportMessage(": "+t2472);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2475 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2476 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2477 = StdLibAdapterImpl.INSTANCE.impl(t2475).iterator();
			while (t2477.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2477.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2479 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2478 = (OclBoolean)t2479.includes(self);
				t2476 = t2478;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2476).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2476);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2482 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2481 = (OclInteger)t2482.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2480 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2481);

			//--- Print result ---
			log.reportMessage(": "+t2480);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2483 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2484 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2485 = StdLibAdapterImpl.INSTANCE.impl(t2483).iterator();
			while (t2485.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2485.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2487 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2486 = (OclBoolean)t2487.includes(self);
				t2484 = t2486;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2484).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2484);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2490 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2489 = (OclInteger)t2490.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2488 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2489);

			//--- Print result ---
			log.reportMessage(": "+t2488);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2494 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2495 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2496 = StdLibAdapterImpl.INSTANCE.impl(t2494).iterator();
			while (t2496.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2496.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2498 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2497 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2498, self));
				t2495 = t2497;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2495).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2495);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2501 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2500 = (OclInteger)t2501.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2499 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2500);

			//--- Print result ---
			log.reportMessage(": "+t2499);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2502 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2503 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2504 = StdLibAdapterImpl.INSTANCE.impl(t2502).iterator();
			while (t2504.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2504.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2506 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2505 = (OclBoolean)t2506.includes(self);
				t2503 = t2505;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2503).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2503);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2509 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2508 = (OclInteger)t2509.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2507 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2508);

			//--- Print result ---
			log.reportMessage(": "+t2507);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2510 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2511 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2512 = StdLibAdapterImpl.INSTANCE.impl(t2510).iterator();
			while (t2512.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2512.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2514 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2513 = (OclBoolean)t2514.includes(self);
				t2511 = t2513;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2511).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2511);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2517 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2516 = (OclInteger)t2517.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2515 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2516);

			//--- Print result ---
			log.reportMessage(": "+t2515);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2518 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2519 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2520 = StdLibAdapterImpl.INSTANCE.impl(t2518).iterator();
			while (t2520.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2520.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2522 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2521 = (OclBoolean)t2522.includes(self);
				t2519 = t2521;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2519).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2519);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2526 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2527 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2528 = StdLibAdapterImpl.INSTANCE.impl(t2526).iterator();
			while (t2528.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2528.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2530 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2529 = (OclBoolean)t2530.includes(self);
				t2527 = t2529;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2527).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2527);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2533 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2532 = (OclInteger)t2533.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2531 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2532);

			//--- Print result ---
			log.reportMessage(": "+t2531);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2534 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2535 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2536 = StdLibAdapterImpl.INSTANCE.impl(t2534).iterator();
			while (t2536.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2536.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2538 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2537 = (OclBoolean)t2538.includes(self);
				t2535 = t2537;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2535).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2535);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2541 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2540 = (OclInteger)t2541.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2539 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2540);

			//--- Print result ---
			log.reportMessage(": "+t2539);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2542 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2543 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2544 = StdLibAdapterImpl.INSTANCE.impl(t2542).iterator();
			while (t2544.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2544.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2546 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2545 = (OclBoolean)t2546.includes(self);
				t2543 = t2545;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2543).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2543);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2549 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2548 = (OclInteger)t2549.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2547 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2548);

			//--- Print result ---
			log.reportMessage(": "+t2547);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2550 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2551 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2552 = StdLibAdapterImpl.INSTANCE.impl(t2550).iterator();
			while (t2552.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2552.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2554 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2553 = (OclBoolean)t2554.includes(self);
				t2551 = t2553;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2551).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2551);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2557 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2556 = (OclInteger)t2557.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2555 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2556);

			//--- Print result ---
			log.reportMessage(": "+t2555);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2558 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2559 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2560 = StdLibAdapterImpl.INSTANCE.impl(t2558).iterator();
			while (t2560.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2560.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2562 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2561 = (OclBoolean)t2562.includes(self);
				t2559 = t2561;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2559).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2559);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2565 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2564 = (OclInteger)t2565.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2563 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2564);

			//--- Print result ---
			log.reportMessage(": "+t2563);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t2568 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t2567 = (OclInteger)t2568.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2566 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2567);

			//--- Print result ---
			log.reportMessage(": "+t2566);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t2572 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2573 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2574 = StdLibAdapterImpl.INSTANCE.impl(t2572).iterator();
			while (t2574.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2574.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2576 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t2575 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2576, self));
				t2573 = t2575;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2573).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2573);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t2579 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t2578 = (OclInteger)t2579.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2577 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2578);

			//--- Print result ---
			log.reportMessage(": "+t2577);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t2580 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2581 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2582 = StdLibAdapterImpl.INSTANCE.impl(t2580).iterator();
			while (t2582.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2582.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2584 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t2583 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2584, self));
				t2581 = t2583;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2581).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2581);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2587 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2586 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t2587.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t2585 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2586, self));

			//--- Print result ---
			log.reportMessage(": "+t2585);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t2590 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t2589 = (OclInteger)t2590.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2588 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2589);

			//--- Print result ---
			log.reportMessage(": "+t2588);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t2591 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t2592 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2593 = StdLibAdapterImpl.INSTANCE.impl(t2591).iterator();
			while (t2593.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t2593.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2595 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2594 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2595, self));
				t2592 = t2594;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2592).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2592);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t2598 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t2597 = (OclInteger)t2598.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2596 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2597);

			//--- Print result ---
			log.reportMessage(": "+t2596);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t2599 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t2600 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2601 = StdLibAdapterImpl.INSTANCE.impl(t2599).iterator();
			while (t2601.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t2601.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2603 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t2602 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2603, self));
				t2600 = t2602;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2600).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2600);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t2606 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t2605 = (OclInteger)t2606.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2604 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2605);

			//--- Print result ---
			log.reportMessage(": "+t2604);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t2607 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t2608 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2609 = StdLibAdapterImpl.INSTANCE.impl(t2607).iterator();
			while (t2609.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t2609.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2611 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2610 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2611, self));
				t2608 = t2610;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2608).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2608);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::DataType inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2614 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2613 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t2614.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t2612 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2613, self));

			//--- Print result ---
			log.reportMessage(": "+t2612);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2617 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2616 = (OclInteger)t2617.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2615 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2616);

			//--- Print result ---
			log.reportMessage(": "+t2615);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2618 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2619 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2620 = StdLibAdapterImpl.INSTANCE.impl(t2618).iterator();
			while (t2620.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2620.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2622 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2621 = (OclBoolean)t2622.includes(self);
				t2619 = t2621;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2619).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2619);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2625 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2624 = (OclInteger)t2625.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2623 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2624);

			//--- Print result ---
			log.reportMessage(": "+t2623);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2626 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2627 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2628 = StdLibAdapterImpl.INSTANCE.impl(t2626).iterator();
			while (t2628.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2628.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2630 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2629 = (OclBoolean)t2630.includes(self);
				t2627 = t2629;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2627).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2627);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2633 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2632 = (OclInteger)t2633.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2631 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2632);

			//--- Print result ---
			log.reportMessage(": "+t2631);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2634 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2635 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2636 = StdLibAdapterImpl.INSTANCE.impl(t2634).iterator();
			while (t2636.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2636.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2638 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2637 = (OclBoolean)t2638.includes(self);
				t2635 = t2637;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2635).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2635);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2641 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2640 = (OclInteger)t2641.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2639 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2640);

			//--- Print result ---
			log.reportMessage(": "+t2639);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2645 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2646 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2647 = StdLibAdapterImpl.INSTANCE.impl(t2645).iterator();
			while (t2647.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2647.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2649 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2648 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2649, self));
				t2646 = t2648;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2646).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2646);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2652 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2651 = (OclInteger)t2652.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2650 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2651);

			//--- Print result ---
			log.reportMessage(": "+t2650);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2653 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2654 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2655 = StdLibAdapterImpl.INSTANCE.impl(t2653).iterator();
			while (t2655.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2655.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2657 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2656 = (OclBoolean)t2657.includes(self);
				t2654 = t2656;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2654).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2654);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2660 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2659 = (OclInteger)t2660.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2658 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2659);

			//--- Print result ---
			log.reportMessage(": "+t2658);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2661 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2662 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2663 = StdLibAdapterImpl.INSTANCE.impl(t2661).iterator();
			while (t2663.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2663.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2665 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2664 = (OclBoolean)t2665.includes(self);
				t2662 = t2664;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2662).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2662);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2668 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2667 = (OclInteger)t2668.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2666 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2667);

			//--- Print result ---
			log.reportMessage(": "+t2666);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2669 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2670 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2671 = StdLibAdapterImpl.INSTANCE.impl(t2669).iterator();
			while (t2671.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2671.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2673 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2672 = (OclBoolean)t2673.includes(self);
				t2670 = t2672;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2670).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2670);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2677 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2678 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2679 = StdLibAdapterImpl.INSTANCE.impl(t2677).iterator();
			while (t2679.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2679.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2681 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2680 = (OclBoolean)t2681.includes(self);
				t2678 = t2680;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2678).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2678);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2684 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2683 = (OclInteger)t2684.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2682 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2683);

			//--- Print result ---
			log.reportMessage(": "+t2682);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2685 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2686 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2687 = StdLibAdapterImpl.INSTANCE.impl(t2685).iterator();
			while (t2687.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2687.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2689 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2688 = (OclBoolean)t2689.includes(self);
				t2686 = t2688;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2686).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2686);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2692 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2691 = (OclInteger)t2692.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2690 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2691);

			//--- Print result ---
			log.reportMessage(": "+t2690);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2693 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2694 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2695 = StdLibAdapterImpl.INSTANCE.impl(t2693).iterator();
			while (t2695.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2695.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2697 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2696 = (OclBoolean)t2697.includes(self);
				t2694 = t2696;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2694).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2694);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2700 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2699 = (OclInteger)t2700.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2698 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2699);

			//--- Print result ---
			log.reportMessage(": "+t2698);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2701 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2702 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2703 = StdLibAdapterImpl.INSTANCE.impl(t2701).iterator();
			while (t2703.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2703.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2705 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2704 = (OclBoolean)t2705.includes(self);
				t2702 = t2704;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2702).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2702);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2708 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2707 = (OclInteger)t2708.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2706 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2707);

			//--- Print result ---
			log.reportMessage(": "+t2706);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2709 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2710 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2711 = StdLibAdapterImpl.INSTANCE.impl(t2709).iterator();
			while (t2711.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2711.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2713 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2712 = (OclBoolean)t2713.includes(self);
				t2710 = t2712;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2710).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2710);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2716 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2715 = (OclInteger)t2716.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2714 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2715);

			//--- Print result ---
			log.reportMessage(": "+t2714);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t2719 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t2718 = (OclInteger)t2719.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2717 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2718);

			//--- Print result ---
			log.reportMessage(": "+t2717);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t2723 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2724 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2725 = StdLibAdapterImpl.INSTANCE.impl(t2723).iterator();
			while (t2725.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2725.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2727 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t2726 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2727, self));
				t2724 = t2726;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2724).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2724);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t2730 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t2729 = (OclInteger)t2730.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2728 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2729);

			//--- Print result ---
			log.reportMessage(": "+t2728);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t2731 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2732 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2733 = StdLibAdapterImpl.INSTANCE.impl(t2731).iterator();
			while (t2733.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2733.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2735 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t2734 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2735, self));
				t2732 = t2734;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2732).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2732);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2738 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2737 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t2738.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t2736 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2737, self));

			//--- Print result ---
			log.reportMessage(": "+t2736);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t2741 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t2740 = (OclInteger)t2741.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2739 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2740);

			//--- Print result ---
			log.reportMessage(": "+t2739);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t2742 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t2743 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2744 = StdLibAdapterImpl.INSTANCE.impl(t2742).iterator();
			while (t2744.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t2744.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2746 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2745 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2746, self));
				t2743 = t2745;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2743).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2743);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t2749 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t2748 = (OclInteger)t2749.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2747 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2748);

			//--- Print result ---
			log.reportMessage(": "+t2747);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t2750 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t2751 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2752 = StdLibAdapterImpl.INSTANCE.impl(t2750).iterator();
			while (t2752.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t2752.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2754 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t2753 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2754, self));
				t2751 = t2753;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2751).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2751);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t2757 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t2756 = (OclInteger)t2757.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2755 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2756);

			//--- Print result ---
			log.reportMessage(": "+t2755);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t2758 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t2759 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2760 = StdLibAdapterImpl.INSTANCE.impl(t2758).iterator();
			while (t2760.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t2760.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2762 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2761 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2762, self));
				t2759 = t2761;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2759).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2759);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2765 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2764 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t2765.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t2763 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2764, self));

			//--- Print result ---
			log.reportMessage(": "+t2763);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv resident_size: 0<=resident->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'resident'
			OclBag t2768 = StdLibAdapterImpl.INSTANCE.Bag(self.getResident());
			// Call operation 'size'
			OclInteger t2767 = (OclInteger)t2768.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2766 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2767);

			//--- Print result ---
			log.reportMessage(": "+t2766);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Node inv resident_bidirectional: resident->forAll(x | x.deploymentLocation->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'resident'
			OclBag t2769 = StdLibAdapterImpl.INSTANCE.Bag(self.getResident());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2770 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2771 = StdLibAdapterImpl.INSTANCE.impl(t2769).iterator();
			while (t2771.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2771.next();
				//--- Compute body ---
				// Call property 'deploymentLocation'
				OclBag t2773 = StdLibAdapterImpl.INSTANCE.Bag(x.getDeploymentLocation());
				// Call operation 'includes'
				OclBoolean t2772 = (OclBoolean)t2773.includes(self);
				t2770 = t2772;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2770).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2770);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2776 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2775 = (OclInteger)t2776.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2774 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2775);

			//--- Print result ---
			log.reportMessage(": "+t2774);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2777 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2778 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2779 = StdLibAdapterImpl.INSTANCE.impl(t2777).iterator();
			while (t2779.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2779.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2781 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2780 = (OclBoolean)t2781.includes(self);
				t2778 = t2780;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2778).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2778);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2784 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2783 = (OclInteger)t2784.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2782 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2783);

			//--- Print result ---
			log.reportMessage(": "+t2782);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2785 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2786 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2787 = StdLibAdapterImpl.INSTANCE.impl(t2785).iterator();
			while (t2787.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2787.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2789 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2788 = (OclBoolean)t2789.includes(self);
				t2786 = t2788;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2786).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2786);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2792 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2791 = (OclInteger)t2792.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2790 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2791);

			//--- Print result ---
			log.reportMessage(": "+t2790);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2793 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2794 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2795 = StdLibAdapterImpl.INSTANCE.impl(t2793).iterator();
			while (t2795.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2795.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2797 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2796 = (OclBoolean)t2797.includes(self);
				t2794 = t2796;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2794).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2794);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2800 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2799 = (OclInteger)t2800.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2798 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2799);

			//--- Print result ---
			log.reportMessage(": "+t2798);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2804 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2805 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2806 = StdLibAdapterImpl.INSTANCE.impl(t2804).iterator();
			while (t2806.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2806.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2808 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2807 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2808, self));
				t2805 = t2807;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2805).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2805);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2811 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2810 = (OclInteger)t2811.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2809 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2810);

			//--- Print result ---
			log.reportMessage(": "+t2809);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2812 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2813 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2814 = StdLibAdapterImpl.INSTANCE.impl(t2812).iterator();
			while (t2814.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2814.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2816 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2815 = (OclBoolean)t2816.includes(self);
				t2813 = t2815;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2813).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2813);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2819 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2818 = (OclInteger)t2819.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2817 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2818);

			//--- Print result ---
			log.reportMessage(": "+t2817);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2820 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2821 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2822 = StdLibAdapterImpl.INSTANCE.impl(t2820).iterator();
			while (t2822.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2822.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2824 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2823 = (OclBoolean)t2824.includes(self);
				t2821 = t2823;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2821).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2821);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2827 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2826 = (OclInteger)t2827.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2825 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2826);

			//--- Print result ---
			log.reportMessage(": "+t2825);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2828 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2829 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2830 = StdLibAdapterImpl.INSTANCE.impl(t2828).iterator();
			while (t2830.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2830.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2832 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2831 = (OclBoolean)t2832.includes(self);
				t2829 = t2831;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2829).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2829);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t2836 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2837 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2838 = StdLibAdapterImpl.INSTANCE.impl(t2836).iterator();
			while (t2838.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2838.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t2840 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t2839 = (OclBoolean)t2840.includes(self);
				t2837 = t2839;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2837).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2837);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t2843 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t2842 = (OclInteger)t2843.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2841 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2842);

			//--- Print result ---
			log.reportMessage(": "+t2841);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t2844 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t2845 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2846 = StdLibAdapterImpl.INSTANCE.impl(t2844).iterator();
			while (t2846.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t2846.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t2848 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t2847 = (OclBoolean)t2848.includes(self);
				t2845 = t2847;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2845).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2845);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t2851 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t2850 = (OclInteger)t2851.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2849 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2850);

			//--- Print result ---
			log.reportMessage(": "+t2849);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t2852 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t2853 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2854 = StdLibAdapterImpl.INSTANCE.impl(t2852).iterator();
			while (t2854.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t2854.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t2856 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t2855 = (OclBoolean)t2856.includes(self);
				t2853 = t2855;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2853).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2853);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t2859 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t2858 = (OclInteger)t2859.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2857 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2858);

			//--- Print result ---
			log.reportMessage(": "+t2857);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t2860 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t2861 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2862 = StdLibAdapterImpl.INSTANCE.impl(t2860).iterator();
			while (t2862.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t2862.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t2864 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t2863 = (OclBoolean)t2864.includes(self);
				t2861 = t2863;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2861).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2861);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t2867 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t2866 = (OclInteger)t2867.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2865 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2866);

			//--- Print result ---
			log.reportMessage(": "+t2865);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t2868 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t2869 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2870 = StdLibAdapterImpl.INSTANCE.impl(t2868).iterator();
			while (t2870.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t2870.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t2872 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t2871 = (OclBoolean)t2872.includes(self);
				t2869 = t2871;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2869).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2869);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t2875 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t2874 = (OclInteger)t2875.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2873 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2874);

			//--- Print result ---
			log.reportMessage(": "+t2873);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t2878 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t2877 = (OclInteger)t2878.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2876 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2877);

			//--- Print result ---
			log.reportMessage(": "+t2876);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t2882 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2883 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2884 = StdLibAdapterImpl.INSTANCE.impl(t2882).iterator();
			while (t2884.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2884.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2886 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t2885 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2886, self));
				t2883 = t2885;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2883).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2883);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t2889 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t2888 = (OclInteger)t2889.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2887 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2888);

			//--- Print result ---
			log.reportMessage(": "+t2887);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t2890 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t2891 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2892 = StdLibAdapterImpl.INSTANCE.impl(t2890).iterator();
			while (t2892.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t2892.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2894 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t2893 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2894, self));
				t2891 = t2893;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2891).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2891);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2897 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2896 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t2897.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t2895 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2896, self));

			//--- Print result ---
			log.reportMessage(": "+t2895);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedParameter'
			OclBag t2900 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			// Call operation 'size'
			OclInteger t2899 = (OclInteger)t2900.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2898 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2899);

			//--- Print result ---
			log.reportMessage(": "+t2898);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedParameter'
			OclBag t2901 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedParameter());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter x = null;
			//--- Init flag ---
			OclBoolean t2902 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2903 = StdLibAdapterImpl.INSTANCE.impl(t2901).iterator();
			while (t2903.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Parameter)t2903.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2905 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2904 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2905, self));
				t2902 = t2904;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2902).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2902);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'feature'
			OclSequence t2908 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			// Call operation 'size'
			OclInteger t2907 = (OclInteger)t2908.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2906 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2907);

			//--- Print result ---
			log.reportMessage(": "+t2906);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'feature'
			OclSequence t2909 = StdLibAdapterImpl.INSTANCE.Sequence(self.getFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature x = null;
			//--- Init flag ---
			OclBoolean t2910 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2911 = StdLibAdapterImpl.INSTANCE.impl(t2909).iterator();
			while (t2911.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Feature)t2911.next();
				//--- Compute body ---
				// Call property 'owner'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2913 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getOwner();
				// Call operation 'equalTo'
				OclBoolean t2912 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2913, self));
				t2910 = t2912;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2910).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2910);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'typedFeature'
			OclBag t2916 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			// Call operation 'size'
			OclInteger t2915 = (OclInteger)t2916.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2914 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2915);

			//--- Print result ---
			log.reportMessage(": "+t2914);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'typedFeature'
			OclBag t2917 = StdLibAdapterImpl.INSTANCE.Bag(self.getTypedFeature());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature x = null;
			//--- Init flag ---
			OclBoolean t2918 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2919 = StdLibAdapterImpl.INSTANCE.impl(t2917).iterator();
			while (t2919.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.StructuralFeature)t2919.next();
				//--- Compute body ---
				// Call property 'type'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2921 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)x.getType();
				// Call operation 'equalTo'
				OclBoolean t2920 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2921, self));
				t2918 = t2920;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2918).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2918);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t2924 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)self.getPowertypeRange();
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t2923 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)t2924.getPowertype();
			// Call operation 'equalTo'
			OclBoolean t2922 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2923, self));

			//--- Print result ---
			log.reportMessage(": "+t2922);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv deploymentLocation_size: 0<=deploymentLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'deploymentLocation'
			OclBag t2927 = StdLibAdapterImpl.INSTANCE.Bag(self.getDeploymentLocation());
			// Call operation 'size'
			OclInteger t2926 = (OclInteger)t2927.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2925 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2926);

			//--- Print result ---
			log.reportMessage(": "+t2925);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv deploymentLocation_bidirectional: deploymentLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'deploymentLocation'
			OclBag t2928 = StdLibAdapterImpl.INSTANCE.Bag(self.getDeploymentLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node x = null;
			//--- Init flag ---
			OclBoolean t2929 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2930 = StdLibAdapterImpl.INSTANCE.impl(t2928).iterator();
			while (t2930.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Node)t2930.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2932 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2931 = (OclBoolean)t2932.includes(self);
				t2929 = t2931;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2929).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2929);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv resident_size: 0<=resident->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'resident'
			OclBag t2935 = StdLibAdapterImpl.INSTANCE.Bag(self.getResident());
			// Call operation 'size'
			OclInteger t2934 = (OclInteger)t2935.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2933 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2934);

			//--- Print result ---
			log.reportMessage(": "+t2933);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Component inv resident_bidirectional: resident->forAll(x | x.implementationLocation->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'resident'
			OclBag t2936 = StdLibAdapterImpl.INSTANCE.Bag(self.getResident());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t2937 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2938 = StdLibAdapterImpl.INSTANCE.impl(t2936).iterator();
			while (t2938.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t2938.next();
				//--- Compute body ---
				// Call property 'implementationLocation'
				OclBag t2940 = StdLibAdapterImpl.INSTANCE.Bag(x.getImplementationLocation());
				// Call operation 'includes'
				OclBoolean t2939 = (OclBoolean)t2940.includes(self);
				t2937 = t2939;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2937).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2937);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t2943 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t2942 = (OclInteger)t2943.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2941 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2942);

			//--- Print result ---
			log.reportMessage(": "+t2941);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t2944 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2945 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2946 = StdLibAdapterImpl.INSTANCE.impl(t2944).iterator();
			while (t2946.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2946.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t2948 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t2947 = (OclBoolean)t2948.includes(self);
				t2945 = t2947;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2945).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2945);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t2951 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t2950 = (OclInteger)t2951.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2949 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2950);

			//--- Print result ---
			log.reportMessage(": "+t2949);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t2952 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t2953 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2954 = StdLibAdapterImpl.INSTANCE.impl(t2952).iterator();
			while (t2954.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t2954.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t2956 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t2955 = (OclBoolean)t2956.includes(self);
				t2953 = t2955;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2953).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2953);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t2959 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t2958 = (OclInteger)t2959.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2957 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2958);

			//--- Print result ---
			log.reportMessage(": "+t2957);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t2960 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t2961 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2962 = StdLibAdapterImpl.INSTANCE.impl(t2960).iterator();
			while (t2962.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t2962.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t2964 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t2963 = (OclBoolean)t2964.includes(self);
				t2961 = t2963;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2961).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2961);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t2967 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t2966 = (OclInteger)t2967.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2965 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2966);

			//--- Print result ---
			log.reportMessage(": "+t2965);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t2971 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2972 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2973 = StdLibAdapterImpl.INSTANCE.impl(t2971).iterator();
			while (t2973.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2973.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t2975 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t2974 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t2975, self));
				t2972 = t2974;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2972).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2972);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t2978 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t2977 = (OclInteger)t2978.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2976 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2977);

			//--- Print result ---
			log.reportMessage(": "+t2976);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t2979 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t2980 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2981 = StdLibAdapterImpl.INSTANCE.impl(t2979).iterator();
			while (t2981.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t2981.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t2983 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t2982 = (OclBoolean)t2983.includes(self);
				t2980 = t2982;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2980).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2980);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t2986 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t2985 = (OclInteger)t2986.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2984 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2985);

			//--- Print result ---
			log.reportMessage(": "+t2984);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t2987 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t2988 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2989 = StdLibAdapterImpl.INSTANCE.impl(t2987).iterator();
			while (t2989.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t2989.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t2991 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t2990 = (OclBoolean)t2991.includes(self);
				t2988 = t2990;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2988).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2988);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t2994 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t2993 = (OclInteger)t2994.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t2992 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t2993);

			//--- Print result ---
			log.reportMessage(": "+t2992);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t2995 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t2996 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t2997 = StdLibAdapterImpl.INSTANCE.impl(t2995).iterator();
			while (t2997.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t2997.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t2999 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t2998 = (OclBoolean)t2999.includes(self);
				t2996 = t2998;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t2996).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t2996);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3003 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3004 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3005 = StdLibAdapterImpl.INSTANCE.impl(t3003).iterator();
			while (t3005.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3005.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3007 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3006 = (OclBoolean)t3007.includes(self);
				t3004 = t3006;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3004).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3004);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3010 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3009 = (OclInteger)t3010.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3008 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3009);

			//--- Print result ---
			log.reportMessage(": "+t3008);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3011 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3012 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3013 = StdLibAdapterImpl.INSTANCE.impl(t3011).iterator();
			while (t3013.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3013.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3015 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3014 = (OclBoolean)t3015.includes(self);
				t3012 = t3014;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3012).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3012);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3018 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3017 = (OclInteger)t3018.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3016 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3017);

			//--- Print result ---
			log.reportMessage(": "+t3016);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3019 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3020 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3021 = StdLibAdapterImpl.INSTANCE.impl(t3019).iterator();
			while (t3021.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3021.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3023 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3022 = (OclBoolean)t3023.includes(self);
				t3020 = t3022;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3020).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3020);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3026 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3025 = (OclInteger)t3026.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3024 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3025);

			//--- Print result ---
			log.reportMessage(": "+t3024);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3027 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3028 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3029 = StdLibAdapterImpl.INSTANCE.impl(t3027).iterator();
			while (t3029.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3029.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3031 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3030 = (OclBoolean)t3031.includes(self);
				t3028 = t3030;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3028).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3028);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3034 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3033 = (OclInteger)t3034.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3032 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3033);

			//--- Print result ---
			log.reportMessage(": "+t3032);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3035 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3036 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3037 = StdLibAdapterImpl.INSTANCE.impl(t3035).iterator();
			while (t3037.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3037.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3039 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3038 = (OclBoolean)t3039.includes(self);
				t3036 = t3038;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3036).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3036);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3042 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3041 = (OclInteger)t3042.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3040 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3041);

			//--- Print result ---
			log.reportMessage(": "+t3040);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'generalization'
			OclBag t3045 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			// Call operation 'size'
			OclInteger t3044 = (OclInteger)t3045.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3043 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3044);

			//--- Print result ---
			log.reportMessage(": "+t3043);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'generalization'
			OclBag t3046 = StdLibAdapterImpl.INSTANCE.Bag(self.getGeneralization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t3047 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3048 = StdLibAdapterImpl.INSTANCE.impl(t3046).iterator();
			while (t3048.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t3048.next();
				//--- Compute body ---
				// Call property 'child'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t3050 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getChild();
				// Call operation 'equalTo'
				OclBoolean t3049 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3050, self));
				t3047 = t3049;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3047).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3047);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'specialization'
			OclBag t3053 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			// Call operation 'size'
			OclInteger t3052 = (OclInteger)t3053.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3051 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3052);

			//--- Print result ---
			log.reportMessage(": "+t3051);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'specialization'
			OclBag t3054 = StdLibAdapterImpl.INSTANCE.Bag(self.getSpecialization());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization x = null;
			//--- Init flag ---
			OclBoolean t3055 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3056 = StdLibAdapterImpl.INSTANCE.impl(t3054).iterator();
			while (t3056.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Generalization)t3056.next();
				//--- Compute body ---
				// Call property 'parent'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t3058 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)x.getParent();
				// Call operation 'equalTo'
				OclBoolean t3057 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3058, self));
				t3055 = t3057;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3055).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3055);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::GeneralizableElement inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {
			// Call property 'powertype'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier t3061 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Classifier)self.getPowertype();
			// Call property 'powertypeRange'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement t3060 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.GeneralizableElement)t3061.getPowertypeRange();
			// Call operation 'equalTo'
			OclBoolean t3059 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3060, self));

			//--- Print result ---
			log.reportMessage(": "+t3059);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3064 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3063 = (OclInteger)t3064.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3062 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3063);

			//--- Print result ---
			log.reportMessage(": "+t3062);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3065 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3066 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3067 = StdLibAdapterImpl.INSTANCE.impl(t3065).iterator();
			while (t3067.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3067.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3069 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3068 = (OclBoolean)t3069.includes(self);
				t3066 = t3068;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3066).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3066);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3072 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3071 = (OclInteger)t3072.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3070 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3071);

			//--- Print result ---
			log.reportMessage(": "+t3070);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3073 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3074 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3075 = StdLibAdapterImpl.INSTANCE.impl(t3073).iterator();
			while (t3075.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3075.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3077 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3076 = (OclBoolean)t3077.includes(self);
				t3074 = t3076;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3074).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3074);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3080 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3079 = (OclInteger)t3080.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3078 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3079);

			//--- Print result ---
			log.reportMessage(": "+t3078);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3081 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3082 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3083 = StdLibAdapterImpl.INSTANCE.impl(t3081).iterator();
			while (t3083.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3083.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3085 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3084 = (OclBoolean)t3085.includes(self);
				t3082 = t3084;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3082).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3082);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3088 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3087 = (OclInteger)t3088.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3086 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3087);

			//--- Print result ---
			log.reportMessage(": "+t3086);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3092 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3093 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3094 = StdLibAdapterImpl.INSTANCE.impl(t3092).iterator();
			while (t3094.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3094.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3096 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3095 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3096, self));
				t3093 = t3095;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3093).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3093);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3099 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3098 = (OclInteger)t3099.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3097 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3098);

			//--- Print result ---
			log.reportMessage(": "+t3097);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3100 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3101 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3102 = StdLibAdapterImpl.INSTANCE.impl(t3100).iterator();
			while (t3102.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3102.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3104 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3103 = (OclBoolean)t3104.includes(self);
				t3101 = t3103;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3101).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3101);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3107 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3106 = (OclInteger)t3107.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3105 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3106);

			//--- Print result ---
			log.reportMessage(": "+t3105);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3108 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3109 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3110 = StdLibAdapterImpl.INSTANCE.impl(t3108).iterator();
			while (t3110.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3110.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3112 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3111 = (OclBoolean)t3112.includes(self);
				t3109 = t3111;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3109).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3109);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3115 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3114 = (OclInteger)t3115.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3113 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3114);

			//--- Print result ---
			log.reportMessage(": "+t3113);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3116 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3117 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3118 = StdLibAdapterImpl.INSTANCE.impl(t3116).iterator();
			while (t3118.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3118.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3120 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3119 = (OclBoolean)t3120.includes(self);
				t3117 = t3119;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3117).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3117);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3124 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3125 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3126 = StdLibAdapterImpl.INSTANCE.impl(t3124).iterator();
			while (t3126.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3126.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3128 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3127 = (OclBoolean)t3128.includes(self);
				t3125 = t3127;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3125).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3125);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3131 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3130 = (OclInteger)t3131.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3129 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3130);

			//--- Print result ---
			log.reportMessage(": "+t3129);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3132 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3133 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3134 = StdLibAdapterImpl.INSTANCE.impl(t3132).iterator();
			while (t3134.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3134.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3136 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3135 = (OclBoolean)t3136.includes(self);
				t3133 = t3135;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3133).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3133);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3139 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3138 = (OclInteger)t3139.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3137 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3138);

			//--- Print result ---
			log.reportMessage(": "+t3137);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3140 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3141 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3142 = StdLibAdapterImpl.INSTANCE.impl(t3140).iterator();
			while (t3142.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3142.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3144 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3143 = (OclBoolean)t3144.includes(self);
				t3141 = t3143;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3141).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3141);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3147 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3146 = (OclInteger)t3147.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3145 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3146);

			//--- Print result ---
			log.reportMessage(": "+t3145);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3148 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3149 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3150 = StdLibAdapterImpl.INSTANCE.impl(t3148).iterator();
			while (t3150.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3150.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3152 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3151 = (OclBoolean)t3152.includes(self);
				t3149 = t3151;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3149).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3149);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3155 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3154 = (OclInteger)t3155.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3153 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3154);

			//--- Print result ---
			log.reportMessage(": "+t3153);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3156 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3157 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3158 = StdLibAdapterImpl.INSTANCE.impl(t3156).iterator();
			while (t3158.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3158.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3160 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3159 = (OclBoolean)t3160.includes(self);
				t3157 = t3159;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3157).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3157);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3163 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3162 = (OclInteger)t3163.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3161 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3162);

			//--- Print result ---
			log.reportMessage(": "+t3161);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv constrainedStereotye_bidirectional: Set{constrainedStereotye}->forAll(x | x.stereotypeConstraint->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t3164 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'constrainedStereotye'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype t3165 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)self.getConstrainedStereotye();
			t3164 = t3164.including(t3165);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3166 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3167 = StdLibAdapterImpl.INSTANCE.impl(t3164).iterator();
			while (t3167.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3167.next();
				//--- Compute body ---
				// Call property 'stereotypeConstraint'
				OclBag t3169 = StdLibAdapterImpl.INSTANCE.Bag(x.getStereotypeConstraint());
				// Call operation 'includes'
				OclBoolean t3168 = (OclBoolean)t3169.includes(self);
				t3166 = t3168;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3166).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3166);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv constrainedElement_size: 0<=constrainedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constrainedElement'
			OclSequence t3172 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConstrainedElement());
			// Call operation 'size'
			OclInteger t3171 = (OclInteger)t3172.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3170 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3171);

			//--- Print result ---
			log.reportMessage(": "+t3170);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Constraint inv constrainedElement_bidirectional: constrainedElement->forAll(x | x.constraint->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constrainedElement'
			OclSequence t3173 = StdLibAdapterImpl.INSTANCE.Sequence(self.getConstrainedElement());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t3174 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3175 = StdLibAdapterImpl.INSTANCE.impl(t3173).iterator();
			while (t3175.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t3175.next();
				//--- Compute body ---
				// Call property 'constraint'
				OclBag t3177 = StdLibAdapterImpl.INSTANCE.Bag(x.getConstraint());
				// Call operation 'includes'
				OclBoolean t3176 = (OclBoolean)t3177.includes(self);
				t3174 = t3176;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3174).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3174);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3180 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3179 = (OclInteger)t3180.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3178 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3179);

			//--- Print result ---
			log.reportMessage(": "+t3178);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3181 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3182 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3183 = StdLibAdapterImpl.INSTANCE.impl(t3181).iterator();
			while (t3183.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3183.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3185 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3184 = (OclBoolean)t3185.includes(self);
				t3182 = t3184;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3182).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3182);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3188 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3187 = (OclInteger)t3188.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3186 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3187);

			//--- Print result ---
			log.reportMessage(": "+t3186);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3189 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3190 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3191 = StdLibAdapterImpl.INSTANCE.impl(t3189).iterator();
			while (t3191.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3191.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3193 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3192 = (OclBoolean)t3193.includes(self);
				t3190 = t3192;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3190).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3190);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3196 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3195 = (OclInteger)t3196.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3194 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3195);

			//--- Print result ---
			log.reportMessage(": "+t3194);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3197 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3198 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3199 = StdLibAdapterImpl.INSTANCE.impl(t3197).iterator();
			while (t3199.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3199.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3201 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3200 = (OclBoolean)t3201.includes(self);
				t3198 = t3200;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3198).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3198);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3204 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3203 = (OclInteger)t3204.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3202 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3203);

			//--- Print result ---
			log.reportMessage(": "+t3202);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3208 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3209 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3210 = StdLibAdapterImpl.INSTANCE.impl(t3208).iterator();
			while (t3210.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3210.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3212 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3211 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3212, self));
				t3209 = t3211;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3209).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3209);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3215 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3214 = (OclInteger)t3215.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3213 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3214);

			//--- Print result ---
			log.reportMessage(": "+t3213);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3216 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3217 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3218 = StdLibAdapterImpl.INSTANCE.impl(t3216).iterator();
			while (t3218.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3218.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3220 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3219 = (OclBoolean)t3220.includes(self);
				t3217 = t3219;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3217).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3217);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3223 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3222 = (OclInteger)t3223.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3221 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3222);

			//--- Print result ---
			log.reportMessage(": "+t3221);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3224 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3225 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3226 = StdLibAdapterImpl.INSTANCE.impl(t3224).iterator();
			while (t3226.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3226.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3228 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3227 = (OclBoolean)t3228.includes(self);
				t3225 = t3227;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3225).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3225);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3231 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3230 = (OclInteger)t3231.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3229 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3230);

			//--- Print result ---
			log.reportMessage(": "+t3229);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3232 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3233 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3234 = StdLibAdapterImpl.INSTANCE.impl(t3232).iterator();
			while (t3234.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3234.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3236 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3235 = (OclBoolean)t3236.includes(self);
				t3233 = t3235;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3233).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3233);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3240 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3241 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3242 = StdLibAdapterImpl.INSTANCE.impl(t3240).iterator();
			while (t3242.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3242.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3244 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3243 = (OclBoolean)t3244.includes(self);
				t3241 = t3243;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3241).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3241);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3247 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3246 = (OclInteger)t3247.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3245 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3246);

			//--- Print result ---
			log.reportMessage(": "+t3245);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3248 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3249 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3250 = StdLibAdapterImpl.INSTANCE.impl(t3248).iterator();
			while (t3250.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3250.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3252 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3251 = (OclBoolean)t3252.includes(self);
				t3249 = t3251;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3249).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3249);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3255 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3254 = (OclInteger)t3255.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3253 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3254);

			//--- Print result ---
			log.reportMessage(": "+t3253);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3256 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3257 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3258 = StdLibAdapterImpl.INSTANCE.impl(t3256).iterator();
			while (t3258.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3258.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3260 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3259 = (OclBoolean)t3260.includes(self);
				t3257 = t3259;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3257).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3257);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3263 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3262 = (OclInteger)t3263.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3261 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3262);

			//--- Print result ---
			log.reportMessage(": "+t3261);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3264 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3265 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3266 = StdLibAdapterImpl.INSTANCE.impl(t3264).iterator();
			while (t3266.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3266.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3268 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3267 = (OclBoolean)t3268.includes(self);
				t3265 = t3267;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3265).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3265);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3271 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3270 = (OclInteger)t3271.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3269 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3270);

			//--- Print result ---
			log.reportMessage(": "+t3269);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3272 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3273 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3274 = StdLibAdapterImpl.INSTANCE.impl(t3272).iterator();
			while (t3274.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3274.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3276 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3275 = (OclBoolean)t3276.includes(self);
				t3273 = t3275;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3273).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3273);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::ModelElement inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3279 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3278 = (OclInteger)t3279.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3277 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3278);

			//--- Print result ---
			log.reportMessage(": "+t3277);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Namespace self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3282 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3281 = (OclInteger)t3282.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3280 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3281);

			//--- Print result ---
			log.reportMessage(": "+t3280);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3283 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3284 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3285 = StdLibAdapterImpl.INSTANCE.impl(t3283).iterator();
			while (t3285.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3285.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3287 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3286 = (OclBoolean)t3287.includes(self);
				t3284 = t3286;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3284).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3284);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3290 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3289 = (OclInteger)t3290.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3288 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3289);

			//--- Print result ---
			log.reportMessage(": "+t3288);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3291 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3292 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3293 = StdLibAdapterImpl.INSTANCE.impl(t3291).iterator();
			while (t3293.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3293.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3295 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3294 = (OclBoolean)t3295.includes(self);
				t3292 = t3294;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3292).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3292);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3298 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3297 = (OclInteger)t3298.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3296 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3297);

			//--- Print result ---
			log.reportMessage(": "+t3296);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3299 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3300 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3301 = StdLibAdapterImpl.INSTANCE.impl(t3299).iterator();
			while (t3301.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3301.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3303 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3302 = (OclBoolean)t3303.includes(self);
				t3300 = t3302;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3300).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3300);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3306 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3305 = (OclInteger)t3306.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3304 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3305);

			//--- Print result ---
			log.reportMessage(": "+t3304);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3310 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3311 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3312 = StdLibAdapterImpl.INSTANCE.impl(t3310).iterator();
			while (t3312.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3312.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3314 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3313 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3314, self));
				t3311 = t3313;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3311).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3311);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3317 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3316 = (OclInteger)t3317.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3315 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3316);

			//--- Print result ---
			log.reportMessage(": "+t3315);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3318 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3319 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3320 = StdLibAdapterImpl.INSTANCE.impl(t3318).iterator();
			while (t3320.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3320.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3322 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3321 = (OclBoolean)t3322.includes(self);
				t3319 = t3321;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3319).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3319);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3325 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3324 = (OclInteger)t3325.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3323 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3324);

			//--- Print result ---
			log.reportMessage(": "+t3323);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3326 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3327 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3328 = StdLibAdapterImpl.INSTANCE.impl(t3326).iterator();
			while (t3328.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3328.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3330 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3329 = (OclBoolean)t3330.includes(self);
				t3327 = t3329;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3327).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3327);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3333 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3332 = (OclInteger)t3333.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3331 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3332);

			//--- Print result ---
			log.reportMessage(": "+t3331);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3334 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3335 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3336 = StdLibAdapterImpl.INSTANCE.impl(t3334).iterator();
			while (t3336.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3336.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3338 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3337 = (OclBoolean)t3338.includes(self);
				t3335 = t3337;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3335).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3335);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3342 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3343 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3344 = StdLibAdapterImpl.INSTANCE.impl(t3342).iterator();
			while (t3344.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3344.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3346 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3345 = (OclBoolean)t3346.includes(self);
				t3343 = t3345;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3343).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3343);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3349 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3348 = (OclInteger)t3349.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3347 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3348);

			//--- Print result ---
			log.reportMessage(": "+t3347);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3350 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3351 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3352 = StdLibAdapterImpl.INSTANCE.impl(t3350).iterator();
			while (t3352.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3352.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3354 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3353 = (OclBoolean)t3354.includes(self);
				t3351 = t3353;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3351).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3351);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3357 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3356 = (OclInteger)t3357.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3355 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3356);

			//--- Print result ---
			log.reportMessage(": "+t3355);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3358 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3359 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3360 = StdLibAdapterImpl.INSTANCE.impl(t3358).iterator();
			while (t3360.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3360.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3362 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3361 = (OclBoolean)t3362.includes(self);
				t3359 = t3361;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3359).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3359);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3365 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3364 = (OclInteger)t3365.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3363 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3364);

			//--- Print result ---
			log.reportMessage(": "+t3363);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3366 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3367 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3368 = StdLibAdapterImpl.INSTANCE.impl(t3366).iterator();
			while (t3368.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3368.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3370 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3369 = (OclBoolean)t3370.includes(self);
				t3367 = t3369;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3367).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3367);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3373 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3372 = (OclInteger)t3373.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3371 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3372);

			//--- Print result ---
			log.reportMessage(": "+t3371);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3374 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3375 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3376 = StdLibAdapterImpl.INSTANCE.impl(t3374).iterator();
			while (t3376.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3376.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3378 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3377 = (OclBoolean)t3378.includes(self);
				t3375 = t3377;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3375).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3375);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3381 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3380 = (OclInteger)t3381.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3379 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3380);

			//--- Print result ---
			log.reportMessage(": "+t3379);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'ownedElement'
			OclBag t3384 = StdLibAdapterImpl.INSTANCE.Bag(self.getOwnedElement());
			// Call operation 'size'
			OclInteger t3383 = (OclInteger)t3384.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3382 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3383);

			//--- Print result ---
			log.reportMessage(": "+t3382);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Namespace inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3388 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3389 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3390 = StdLibAdapterImpl.INSTANCE.impl(t3388).iterator();
			while (t3390.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3390.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3392 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3391 = (OclBoolean)t3392.includes(self);
				t3389 = t3391;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3389).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3389);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3395 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3394 = (OclInteger)t3395.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3393 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3394);

			//--- Print result ---
			log.reportMessage(": "+t3393);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3396 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3397 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3398 = StdLibAdapterImpl.INSTANCE.impl(t3396).iterator();
			while (t3398.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3398.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3400 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3399 = (OclBoolean)t3400.includes(self);
				t3397 = t3399;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3397).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3397);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3403 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3402 = (OclInteger)t3403.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3401 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3402);

			//--- Print result ---
			log.reportMessage(": "+t3401);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3404 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3405 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3406 = StdLibAdapterImpl.INSTANCE.impl(t3404).iterator();
			while (t3406.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3406.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3408 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3407 = (OclBoolean)t3408.includes(self);
				t3405 = t3407;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3405).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3405);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3411 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3410 = (OclInteger)t3411.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3409 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3410);

			//--- Print result ---
			log.reportMessage(": "+t3409);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3415 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3416 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3417 = StdLibAdapterImpl.INSTANCE.impl(t3415).iterator();
			while (t3417.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3417.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3419 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3418 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3419, self));
				t3416 = t3418;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3416).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3416);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3422 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3421 = (OclInteger)t3422.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3420 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3421);

			//--- Print result ---
			log.reportMessage(": "+t3420);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3423 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3424 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3425 = StdLibAdapterImpl.INSTANCE.impl(t3423).iterator();
			while (t3425.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3425.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3427 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3426 = (OclBoolean)t3427.includes(self);
				t3424 = t3426;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3424).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3424);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3430 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3429 = (OclInteger)t3430.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3428 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3429);

			//--- Print result ---
			log.reportMessage(": "+t3428);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3431 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3432 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3433 = StdLibAdapterImpl.INSTANCE.impl(t3431).iterator();
			while (t3433.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3433.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3435 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3434 = (OclBoolean)t3435.includes(self);
				t3432 = t3434;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3432).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3432);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3438 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3437 = (OclInteger)t3438.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3436 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3437);

			//--- Print result ---
			log.reportMessage(": "+t3436);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3439 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3440 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3441 = StdLibAdapterImpl.INSTANCE.impl(t3439).iterator();
			while (t3441.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3441.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3443 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3442 = (OclBoolean)t3443.includes(self);
				t3440 = t3442;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3440).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3440);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3447 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3448 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3449 = StdLibAdapterImpl.INSTANCE.impl(t3447).iterator();
			while (t3449.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3449.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3451 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3450 = (OclBoolean)t3451.includes(self);
				t3448 = t3450;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3448).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3448);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3454 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3453 = (OclInteger)t3454.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3452 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3453);

			//--- Print result ---
			log.reportMessage(": "+t3452);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3455 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3456 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3457 = StdLibAdapterImpl.INSTANCE.impl(t3455).iterator();
			while (t3457.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3457.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3459 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3458 = (OclBoolean)t3459.includes(self);
				t3456 = t3458;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3456).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3456);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3462 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3461 = (OclInteger)t3462.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3460 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3461);

			//--- Print result ---
			log.reportMessage(": "+t3460);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3463 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3464 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3465 = StdLibAdapterImpl.INSTANCE.impl(t3463).iterator();
			while (t3465.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3465.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3467 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3466 = (OclBoolean)t3467.includes(self);
				t3464 = t3466;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3464).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3464);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3470 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3469 = (OclInteger)t3470.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3468 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3469);

			//--- Print result ---
			log.reportMessage(": "+t3468);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3471 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3472 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3473 = StdLibAdapterImpl.INSTANCE.impl(t3471).iterator();
			while (t3473.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3473.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3475 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3474 = (OclBoolean)t3475.includes(self);
				t3472 = t3474;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3472).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3472);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3478 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3477 = (OclInteger)t3478.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3476 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3477);

			//--- Print result ---
			log.reportMessage(": "+t3476);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3479 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3480 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3481 = StdLibAdapterImpl.INSTANCE.impl(t3479).iterator();
			while (t3481.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3481.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3483 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3482 = (OclBoolean)t3483.includes(self);
				t3480 = t3482;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3480).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3480);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3486 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3485 = (OclInteger)t3486.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3484 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3485);

			//--- Print result ---
			log.reportMessage(": "+t3484);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv annotatedElement_size: 0<=annotatedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'annotatedElement'
			OclBag t3489 = StdLibAdapterImpl.INSTANCE.Bag(self.getAnnotatedElement());
			// Call operation 'size'
			OclInteger t3488 = (OclInteger)t3489.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3487 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3488);

			//--- Print result ---
			log.reportMessage(": "+t3487);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Comment inv annotatedElement_bidirectional: annotatedElement->forAll(x | x.comment->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'annotatedElement'
			OclBag t3490 = StdLibAdapterImpl.INSTANCE.Bag(self.getAnnotatedElement());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t3491 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3492 = StdLibAdapterImpl.INSTANCE.impl(t3490).iterator();
			while (t3492.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t3492.next();
				//--- Compute body ---
				// Call property 'comment'
				OclBag t3494 = StdLibAdapterImpl.INSTANCE.Bag(x.getComment());
				// Call operation 'includes'
				OclBoolean t3493 = (OclBoolean)t3494.includes(self);
				t3491 = t3493;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3491).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3491);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::PresentationElement inv subject_size: 0<=subject->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'subject'
			OclBag t3497 = StdLibAdapterImpl.INSTANCE.Bag(self.getSubject());
			// Call operation 'size'
			OclInteger t3496 = (OclInteger)t3497.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3495 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3496);

			//--- Print result ---
			log.reportMessage(": "+t3495);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::PresentationElement inv subject_bidirectional: subject->forAll(x | x.presentation->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'subject'
			OclBag t3498 = StdLibAdapterImpl.INSTANCE.Bag(self.getSubject());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t3499 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3500 = StdLibAdapterImpl.INSTANCE.impl(t3498).iterator();
			while (t3500.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t3500.next();
				//--- Compute body ---
				// Call property 'presentation'
				OclBag t3502 = StdLibAdapterImpl.INSTANCE.Bag(x.getPresentation());
				// Call operation 'includes'
				OclBoolean t3501 = (OclBoolean)t3502.includes(self);
				t3499 = t3501;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3499).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3499);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3505 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3504 = (OclInteger)t3505.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3503 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3504);

			//--- Print result ---
			log.reportMessage(": "+t3503);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3506 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3507 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3508 = StdLibAdapterImpl.INSTANCE.impl(t3506).iterator();
			while (t3508.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3508.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3510 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3509 = (OclBoolean)t3510.includes(self);
				t3507 = t3509;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3507).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3507);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3513 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3512 = (OclInteger)t3513.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3511 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3512);

			//--- Print result ---
			log.reportMessage(": "+t3511);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3514 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3515 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3516 = StdLibAdapterImpl.INSTANCE.impl(t3514).iterator();
			while (t3516.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3516.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3518 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3517 = (OclBoolean)t3518.includes(self);
				t3515 = t3517;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3515).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3515);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3521 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3520 = (OclInteger)t3521.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3519 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3520);

			//--- Print result ---
			log.reportMessage(": "+t3519);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3522 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3523 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3524 = StdLibAdapterImpl.INSTANCE.impl(t3522).iterator();
			while (t3524.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3524.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3526 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3525 = (OclBoolean)t3526.includes(self);
				t3523 = t3525;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3523).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3523);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3529 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3528 = (OclInteger)t3529.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3527 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3528);

			//--- Print result ---
			log.reportMessage(": "+t3527);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3533 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3534 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3535 = StdLibAdapterImpl.INSTANCE.impl(t3533).iterator();
			while (t3535.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3535.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3537 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3536 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3537, self));
				t3534 = t3536;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3534).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3534);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3540 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3539 = (OclInteger)t3540.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3538 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3539);

			//--- Print result ---
			log.reportMessage(": "+t3538);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3541 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3542 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3543 = StdLibAdapterImpl.INSTANCE.impl(t3541).iterator();
			while (t3543.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3543.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3545 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3544 = (OclBoolean)t3545.includes(self);
				t3542 = t3544;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3542).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3542);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3548 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3547 = (OclInteger)t3548.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3546 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3547);

			//--- Print result ---
			log.reportMessage(": "+t3546);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3549 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3550 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3551 = StdLibAdapterImpl.INSTANCE.impl(t3549).iterator();
			while (t3551.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3551.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3553 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3552 = (OclBoolean)t3553.includes(self);
				t3550 = t3552;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3550).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3550);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3556 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3555 = (OclInteger)t3556.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3554 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3555);

			//--- Print result ---
			log.reportMessage(": "+t3554);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3557 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3558 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3559 = StdLibAdapterImpl.INSTANCE.impl(t3557).iterator();
			while (t3559.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3559.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3561 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3560 = (OclBoolean)t3561.includes(self);
				t3558 = t3560;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3558).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3558);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3565 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3566 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3567 = StdLibAdapterImpl.INSTANCE.impl(t3565).iterator();
			while (t3567.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3567.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3569 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3568 = (OclBoolean)t3569.includes(self);
				t3566 = t3568;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3566).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3566);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3572 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3571 = (OclInteger)t3572.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3570 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3571);

			//--- Print result ---
			log.reportMessage(": "+t3570);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3573 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3574 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3575 = StdLibAdapterImpl.INSTANCE.impl(t3573).iterator();
			while (t3575.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3575.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3577 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3576 = (OclBoolean)t3577.includes(self);
				t3574 = t3576;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3574).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3574);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3580 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3579 = (OclInteger)t3580.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3578 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3579);

			//--- Print result ---
			log.reportMessage(": "+t3578);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3581 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3582 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3583 = StdLibAdapterImpl.INSTANCE.impl(t3581).iterator();
			while (t3583.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3583.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3585 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3584 = (OclBoolean)t3585.includes(self);
				t3582 = t3584;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3582).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3582);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3588 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3587 = (OclInteger)t3588.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3586 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3587);

			//--- Print result ---
			log.reportMessage(": "+t3586);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3589 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3590 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3591 = StdLibAdapterImpl.INSTANCE.impl(t3589).iterator();
			while (t3591.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3591.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3593 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3592 = (OclBoolean)t3593.includes(self);
				t3590 = t3592;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3590).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3590);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3596 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3595 = (OclInteger)t3596.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3594 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3595);

			//--- Print result ---
			log.reportMessage(": "+t3594);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3597 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3598 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3599 = StdLibAdapterImpl.INSTANCE.impl(t3597).iterator();
			while (t3599.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3599.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3601 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3600 = (OclBoolean)t3601.includes(self);
				t3598 = t3600;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3598).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3598);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3604 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3603 = (OclInteger)t3604.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3602 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3603);

			//--- Print result ---
			log.reportMessage(": "+t3602);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv tiedElement_size: 0<=tiedElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tiedElement'
			OclBag t3607 = StdLibAdapterImpl.INSTANCE.Bag(self.getTiedElement());
			// Call operation 'size'
			OclInteger t3606 = (OclInteger)t3607.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3605 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3606);

			//--- Print result ---
			log.reportMessage(": "+t3605);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Tie inv tiedElement_bidirectional: tiedElement->forAll(x | x.tie->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tiedElement'
			OclBag t3608 = StdLibAdapterImpl.INSTANCE.Bag(self.getTiedElement());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement x = null;
			//--- Init flag ---
			OclBoolean t3609 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3610 = StdLibAdapterImpl.INSTANCE.impl(t3608).iterator();
			while (t3610.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)t3610.next();
				//--- Compute body ---
				// Call property 'tie'
				OclBag t3612 = StdLibAdapterImpl.INSTANCE.Bag(x.getTie());
				// Call operation 'includes'
				OclBoolean t3611 = (OclBoolean)t3612.includes(self);
				t3609 = t3611;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3609).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3609);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.TemplateParameter self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::TemplateParameter inv defaultElement_size: 0<=defaultElement->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'defaultElement'
			OclBag t3615 = StdLibAdapterImpl.INSTANCE.Bag(self.getDefaultElement());
			// Call operation 'size'
			OclInteger t3614 = (OclInteger)t3615.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3613 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3614);

			//--- Print result ---
			log.reportMessage(": "+t3613);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::TemplateParameter inv parameter_size: 0<=parameter->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'parameter'
			OclBag t3618 = StdLibAdapterImpl.INSTANCE.Bag(self.getParameter());
			// Call operation 'size'
			OclInteger t3617 = (OclInteger)t3618.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3616 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3617);

			//--- Print result ---
			log.reportMessage(": "+t3616);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3621 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3620 = (OclInteger)t3621.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3619 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3620);

			//--- Print result ---
			log.reportMessage(": "+t3619);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3622 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3623 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3624 = StdLibAdapterImpl.INSTANCE.impl(t3622).iterator();
			while (t3624.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3624.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3626 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3625 = (OclBoolean)t3626.includes(self);
				t3623 = t3625;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3623).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3623);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3629 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3628 = (OclInteger)t3629.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3627 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3628);

			//--- Print result ---
			log.reportMessage(": "+t3627);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3630 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3631 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3632 = StdLibAdapterImpl.INSTANCE.impl(t3630).iterator();
			while (t3632.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3632.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3634 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3633 = (OclBoolean)t3634.includes(self);
				t3631 = t3633;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3631).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3631);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3637 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3636 = (OclInteger)t3637.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3635 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3636);

			//--- Print result ---
			log.reportMessage(": "+t3635);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3638 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3639 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3640 = StdLibAdapterImpl.INSTANCE.impl(t3638).iterator();
			while (t3640.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3640.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3642 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3641 = (OclBoolean)t3642.includes(self);
				t3639 = t3641;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3639).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3639);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3645 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3644 = (OclInteger)t3645.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3643 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3644);

			//--- Print result ---
			log.reportMessage(": "+t3643);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3649 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3650 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3651 = StdLibAdapterImpl.INSTANCE.impl(t3649).iterator();
			while (t3651.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3651.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3653 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3652 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3653, self));
				t3650 = t3652;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3650).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3650);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3656 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3655 = (OclInteger)t3656.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3654 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3655);

			//--- Print result ---
			log.reportMessage(": "+t3654);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3657 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3658 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3659 = StdLibAdapterImpl.INSTANCE.impl(t3657).iterator();
			while (t3659.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3659.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3661 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3660 = (OclBoolean)t3661.includes(self);
				t3658 = t3660;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3658).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3658);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3664 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3663 = (OclInteger)t3664.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3662 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3663);

			//--- Print result ---
			log.reportMessage(": "+t3662);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3665 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3666 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3667 = StdLibAdapterImpl.INSTANCE.impl(t3665).iterator();
			while (t3667.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3667.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3669 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3668 = (OclBoolean)t3669.includes(self);
				t3666 = t3668;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3666).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3666);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3672 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3671 = (OclInteger)t3672.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3670 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3671);

			//--- Print result ---
			log.reportMessage(": "+t3670);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3673 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3674 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3675 = StdLibAdapterImpl.INSTANCE.impl(t3673).iterator();
			while (t3675.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3675.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3677 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3676 = (OclBoolean)t3677.includes(self);
				t3674 = t3676;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3674).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3674);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3681 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3682 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3683 = StdLibAdapterImpl.INSTANCE.impl(t3681).iterator();
			while (t3683.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3683.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3685 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3684 = (OclBoolean)t3685.includes(self);
				t3682 = t3684;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3682).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3682);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3688 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3687 = (OclInteger)t3688.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3686 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3687);

			//--- Print result ---
			log.reportMessage(": "+t3686);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3689 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3690 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3691 = StdLibAdapterImpl.INSTANCE.impl(t3689).iterator();
			while (t3691.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3691.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3693 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3692 = (OclBoolean)t3693.includes(self);
				t3690 = t3692;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3690).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3690);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3696 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3695 = (OclInteger)t3696.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3694 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3695);

			//--- Print result ---
			log.reportMessage(": "+t3694);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3697 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3698 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3699 = StdLibAdapterImpl.INSTANCE.impl(t3697).iterator();
			while (t3699.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3699.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3701 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3700 = (OclBoolean)t3701.includes(self);
				t3698 = t3700;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3698).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3698);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3704 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3703 = (OclInteger)t3704.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3702 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3703);

			//--- Print result ---
			log.reportMessage(": "+t3702);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3705 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3706 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3707 = StdLibAdapterImpl.INSTANCE.impl(t3705).iterator();
			while (t3707.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3707.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3709 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3708 = (OclBoolean)t3709.includes(self);
				t3706 = t3708;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3706).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3706);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3712 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3711 = (OclInteger)t3712.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3710 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3711);

			//--- Print result ---
			log.reportMessage(": "+t3710);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3713 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3714 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3715 = StdLibAdapterImpl.INSTANCE.impl(t3713).iterator();
			while (t3715.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3715.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3717 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3716 = (OclBoolean)t3717.includes(self);
				t3714 = t3716;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3714).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3714);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3720 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3719 = (OclInteger)t3720.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3718 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3719);

			//--- Print result ---
			log.reportMessage(": "+t3718);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv sendAction_size: 0<=sendAction->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sendAction'
			OclBag t3723 = StdLibAdapterImpl.INSTANCE.Bag(self.getSendAction());
			// Call operation 'size'
			OclInteger t3722 = (OclInteger)t3723.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3721 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3722);

			//--- Print result ---
			log.reportMessage(": "+t3721);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Signal inv sendAction_bidirectional: sendAction->forAll(x | x.signal=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sendAction'
			OclBag t3724 = StdLibAdapterImpl.INSTANCE.Bag(self.getSendAction());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction x = null;
			//--- Init flag ---
			OclBoolean t3725 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3726 = StdLibAdapterImpl.INSTANCE.impl(t3724).iterator();
			while (t3726.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction)t3726.next();
				//--- Compute body ---
				// Call property 'signal'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal t3728 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal)x.getSignal();
				// Call operation 'equalTo'
				OclBoolean t3727 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3728, self));
				t3725 = t3727;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3725).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3725);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.CallAction self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3731 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3730 = (OclInteger)t3731.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3729 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3730);

			//--- Print result ---
			log.reportMessage(": "+t3729);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3732 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3733 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3734 = StdLibAdapterImpl.INSTANCE.impl(t3732).iterator();
			while (t3734.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3734.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3736 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3735 = (OclBoolean)t3736.includes(self);
				t3733 = t3735;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3733).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3733);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3739 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3738 = (OclInteger)t3739.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3737 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3738);

			//--- Print result ---
			log.reportMessage(": "+t3737);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3740 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3741 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3742 = StdLibAdapterImpl.INSTANCE.impl(t3740).iterator();
			while (t3742.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3742.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3744 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3743 = (OclBoolean)t3744.includes(self);
				t3741 = t3743;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3741).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3741);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3747 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3746 = (OclInteger)t3747.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3745 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3746);

			//--- Print result ---
			log.reportMessage(": "+t3745);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3748 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3749 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3750 = StdLibAdapterImpl.INSTANCE.impl(t3748).iterator();
			while (t3750.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3750.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3752 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3751 = (OclBoolean)t3752.includes(self);
				t3749 = t3751;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3749).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3749);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3755 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3754 = (OclInteger)t3755.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3753 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3754);

			//--- Print result ---
			log.reportMessage(": "+t3753);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3759 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3760 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3761 = StdLibAdapterImpl.INSTANCE.impl(t3759).iterator();
			while (t3761.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3761.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3763 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3762 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3763, self));
				t3760 = t3762;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3760).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3760);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3766 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3765 = (OclInteger)t3766.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3764 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3765);

			//--- Print result ---
			log.reportMessage(": "+t3764);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3767 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3768 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3769 = StdLibAdapterImpl.INSTANCE.impl(t3767).iterator();
			while (t3769.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3769.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3771 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3770 = (OclBoolean)t3771.includes(self);
				t3768 = t3770;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3768).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3768);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3774 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3773 = (OclInteger)t3774.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3772 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3773);

			//--- Print result ---
			log.reportMessage(": "+t3772);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3775 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3776 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3777 = StdLibAdapterImpl.INSTANCE.impl(t3775).iterator();
			while (t3777.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3777.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3779 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3778 = (OclBoolean)t3779.includes(self);
				t3776 = t3778;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3776).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3776);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3782 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3781 = (OclInteger)t3782.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3780 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3781);

			//--- Print result ---
			log.reportMessage(": "+t3780);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3783 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3784 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3785 = StdLibAdapterImpl.INSTANCE.impl(t3783).iterator();
			while (t3785.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3785.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3787 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3786 = (OclBoolean)t3787.includes(self);
				t3784 = t3786;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3784).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3784);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3791 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3792 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3793 = StdLibAdapterImpl.INSTANCE.impl(t3791).iterator();
			while (t3793.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3793.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3795 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3794 = (OclBoolean)t3795.includes(self);
				t3792 = t3794;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3792).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3792);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3798 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3797 = (OclInteger)t3798.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3796 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3797);

			//--- Print result ---
			log.reportMessage(": "+t3796);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3799 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3800 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3801 = StdLibAdapterImpl.INSTANCE.impl(t3799).iterator();
			while (t3801.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3801.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3803 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3802 = (OclBoolean)t3803.includes(self);
				t3800 = t3802;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3800).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3800);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3806 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3805 = (OclInteger)t3806.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3804 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3805);

			//--- Print result ---
			log.reportMessage(": "+t3804);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3807 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3808 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3809 = StdLibAdapterImpl.INSTANCE.impl(t3807).iterator();
			while (t3809.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3809.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3811 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3810 = (OclBoolean)t3811.includes(self);
				t3808 = t3810;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3808).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3808);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3814 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3813 = (OclInteger)t3814.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3812 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3813);

			//--- Print result ---
			log.reportMessage(": "+t3812);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3815 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3816 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3817 = StdLibAdapterImpl.INSTANCE.impl(t3815).iterator();
			while (t3817.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3817.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3819 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3818 = (OclBoolean)t3819.includes(self);
				t3816 = t3818;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3816).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3816);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3822 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3821 = (OclInteger)t3822.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3820 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3821);

			//--- Print result ---
			log.reportMessage(": "+t3820);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3823 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3824 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3825 = StdLibAdapterImpl.INSTANCE.impl(t3823).iterator();
			while (t3825.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3825.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3827 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3826 = (OclBoolean)t3827.includes(self);
				t3824 = t3826;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3824).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3824);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3830 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3829 = (OclInteger)t3830.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3828 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3829);

			//--- Print result ---
			log.reportMessage(": "+t3828);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::CallAction inv operation_bidirectional: Set{operation}->forAll(x | x.callAction->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t3831 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'operation'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation t3832 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)self.getOperation();
			t3831 = t3831.including(t3832);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation x = null;
			//--- Init flag ---
			OclBoolean t3833 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3834 = StdLibAdapterImpl.INSTANCE.impl(t3831).iterator();
			while (t3834.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Operation)t3834.next();
				//--- Compute body ---
				// Call property 'callAction'
				OclBag t3836 = StdLibAdapterImpl.INSTANCE.Bag(x.getCallAction());
				// Call operation 'includes'
				OclBoolean t3835 = (OclBoolean)t3836.includes(self);
				t3833 = t3835;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3833).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3833);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.SendAction self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3839 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3838 = (OclInteger)t3839.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3837 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3838);

			//--- Print result ---
			log.reportMessage(": "+t3837);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3840 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3841 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3842 = StdLibAdapterImpl.INSTANCE.impl(t3840).iterator();
			while (t3842.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3842.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3844 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3843 = (OclBoolean)t3844.includes(self);
				t3841 = t3843;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3841).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3841);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3847 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3846 = (OclInteger)t3847.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3845 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3846);

			//--- Print result ---
			log.reportMessage(": "+t3845);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3848 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3849 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3850 = StdLibAdapterImpl.INSTANCE.impl(t3848).iterator();
			while (t3850.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3850.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3852 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3851 = (OclBoolean)t3852.includes(self);
				t3849 = t3851;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3849).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3849);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3855 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3854 = (OclInteger)t3855.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3853 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3854);

			//--- Print result ---
			log.reportMessage(": "+t3853);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3856 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3857 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3858 = StdLibAdapterImpl.INSTANCE.impl(t3856).iterator();
			while (t3858.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3858.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3860 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3859 = (OclBoolean)t3860.includes(self);
				t3857 = t3859;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3857).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3857);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3863 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3862 = (OclInteger)t3863.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3861 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3862);

			//--- Print result ---
			log.reportMessage(": "+t3861);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3867 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3868 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3869 = StdLibAdapterImpl.INSTANCE.impl(t3867).iterator();
			while (t3869.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3869.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3871 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3870 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3871, self));
				t3868 = t3870;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3868).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3868);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3874 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3873 = (OclInteger)t3874.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3872 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3873);

			//--- Print result ---
			log.reportMessage(": "+t3872);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3875 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3876 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3877 = StdLibAdapterImpl.INSTANCE.impl(t3875).iterator();
			while (t3877.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3877.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3879 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3878 = (OclBoolean)t3879.includes(self);
				t3876 = t3878;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3876).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3876);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3882 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3881 = (OclInteger)t3882.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3880 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3881);

			//--- Print result ---
			log.reportMessage(": "+t3880);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3883 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3884 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3885 = StdLibAdapterImpl.INSTANCE.impl(t3883).iterator();
			while (t3885.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3885.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3887 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3886 = (OclBoolean)t3887.includes(self);
				t3884 = t3886;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3884).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3884);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3890 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3889 = (OclInteger)t3890.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3888 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3889);

			//--- Print result ---
			log.reportMessage(": "+t3888);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3891 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t3892 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3893 = StdLibAdapterImpl.INSTANCE.impl(t3891).iterator();
			while (t3893.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t3893.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t3895 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t3894 = (OclBoolean)t3895.includes(self);
				t3892 = t3894;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3892).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3892);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t3899 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3900 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3901 = StdLibAdapterImpl.INSTANCE.impl(t3899).iterator();
			while (t3901.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3901.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t3903 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t3902 = (OclBoolean)t3903.includes(self);
				t3900 = t3902;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3900).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3900);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t3906 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t3905 = (OclInteger)t3906.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3904 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3905);

			//--- Print result ---
			log.reportMessage(": "+t3904);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t3907 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t3908 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3909 = StdLibAdapterImpl.INSTANCE.impl(t3907).iterator();
			while (t3909.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t3909.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t3911 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t3910 = (OclBoolean)t3911.includes(self);
				t3908 = t3910;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3908).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3908);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t3914 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t3913 = (OclInteger)t3914.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3912 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3913);

			//--- Print result ---
			log.reportMessage(": "+t3912);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t3915 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t3916 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3917 = StdLibAdapterImpl.INSTANCE.impl(t3915).iterator();
			while (t3917.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t3917.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t3919 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t3918 = (OclBoolean)t3919.includes(self);
				t3916 = t3918;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3916).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3916);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t3922 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t3921 = (OclInteger)t3922.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3920 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3921);

			//--- Print result ---
			log.reportMessage(": "+t3920);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t3923 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t3924 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3925 = StdLibAdapterImpl.INSTANCE.impl(t3923).iterator();
			while (t3925.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t3925.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t3927 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t3926 = (OclBoolean)t3927.includes(self);
				t3924 = t3926;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3924).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3924);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t3930 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t3929 = (OclInteger)t3930.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3928 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3929);

			//--- Print result ---
			log.reportMessage(": "+t3928);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t3931 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t3932 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3933 = StdLibAdapterImpl.INSTANCE.impl(t3931).iterator();
			while (t3933.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t3933.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t3935 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t3934 = (OclBoolean)t3935.includes(self);
				t3932 = t3934;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3932).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3932);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t3938 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t3937 = (OclInteger)t3938.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3936 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3937);

			//--- Print result ---
			log.reportMessage(": "+t3936);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::SendAction inv signal_bidirectional: Set{signal}->forAll(x | x.sendAction->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t3939 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'signal'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal t3940 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal)self.getSignal();
			t3939 = t3939.including(t3940);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal x = null;
			//--- Init flag ---
			OclBoolean t3941 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3942 = StdLibAdapterImpl.INSTANCE.impl(t3939).iterator();
			while (t3942.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Signal)t3942.next();
				//--- Compute body ---
				// Call property 'sendAction'
				OclBag t3944 = StdLibAdapterImpl.INSTANCE.Bag(x.getSendAction());
				// Call operation 'includes'
				OclBoolean t3943 = (OclBoolean)t3944.includes(self);
				t3941 = t3943;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3941).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3941);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Primitive self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'clientDependency'
			OclBag t3947 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			// Call operation 'size'
			OclInteger t3946 = (OclInteger)t3947.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3945 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3946);

			//--- Print result ---
			log.reportMessage(": "+t3945);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t3948 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3949 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3950 = StdLibAdapterImpl.INSTANCE.impl(t3948).iterator();
			while (t3950.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3950.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t3952 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t3951 = (OclBoolean)t3952.includes(self);
				t3949 = t3951;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3949).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3949);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t3955 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t3954 = (OclInteger)t3955.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3953 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3954);

			//--- Print result ---
			log.reportMessage(": "+t3953);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t3956 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t3957 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3958 = StdLibAdapterImpl.INSTANCE.impl(t3956).iterator();
			while (t3958.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t3958.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t3960 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t3959 = (OclBoolean)t3960.includes(self);
				t3957 = t3959;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3957).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3957);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t3963 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t3962 = (OclInteger)t3963.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3961 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3962);

			//--- Print result ---
			log.reportMessage(": "+t3961);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t3964 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t3965 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3966 = StdLibAdapterImpl.INSTANCE.impl(t3964).iterator();
			while (t3966.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t3966.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t3968 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t3967 = (OclBoolean)t3968.includes(self);
				t3965 = t3967;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3965).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3965);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t3971 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t3970 = (OclInteger)t3971.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3969 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3970);

			//--- Print result ---
			log.reportMessage(": "+t3969);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t3975 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3976 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3977 = StdLibAdapterImpl.INSTANCE.impl(t3975).iterator();
			while (t3977.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3977.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t3979 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t3978 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t3979, self));
				t3976 = t3978;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3976).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3976);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t3982 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t3981 = (OclInteger)t3982.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3980 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3981);

			//--- Print result ---
			log.reportMessage(": "+t3980);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t3983 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t3984 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3985 = StdLibAdapterImpl.INSTANCE.impl(t3983).iterator();
			while (t3985.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t3985.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t3987 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t3986 = (OclBoolean)t3987.includes(self);
				t3984 = t3986;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3984).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3984);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t3990 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t3989 = (OclInteger)t3990.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3988 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3989);

			//--- Print result ---
			log.reportMessage(": "+t3988);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t3991 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t3992 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t3993 = StdLibAdapterImpl.INSTANCE.impl(t3991).iterator();
			while (t3993.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t3993.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t3995 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t3994 = (OclBoolean)t3995.includes(self);
				t3992 = t3994;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t3992).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t3992);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t3998 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t3997 = (OclInteger)t3998.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t3996 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t3997);

			//--- Print result ---
			log.reportMessage(": "+t3996);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t3999 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t4000 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4001 = StdLibAdapterImpl.INSTANCE.impl(t3999).iterator();
			while (t4001.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t4001.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t4003 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t4002 = (OclBoolean)t4003.includes(self);
				t4000 = t4002;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4000).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4000);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t4007 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t4008 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4009 = StdLibAdapterImpl.INSTANCE.impl(t4007).iterator();
			while (t4009.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t4009.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t4011 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t4010 = (OclBoolean)t4011.includes(self);
				t4008 = t4010;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4008).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4008);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t4014 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t4013 = (OclInteger)t4014.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4012 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4013);

			//--- Print result ---
			log.reportMessage(": "+t4012);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t4015 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t4016 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4017 = StdLibAdapterImpl.INSTANCE.impl(t4015).iterator();
			while (t4017.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t4017.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t4019 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t4018 = (OclBoolean)t4019.includes(self);
				t4016 = t4018;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4016).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4016);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t4022 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t4021 = (OclInteger)t4022.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4020 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4021);

			//--- Print result ---
			log.reportMessage(": "+t4020);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t4023 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t4024 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4025 = StdLibAdapterImpl.INSTANCE.impl(t4023).iterator();
			while (t4025.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t4025.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t4027 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t4026 = (OclBoolean)t4027.includes(self);
				t4024 = t4026;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4024).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4024);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t4030 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t4029 = (OclInteger)t4030.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4028 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4029);

			//--- Print result ---
			log.reportMessage(": "+t4028);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t4031 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t4032 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4033 = StdLibAdapterImpl.INSTANCE.impl(t4031).iterator();
			while (t4033.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t4033.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t4035 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t4034 = (OclBoolean)t4035.includes(self);
				t4032 = t4034;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4032).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4032);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t4038 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t4037 = (OclInteger)t4038.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4036 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4037);

			//--- Print result ---
			log.reportMessage(": "+t4036);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t4039 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t4040 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4041 = StdLibAdapterImpl.INSTANCE.impl(t4039).iterator();
			while (t4041.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t4041.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t4043 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t4042 = (OclBoolean)t4043.includes(self);
				t4040 = t4042;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4040).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4040);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Primitive inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t4046 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t4045 = (OclInteger)t4046.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4044 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4045);

			//--- Print result ---
			log.reportMessage(": "+t4044);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_ self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv literals_size: 0<=literals->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::Enumeration_ inv literals_bidirectional: literals->forAll(x | x.enumeration=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.EnumLiteral self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'clientDependency'
			OclBag t4050 = StdLibAdapterImpl.INSTANCE.Bag(self.getClientDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t4051 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4052 = StdLibAdapterImpl.INSTANCE.impl(t4050).iterator();
			while (t4052.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t4052.next();
				//--- Compute body ---
				// Call property 'client'
				OclBag t4054 = StdLibAdapterImpl.INSTANCE.Bag(x.getClient());
				// Call operation 'includes'
				OclBoolean t4053 = (OclBoolean)t4054.includes(self);
				t4051 = t4053;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4051).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4051);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'supplierDependency'
			OclBag t4057 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			// Call operation 'size'
			OclInteger t4056 = (OclInteger)t4057.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4055 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4056);

			//--- Print result ---
			log.reportMessage(": "+t4055);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'supplierDependency'
			OclBag t4058 = StdLibAdapterImpl.INSTANCE.Bag(self.getSupplierDependency());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency x = null;
			//--- Init flag ---
			OclBoolean t4059 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4060 = StdLibAdapterImpl.INSTANCE.impl(t4058).iterator();
			while (t4060.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Dependency)t4060.next();
				//--- Compute body ---
				// Call property 'supplier'
				OclBag t4062 = StdLibAdapterImpl.INSTANCE.Bag(x.getSupplier());
				// Call operation 'includes'
				OclBoolean t4061 = (OclBoolean)t4062.includes(self);
				t4059 = t4061;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4059).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4059);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'implementationLocation'
			OclBag t4065 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			// Call operation 'size'
			OclInteger t4064 = (OclInteger)t4065.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4063 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4064);

			//--- Print result ---
			log.reportMessage(": "+t4063);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'implementationLocation'
			OclBag t4066 = StdLibAdapterImpl.INSTANCE.Bag(self.getImplementationLocation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component x = null;
			//--- Init flag ---
			OclBoolean t4067 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4068 = StdLibAdapterImpl.INSTANCE.impl(t4066).iterator();
			while (t4068.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Component)t4068.next();
				//--- Compute body ---
				// Call property 'resident'
				OclBag t4070 = StdLibAdapterImpl.INSTANCE.Bag(x.getResident());
				// Call operation 'includes'
				OclBoolean t4069 = (OclBoolean)t4070.includes(self);
				t4067 = t4069;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4067).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4067);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'behavior'
			OclBag t4073 = StdLibAdapterImpl.INSTANCE.Bag(self.getBehavior());
			// Call operation 'size'
			OclInteger t4072 = (OclInteger)t4073.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4071 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4072);

			//--- Print result ---
			log.reportMessage(": "+t4071);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'taggedValue'
			OclBag t4077 = StdLibAdapterImpl.INSTANCE.Bag(self.getTaggedValue());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t4078 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4079 = StdLibAdapterImpl.INSTANCE.impl(t4077).iterator();
			while (t4079.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t4079.next();
				//--- Compute body ---
				// Call property 'modelElement'
				uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement t4081 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.ModelElement)x.getModelElement();
				// Call operation 'equalTo'
				OclBoolean t4080 = StdLibAdapterImpl.INSTANCE.Boolean(modelImplementationAdapter.OclModelElement_equalTo(t4081, self));
				t4078 = t4080;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4078).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4078);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'referenceTag'
			OclBag t4084 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			// Call operation 'size'
			OclInteger t4083 = (OclInteger)t4084.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4082 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4083);

			//--- Print result ---
			log.reportMessage(": "+t4082);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'referenceTag'
			OclBag t4085 = StdLibAdapterImpl.INSTANCE.Bag(self.getReferenceTag());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue x = null;
			//--- Init flag ---
			OclBoolean t4086 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4087 = StdLibAdapterImpl.INSTANCE.impl(t4085).iterator();
			while (t4087.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.TaggedValue)t4087.next();
				//--- Compute body ---
				// Call property 'referenceValue'
				OclBag t4089 = StdLibAdapterImpl.INSTANCE.Bag(x.getReferenceValue());
				// Call operation 'includes'
				OclBoolean t4088 = (OclBoolean)t4089.includes(self);
				t4086 = t4088;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4086).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4086);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'stereotype'
			OclBag t4092 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			// Call operation 'size'
			OclInteger t4091 = (OclInteger)t4092.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4090 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4091);

			//--- Print result ---
			log.reportMessage(": "+t4090);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'stereotype'
			OclBag t4093 = StdLibAdapterImpl.INSTANCE.Bag(self.getStereotype());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype x = null;
			//--- Init flag ---
			OclBoolean t4094 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4095 = StdLibAdapterImpl.INSTANCE.impl(t4093).iterator();
			while (t4095.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Extension_Mechanisms.Stereotype)t4095.next();
				//--- Compute body ---
				// Call property 'extendedElement'
				OclBag t4097 = StdLibAdapterImpl.INSTANCE.Bag(x.getExtendedElement());
				// Call operation 'includes'
				OclBoolean t4096 = (OclBoolean)t4097.includes(self);
				t4094 = t4096;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4094).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4094);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'constraint'
			OclBag t4100 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			// Call operation 'size'
			OclInteger t4099 = (OclInteger)t4100.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4098 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4099);

			//--- Print result ---
			log.reportMessage(": "+t4098);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'constraint'
			OclBag t4101 = StdLibAdapterImpl.INSTANCE.Bag(self.getConstraint());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint x = null;
			//--- Init flag ---
			OclBoolean t4102 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4103 = StdLibAdapterImpl.INSTANCE.impl(t4101).iterator();
			while (t4103.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Constraint)t4103.next();
				//--- Compute body ---
				// Call property 'constrainedElement'
				OclSequence t4105 = StdLibAdapterImpl.INSTANCE.Sequence(x.getConstrainedElement());
				// Call operation 'includes'
				OclBoolean t4104 = (OclBoolean)t4105.includes(self);
				t4102 = t4104;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4102).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4102);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'targetFlow'
			OclBag t4109 = StdLibAdapterImpl.INSTANCE.Bag(self.getTargetFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t4110 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4111 = StdLibAdapterImpl.INSTANCE.impl(t4109).iterator();
			while (t4111.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t4111.next();
				//--- Compute body ---
				// Call property 'target'
				OclBag t4113 = StdLibAdapterImpl.INSTANCE.Bag(x.getTarget());
				// Call operation 'includes'
				OclBoolean t4112 = (OclBoolean)t4113.includes(self);
				t4110 = t4112;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4110).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4110);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'sourceFlow'
			OclBag t4116 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			// Call operation 'size'
			OclInteger t4115 = (OclInteger)t4116.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4114 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4115);

			//--- Print result ---
			log.reportMessage(": "+t4114);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'sourceFlow'
			OclBag t4117 = StdLibAdapterImpl.INSTANCE.Bag(self.getSourceFlow());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow x = null;
			//--- Init flag ---
			OclBoolean t4118 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4119 = StdLibAdapterImpl.INSTANCE.impl(t4117).iterator();
			while (t4119.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Flow)t4119.next();
				//--- Compute body ---
				// Call property 'source'
				OclBag t4121 = StdLibAdapterImpl.INSTANCE.Bag(x.getSource());
				// Call operation 'includes'
				OclBoolean t4120 = (OclBoolean)t4121.includes(self);
				t4118 = t4120;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4118).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4118);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'comment'
			OclBag t4124 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			// Call operation 'size'
			OclInteger t4123 = (OclInteger)t4124.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4122 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4123);

			//--- Print result ---
			log.reportMessage(": "+t4122);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'comment'
			OclBag t4125 = StdLibAdapterImpl.INSTANCE.Bag(self.getComment());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment x = null;
			//--- Init flag ---
			OclBoolean t4126 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4127 = StdLibAdapterImpl.INSTANCE.impl(t4125).iterator();
			while (t4127.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Comment)t4127.next();
				//--- Compute body ---
				// Call property 'annotatedElement'
				OclBag t4129 = StdLibAdapterImpl.INSTANCE.Bag(x.getAnnotatedElement());
				// Call operation 'includes'
				OclBoolean t4128 = (OclBoolean)t4129.includes(self);
				t4126 = t4128;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4126).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4126);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'presentation'
			OclBag t4132 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			// Call operation 'size'
			OclInteger t4131 = (OclInteger)t4132.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4130 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4131);

			//--- Print result ---
			log.reportMessage(": "+t4130);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'presentation'
			OclBag t4133 = StdLibAdapterImpl.INSTANCE.Bag(self.getPresentation());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement x = null;
			//--- Init flag ---
			OclBoolean t4134 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4135 = StdLibAdapterImpl.INSTANCE.impl(t4133).iterator();
			while (t4135.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.PresentationElement)t4135.next();
				//--- Compute body ---
				// Call property 'subject'
				OclBag t4137 = StdLibAdapterImpl.INSTANCE.Bag(x.getSubject());
				// Call operation 'includes'
				OclBoolean t4136 = (OclBoolean)t4137.includes(self);
				t4134 = t4136;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4134).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4134);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'tie'
			OclBag t4140 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			// Call operation 'size'
			OclInteger t4139 = (OclInteger)t4140.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4138 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4139);

			//--- Print result ---
			log.reportMessage(": "+t4138);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			// Call property 'tie'
			OclBag t4141 = StdLibAdapterImpl.INSTANCE.Bag(self.getTie());
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie x = null;
			//--- Init flag ---
			OclBoolean t4142 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4143 = StdLibAdapterImpl.INSTANCE.impl(t4141).iterator();
			while (t4143.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Tie)t4143.next();
				//--- Compute body ---
				// Call property 'tiedElement'
				OclBag t4145 = StdLibAdapterImpl.INSTANCE.Bag(x.getTiedElement());
				// Call operation 'includes'
				OclBoolean t4144 = (OclBoolean)t4145.includes(self);
				t4142 = t4144;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4142).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4142);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {
			// Call property 'templateParameters'
			OclBag t4148 = StdLibAdapterImpl.INSTANCE.Bag(self.getTemplateParameters());
			// Call operation 'size'
			OclInteger t4147 = (OclInteger)t4148.size();
			// Call operation 'lessThanOrEqualTo'
			OclBoolean t4146 = (OclBoolean)StdLibAdapterImpl.INSTANCE.Integer(0).lessThanOrEqualTo(t4147);

			//--- Print result ---
			log.reportMessage(": "+t4146);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Foundation::Core::EnumLiteral inv enumeration_bidirectional: Set{enumeration}->forAll(x | x.literals->includes(self))";
		log.printMessage("  "+invariant);

		try {
			// 'forAll' iterator
			OclSet t4149 = StdLibAdapterImpl.INSTANCE.Set();
			// Call property 'enumeration'
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_ t4150 = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_)self.getEnumeration();
			t4149 = t4149.including(t4150);
			uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_ x = null;
			//--- Init flag ---
			OclBoolean t4151 = StdLibAdapterImpl.INSTANCE.Boolean(true);
			//--- For each element from collection ---
			java.util.Iterator t4152 = StdLibAdapterImpl.INSTANCE.impl(t4149).iterator();
			while (t4152.hasNext()) {
				x = (uk.ac.ukc.cs.kmf.kmfstudio.uml.Foundation.Core.Enumeration_)t4152.next();
				//--- Compute body ---
				// Call property 'literals'
				OclSequence t4154 = StdLibAdapterImpl.INSTANCE.Sequence(x.getLiterals());
				// Call operation 'includes'
				OclBoolean t4153 = (OclBoolean)t4154.includes(self);
				t4151 = t4153;
				//--- Break the loop ---
				if(!StdLibAdapterImpl.INSTANCE.impl(t4151).booleanValue()) break;
			}

			//--- Print result ---
			log.reportMessage(": "+t4151);

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Package self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Package inv importedElement_size: 0<=importedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Model inv importedElement_size: 0<=importedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Subsystem self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv generalization_size: 0<=generalization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv generalization_bidirectional: generalization->forAll(x | x.child=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv specialization_size: 0<=specialization->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv specialization_bidirectional: specialization->forAll(x | x.parent=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv powertype_bidirectional: powertype.powertypeRange = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv ownedElement_size: 0<=ownedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv ownedElement_bidirectional: ownedElement->forAll(x | x.namespace_=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv typedParameter_size: 0<=typedParameter->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv typedParameter_bidirectional: typedParameter->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv feature_size: 0<=feature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv feature_bidirectional: feature->forAll(x | x.owner=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv typedFeature_size: 0<=typedFeature->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv typedFeature_bidirectional: typedFeature->forAll(x | x.type=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv powertypeRange_bidirectional: powertypeRange.powertype=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Model_Management::Subsystem inv importedElement_size: 0<=importedElement->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateMachine self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv context_bidirectional: Set{context}->forAll(x | x.behavior->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv transitions_size: 0<=transitions->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv transitions_bidirectional: transitions->forAll(x | x.stateMachine=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateMachine inv top_bidirectional: top.stateMachine=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Guard self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Guard inv transition_bidirectional: transition.guard=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Transition self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv stateMachine_bidirectional: Set{stateMachine}->forAll(x | x.transitions->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv guard_bidirectional: guard.transition = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv source_bidirectional: Set{source}->forAll(x | x.outgoing->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv target_bidirectional: Set{target}->forAll(x | x.incoming->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv state_bidirectional: Set{state}->forAll(x | x.internal_->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv effect_bidirectional: effect.transition = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Transition inv trigger_bidirectional: Set{trigger}->forAll(x | x.transition->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StateVertex self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StateVertex inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.State self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv internal__size: 0<=internal_->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv internal__bidirectional: internal_->forAll(x | x.state=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv stateMachine_bidirectional: stateMachine.top = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv entry_bidirectional: entry.entry_state = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::State inv exit_bidirectional: exit.exit_state=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Action self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Action inv entry_state_bidirectional: entry_state.entry=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Action inv transition_bidirectional: transition.effect=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Action inv exit_state_bidirectional: exit_state.exit = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.SynchState self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::SynchState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Pseudostate self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Pseudostate inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.StubState self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::StubState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.Event self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv transition_size: 0<=transition->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::Event inv transition_bidirectional: transition->forAll(x | x.trigger=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CallEvent self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv transition_size: 0<=transition->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CallEvent inv transition_bidirectional: transition->forAll(x | x.trigger=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
	/** Visit class 'uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState' */
	public Object visit(uk.ac.ukc.cs.kmf.kmfstudio.uml.Behavioral_Elements.State_Machines.CompositeState self, Object data) {
		//--- Unpack arguments ---
		ILog log = (ILog)((Map)data).get("log");
		//--- Common variables ---
		String invariant;
		log.reportMessage("Evaluating invariants for "+self+"...");
		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv clientDependency_size: 0<=clientDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv clientDependency_bidirectional: clientDependency->forAll(x | x.client->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv supplierDependency_size: 0<=supplierDependency->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv supplierDependency_bidirectional: supplierDependency->forAll(x | x.supplier->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv implementationLocation_size: 0<=implementationLocation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv implementationLocation_bidirectional: implementationLocation->forAll(x | x.resident->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv behavior_size: 0<=behavior->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv behavior_bidirectional: behavior->forAll(x | x.context=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv taggedValue_size: 0<=taggedValue->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv taggedValue_bidirectional: taggedValue->forAll(x | x.modelElement=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv referenceTag_size: 0<=referenceTag->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv referenceTag_bidirectional: referenceTag->forAll(x | x.referenceValue->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stereotype_size: 0<=stereotype->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stereotype_bidirectional: stereotype->forAll(x | x.extendedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv constraint_size: 0<=constraint->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv constraint_bidirectional: constraint->forAll(x | x.constrainedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv namespace__bidirectional: Set{namespace_}->forAll(x | x.ownedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv targetFlow_size: 0<=targetFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv targetFlow_bidirectional: targetFlow->forAll(x | x.target->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv sourceFlow_size: 0<=sourceFlow->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv sourceFlow_bidirectional: sourceFlow->forAll(x | x.source->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv comment_size: 0<=comment->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv comment_bidirectional: comment->forAll(x | x.annotatedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv presentation_size: 0<=presentation->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv presentation_bidirectional: presentation->forAll(x | x.subject->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv tie_size: 0<=tie->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv tie_bidirectional: tie->forAll(x | x.tiedElement->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv templateParameters_size: 0<=templateParameters->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv outgoing_size: 0<=outgoing->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv outgoing_bidirectional: outgoing->forAll(x | x.source=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv incoming_size: 0<=incoming->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv incoming_bidirectional: incoming->forAll(x | x.target=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv container_bidirectional: Set{container}->forAll(x | x.subvertex->includes(self))";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv internal__size: 0<=internal_->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv internal__bidirectional: internal_->forAll(x | x.state=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv stateMachine_bidirectional: stateMachine.top = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv entry_bidirectional: entry.entry_state = self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv exit_bidirectional: exit.exit_state=self";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv subvertex_size: 0<=subvertex->size()";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}

		//--- Print invariant ---
		invariant = "context uml::Behavioral_Elements::State_Machines::CompositeState inv subvertex_bidirectional: subvertex->forAll(x | x.container=self)";
		log.printMessage("  "+invariant);

		try {

		} catch (Exception e) {
			//--- Print result ---
			log.reportMessage(": undefined");
		}
		return null;
	}
}
