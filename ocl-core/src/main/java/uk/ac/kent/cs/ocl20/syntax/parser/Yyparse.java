
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 30 13:46:56 GMT 2003
//----------------------------------------------------

package uk.ac.kent.cs.ocl20.syntax.parser;

import java.util.*;
import java_cup.runtime.*;
import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.syntax.ast.*;
import uk.ac.kent.cs.ocl20.syntax.ast.contexts.*;
import uk.ac.kent.cs.ocl20.syntax.ast.expressions.*;
import uk.ac.kent.cs.ocl20.syntax.ast.types.*;

/** CUP v0.10k generated parser.
  * @version Thu Oct 30 13:46:56 GMT 2003
  */
public class Yyparse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Yyparse() {super();}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\003\006\000\002\003" +
    "\003\000\002\004\002\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\011\010\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\006\000\002\006\005\000\002\007\006\000\002\007" +
    "\005\000\002\007\006\000\002\007\005\000\002\007\007" +
    "\000\002\007\006\000\002\007\007\000\002\007\006\000" +
    "\002\010\007\000\002\010\005\000\002\013\005\000\002" +
    "\015\006\000\002\015\005\000\002\015\006\000\002\015" +
    "\005\000\002\015\006\000\002\015\005\000\002\015\007" +
    "\000\002\015\006\000\002\015\007\000\002\015\006\000" +
    "\002\015\007\000\002\015\006\000\002\014\012\000\002" +
    "\014\010\000\002\014\011\000\002\014\007\000\002\014" +
    "\010\000\002\014\006\000\002\014\007\000\002\014\005" +
    "\000\002\016\003\000\002\016\005\000\002\017\007\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\006\000\002\023\006\000\002\024\003\000\002\024\005" +
    "\000\002\024\004\000\002\024\006\000\002\024\005\000" +
    "\002\024\005\000\002\024\006\000\002\024\010\000\002" +
    "\024\012\000\002\024\014\000\002\024\010\000\002\024" +
    "\007\000\002\024\014\000\002\024\012\000\002\024\004" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\011\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\006\000\002" +
    "\024\010\000\002\024\007\000\002\024\010\000\002\024" +
    "\007\000\002\025\003\000\002\025\005\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\002\000\002\030\004\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\006\000\002\032\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\003\000\002\035\005\000\002\036\006\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\005\000" +
    "\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\010\002\ufffe\005\005\007\ufffe\001\002\000" +
    "\004\002\u0129\001\002\000\004\106\017\001\002\000\006" +
    "\002\uffff\007\013\001\002\000\010\002\ufffd\006\ufffd\007" +
    "\ufffd\001\002\000\010\002\ufffc\006\ufffc\007\ufffc\001\002" +
    "\000\010\002\ufffb\006\ufffb\007\ufffb\001\002\000\010\002" +
    "\ufffa\006\ufffa\007\ufffa\001\002\000\004\106\017\001\002" +
    "\000\010\014\u0102\015\u0104\016\u0101\001\002\000\012\012" +
    "\310\013\305\070\311\106\017\001\002\000\014\012\uff85" +
    "\013\uff85\070\uff85\072\020\106\uff85\001\002\000\140\002" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\015\uff83\016\uff83\027\uff83\030\uff83\031\uff83\032" +
    "\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\042\uff83\044\uff83\045\uff83\046\uff83\047\uff83\052" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\073\uff83\075\uff83\076\uff83\077\uff83\100\uff83" +
    "\106\uff83\001\002\000\006\075\022\106\017\001\002\000" +
    "\006\057\045\075\302\001\002\000\014\014\uffd5\015\uffd5" +
    "\016\uffd5\033\uffd5\061\300\001\002\000\022\033\025\052" +
    "\uffcf\057\uffcf\061\026\062\uffcf\063\uffcf\075\uffcf\077\uffcf" +
    "\001\002\000\012\052\uffd4\057\uffd4\075\uffd4\077\uffd4\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\020\017\030\020\035\021\032\022\040\023\027\025" +
    "\041\106\017\001\002\000\006\072\uff91\074\uff91\001\002" +
    "\000\006\072\uff95\074\uff95\001\002\000\032\010\uffcc\011" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\033\uffcc\052\uffcc\057\uffcc" +
    "\062\uffcc\063\uffcc\075\uffcc\077\uffcc\001\002\000\006\072" +
    "\uff93\074\uff93\001\002\000\034\010\uffce\011\uffce\014\uffce" +
    "\015\uffce\016\uffce\033\uffce\052\uffce\057\uffce\062\uffce\063" +
    "\uffce\070\237\075\uffce\077\uffce\001\002\000\004\072\274" +
    "\001\002\000\006\072\uff94\074\uff94\001\002\000\136\002" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\027\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\044\uff85\045\uff85\046\uff85\047\uff85\052" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\065\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\075\uff85\076\uff85\077\uff85\100\uff85" +
    "\001\002\000\020\033\050\052\uffd1\057\uffd1\062\uffd1\063" +
    "\uffd1\075\uffd1\077\uffd1\001\002\000\006\072\uff92\074\uff92" +
    "\001\002\000\004\072\043\001\002\000\032\010\uffcd\011" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\033\uffcd\052\uffcd\057\uffcd" +
    "\062\uffcd\063\uffcd\075\uffcd\077\uffcd\001\002\000\004\106" +
    "\017\001\002\000\006\057\045\075\046\001\002\000\004" +
    "\106\017\001\002\000\032\010\uffca\011\uffca\014\uffca\015" +
    "\uffca\016\uffca\033\uffca\052\uffca\057\uffca\062\uffca\063\uffca" +
    "\075\uffca\077\uffca\001\002\000\012\052\uffd3\057\uffd3\075" +
    "\uffd3\077\uffd3\001\002\000\044\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\072\061\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\132\002\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\052\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\067\uffc9\071\uffc9\072\uffc9\073\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\001\002\000\004\074\271\001\002\000\132" +
    "\002\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\052\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\067\uff98\071\uff98\072\uff98" +
    "\073\uff98\075\uff98\076\uff98\077\uff98\100\uff98\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\004" +
    "\074\255\001\002\000\132\002\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\052\uff87\054\uff87\055\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87" +
    "\067\uff87\071\uff87\072\uff87\073\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\001\002\000\044\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\072\061\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\132\002\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\052\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\067\uff88\071\uff88\072\uff88\073\uff88\075\uff88\076\uff88\077" +
    "\uff88\100\uff88\001\002\000\044\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\072\061\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\132\002\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\052\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\067\uff9a\071\uff9a\072\uff9a\073\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\100\uff9a\001\002\000\044\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\072\061\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\132\002\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\052\uff86\054\uff86\055\uff86\056" +
    "\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\067\uff86\071\uff86\072\uff86\073\uff86\075\uff86\076\uff86\077" +
    "\uff86\100\uff86\001\002\000\004\106\017\001\002\000\136" +
    "\002\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\052\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\126\067\uff9c\070\237" +
    "\071\uff9c\072\uff9c\073\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\001\002\000\132\002\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\052\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\067" +
    "\uff8a\071\uff8a\072\uff8a\073\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\100\uff8a\001\002\000\132\002\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\052\uff89\054\uff89\055\uff89\056" +
    "\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\067\uff89\071\uff89\072\uff89\073\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\001\002\000\132\002\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044" +
    "\uff99\045\uff99\046\uff99\047\uff99\052\uff99\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064" +
    "\uff99\067\uff99\071\uff99\072\uff99\073\uff99\075\uff99\076\uff99" +
    "\077\uff99\100\uff99\001\002\000\072\027\103\030\074\031" +
    "\100\032\120\033\117\034\075\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\052\uffd2\057\uffd2\060\114\062\uffd2\063\uffd2\064\102" +
    "\071\101\072\107\073\111\075\uffd2\077\uffd2\100\106\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\044\017\030\020\035\021\032\022\040\023\027\024" +
    "\052\042\063\050\054\051\065\053\057\072\061\101\067" +
    "\102\070\103\060\104\056\105\064\106\017\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\044" +
    "\017\030\020\035\021\032\022\040\023\027\024\052\042" +
    "\063\050\054\051\065\053\057\072\061\101\067\102\070" +
    "\103\060\104\056\105\064\106\017\001\002\000\044\017" +
    "\030\020\035\021\032\022\040\023\027\024\052\042\063" +
    "\050\054\051\065\053\057\072\061\101\067\102\070\103" +
    "\060\104\056\105\064\106\017\001\002\000\044\017\030" +
    "\020\035\021\032\022\040\023\027\024\052\042\063\050" +
    "\054\051\065\053\057\072\061\101\067\102\070\103\060" +
    "\104\056\105\064\106\017\001\002\000\004\106\017\001" +
    "\002\000\004\106\017\001\002\000\044\017\030\020\035" +
    "\021\032\022\040\023\027\024\052\042\063\050\054\051" +
    "\065\053\057\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\044\017\030\020\035\021" +
    "\032\022\040\023\027\024\052\042\063\050\054\051\065" +
    "\053\057\072\061\101\067\102\070\103\060\104\056\105" +
    "\064\106\017\001\002\000\044\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\072\061\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\006\026\171\106\017\001\002\000" +
    "\046\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\075\144\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\044\017\030\020\035\021\032\022\040\023\027\024" +
    "\052\042\063\050\054\051\065\053\057\072\061\101\067" +
    "\102\070\103\060\104\056\105\064\106\017\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\044" +
    "\017\030\020\035\021\032\022\040\023\027\024\052\042" +
    "\063\050\054\051\065\053\057\072\061\101\067\102\070" +
    "\103\060\104\056\105\064\106\017\001\002\000\044\017" +
    "\030\020\035\021\032\022\040\023\027\024\052\042\063" +
    "\050\054\051\065\053\057\072\061\101\067\102\070\103" +
    "\060\104\056\105\064\106\017\001\002\000\004\106\017" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\044\017\030\020\035\021\032\022\040\023\027\024" +
    "\052\042\063\050\054\051\065\053\057\072\061\101\067" +
    "\102\070\103\060\104\056\105\064\106\017\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\132" +
    "\002\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\052\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\114\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\067\uffaa\071\uffaa\072\107" +
    "\073\111\075\uffaa\076\uffaa\077\uffaa\100\106\001\002\000" +
    "\132\002\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\052\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\114" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\067\uffae\071\uffae\072" +
    "\107\073\111\075\uffae\076\uffae\077\uffae\100\106\001\002" +
    "\000\132\002\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\114\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\071\uffb7" +
    "\072\107\073\111\075\uffb7\076\uffb7\077\uffb7\100\106\001" +
    "\002\000\132\002\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\114\061\uffb6\062\uffb6\063\uffb6\064\uffb6\067\uffb6\071" +
    "\uffb6\072\107\073\111\075\uffb6\076\uffb6\077\uffb6\100\106" +
    "\001\002\000\134\002\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\052\uff9c\054\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\126" +
    "\067\uff9c\071\uff9c\072\uff9c\073\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\001\002\000\004\014\130\001\002\000\132" +
    "\002\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\067\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002\000" +
    "\132\002\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\052\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\067\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\001\002" +
    "\000\132\002\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\044\073\045\110\046\116" +
    "\047\115\052\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\114\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4\071\uffb4" +
    "\072\107\073\111\075\uffb4\076\uffb4\077\uffb4\100\106\001" +
    "\002\000\132\002\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\077\042\113\044\073\045\110\046" +
    "\116\047\115\052\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\114\061\uffaf\062\uffaf\063\uffaf\064\uffaf\067\uffaf\071" +
    "\uffaf\072\107\073\111\075\uffaf\076\uffaf\077\uffaf\100\106" +
    "\001\002\000\064\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\057\uffa3\060" +
    "\114\064\102\071\101\072\107\073\111\075\uffa3\076\uffa3" +
    "\100\106\001\002\000\006\057\135\076\136\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\134" +
    "\002\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\052\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\126\067\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\001" +
    "\002\000\132\002\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\067\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\001\002\000\064\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\057\uffa2\060" +
    "\114\064\102\071\101\072\107\073\111\075\uffa2\076\uffa2" +
    "\100\106\001\002\000\132\002\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\052\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\114\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\067\uffb8\071\uffb8\072\107\073\111\075\uffb8\076\uffb8\077" +
    "\uffb8\100\106\001\002\000\004\063\165\001\002\000\072" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\025\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\044\uff85" +
    "\045\uff85\046\uff85\047\uff85\057\uff85\060\uff85\061\026\063" +
    "\uffcf\064\uff85\065\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\075\uff85\100\uff85\001\002\000\132\002\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\001\002\000\064\027\103\030\074" +
    "\031\100\032\120\033\117\034\075\035\076\036\104\037" +
    "\105\040\112\041\077\042\113\044\073\045\110\046\116" +
    "\047\115\057\147\060\114\061\146\064\102\071\101\072" +
    "\107\073\111\075\150\100\106\001\002\000\020\017\030" +
    "\020\035\021\032\022\040\023\027\025\041\106\017\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\132\002\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\067\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\001" +
    "\002\000\004\063\154\001\002\000\006\057\135\075\153" +
    "\001\002\000\132\002\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\067\uffc2" +
    "\071\uffc2\072\uffc2\073\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\060\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\060\114\064" +
    "\102\071\101\072\107\073\111\075\156\100\106\001\002" +
    "\000\132\002\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\067\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\001" +
    "\002\000\004\057\160\001\002\000\004\106\017\001\002" +
    "\000\004\063\162\001\002\000\044\017\030\020\035\021" +
    "\032\022\040\023\027\024\052\042\063\050\054\051\065" +
    "\053\057\072\061\101\067\102\070\103\060\104\056\105" +
    "\064\106\017\001\002\000\060\027\103\030\074\031\100" +
    "\032\120\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\060\114\064\102\071\101\072\107\073\111\075\164\100" +
    "\106\001\002\000\132\002\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\052\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\067" +
    "\uffc0\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\001\002\000\044\017\030\020\035\021\032\022" +
    "\040\023\027\024\052\042\063\050\054\051\065\053\057" +
    "\072\061\101\067\102\070\103\060\104\056\105\064\106" +
    "\017\001\002\000\060\027\103\030\074\031\100\032\120" +
    "\033\117\034\075\035\076\036\104\037\105\040\112\041" +
    "\077\042\113\044\073\045\110\046\116\047\115\060\114" +
    "\064\102\071\101\072\107\073\111\075\167\100\106\001" +
    "\002\000\132\002\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\052\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\067\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\001\002\000\132\002\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\067\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\001\002\000\004\072\172\001\002\000\004\106\017" +
    "\001\002\000\006\062\174\063\175\001\002\000\004\106" +
    "\017\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\060\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\060\114\064" +
    "\102\071\101\072\107\073\111\075\177\100\106\001\002" +
    "\000\132\002\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\067\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\001" +
    "\002\000\004\063\201\001\002\000\044\017\030\020\035" +
    "\021\032\022\040\023\027\024\052\042\063\050\054\051" +
    "\065\053\057\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\060\027\103\030\074\031" +
    "\100\032\120\033\117\034\075\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\060\114\064\102\071\101\072\107\073\111\075\203" +
    "\100\106\001\002\000\132\002\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\052\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\067\uffbd\071\uffbd\072\uffbd\073\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\001\002\000\132\002\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\077\042\113\044" +
    "\073\045\110\046\116\047\115\052\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\114\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\067\uffb0\071\uffb0\072\107\073\111\075\uffb0\076\uffb0" +
    "\077\uffb0\100\106\001\002\000\132\002\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\052\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\114\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\067\uffb1\071\uffb1\072\107\073\111\075\uffb1\076" +
    "\uffb1\077\uffb1\100\106\001\002\000\132\002\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\027\uffa9\030\074\031\100\032\120\033\117" +
    "\034\075\035\076\036\104\037\105\040\112\041\077\042" +
    "\113\044\073\045\110\046\116\047\115\052\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\114\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\067\uffa9\071\uffa9\072\107\073\111\075\uffa9" +
    "\076\uffa9\077\uffa9\100\106\001\002\000\004\072\210\001" +
    "\002\000\050\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\066\211\072" +
    "\061\075\213\101\067\102\070\103\060\104\056\105\064" +
    "\106\017\001\002\000\010\057\uff9f\061\221\075\uff9f\001" +
    "\002\000\006\057\uffa1\075\uffa1\001\002\000\132\002\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\052\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\067\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\100\uffa4\001\002\000\006\057" +
    "\216\075\217\001\002\000\062\027\103\030\074\031\100" +
    "\032\120\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\057\uff9d\060\114\064\102\071\101\072\107\073\111\075" +
    "\uff9d\100\106\001\002\000\046\017\030\020\035\021\032" +
    "\022\040\023\027\024\052\042\063\050\054\051\065\053" +
    "\057\066\211\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\132\002\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\052\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\067\uffa5\071\uffa5\072\uffa5\073\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\001\002\000\006\057\uffa0\075\uffa0" +
    "\001\002\000\020\017\030\020\035\021\032\022\040\023" +
    "\027\025\041\106\017\001\002\000\006\057\uff9e\075\uff9e" +
    "\001\002\000\004\072\224\001\002\000\050\017\030\020" +
    "\035\021\032\022\040\023\027\024\052\042\063\050\054" +
    "\051\065\053\057\066\211\072\061\075\225\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\132" +
    "\002\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\052\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\067\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\001\002\000" +
    "\006\057\216\075\227\001\002\000\132\002\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\052\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\067\uffa7\071\uffa7\072\uffa7\073\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\001\002\000\132\002\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\052\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\114\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\067\uffab\071\uffab\072\107\073\111\075" +
    "\uffab\076\uffab\077\uffab\100\106\001\002\000\132\002\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\044\073\045\110\046\116\047\115\052\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\114\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\067\uffb5\071\uffb5\072\107\073\111" +
    "\075\uffb5\076\uffb5\077\uffb5\100\106\001\002\000\132\002" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\077\042\113\044\073\045\110\046\116\047\115\052" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\114\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\067\uffb2\071\uffb2\072\107\073" +
    "\111\075\uffb2\076\uffb2\077\uffb2\100\106\001\002\000\132" +
    "\002\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\052\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\114\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\067\uffad\071\uffad\072\107" +
    "\073\111\075\uffad\076\uffad\077\uffad\100\106\001\002\000" +
    "\132\002\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\117\034\075\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\114" +
    "\061\uffac\062\uffac\063\uffac\064\uffac\067\uffac\071\uffac\072" +
    "\107\073\111\075\uffac\076\uffac\077\uffac\100\106\001\002" +
    "\000\132\002\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\114\061\uffb9\062\uffb9\063\uffb9\064\uffb9\067\uffb9\071\uffb9" +
    "\072\107\073\111\075\uffb9\076\uffb9\077\uffb9\100\106\001" +
    "\002\000\132\002\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\052\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\067\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\001\002\000\004\106\017\001\002\000\136\002\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\042\uff84\044\uff84\045\uff84\046\uff84\047\uff84\052\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\075\uff84\076\uff84\077\uff84\100\uff84\001\002" +
    "\000\006\052\242\057\045\001\002\000\044\017\030\020" +
    "\035\021\032\022\040\023\027\024\052\042\063\050\054" +
    "\051\065\053\057\072\061\101\067\102\070\103\060\104" +
    "\056\105\064\106\017\001\002\000\132\002\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\027\103\030\074\031\100\032\120\033\117" +
    "\034\075\035\076\036\104\037\105\040\112\041\077\042" +
    "\113\044\073\045\110\046\116\047\115\052\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\114\061\uffa8\062\uffa8\063" +
    "\uffa8\064\102\067\uffa8\071\101\072\107\073\111\075\uffa8" +
    "\076\uffa8\077\uffa8\100\106\001\002\000\132\002\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\052\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\114\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\067\uffba\071\uffba\072\107\073\111\075" +
    "\uffba\076\uffba\077\uffba\100\106\001\002\000\060\027\103" +
    "\030\074\031\100\032\120\033\117\034\075\035\076\036" +
    "\104\037\105\040\112\041\077\042\113\044\073\045\110" +
    "\046\116\047\115\060\114\064\102\071\101\072\107\073" +
    "\111\075\246\100\106\001\002\000\132\002\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\001\002\000\060\027\103\030" +
    "\074\031\100\032\120\033\117\034\075\035\076\036\104" +
    "\037\105\040\112\041\077\042\113\044\073\045\110\046" +
    "\116\047\115\054\250\060\114\064\102\071\101\072\107" +
    "\073\111\100\106\001\002\000\044\017\030\020\035\021" +
    "\032\022\040\023\027\024\052\042\063\050\054\051\065" +
    "\053\057\072\061\101\067\102\070\103\060\104\056\105" +
    "\064\106\017\001\002\000\060\027\103\030\074\031\100" +
    "\032\120\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\055\252\060\114\064\102\071\101\072\107\073\111\100" +
    "\106\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\060\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\056\254\060" +
    "\114\064\102\071\101\072\107\073\111\100\106\001\002" +
    "\000\132\002\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\067\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\001" +
    "\002\000\046\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\077" +
    "\262\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\006\057\uff90\077\uff90\001\002\000\006\057" +
    "\uff8d\077\uff8d\001\002\000\006\057\265\077\266\001\002" +
    "\000\064\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\057\uff8e\060\114\064" +
    "\102\067\263\071\101\072\107\073\111\077\uff8e\100\106" +
    "\001\002\000\132\002\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\052\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\067\uff96" +
    "\071\uff96\072\uff96\073\uff96\075\uff96\076\uff96\077\uff96\100" +
    "\uff96\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\062\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\057\uff8c\060" +
    "\114\064\102\071\101\072\107\073\111\077\uff8c\100\106" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\132\002\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\052\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\067\uff97\071" +
    "\uff97\072\uff97\073\uff97\075\uff97\076\uff97\077\uff97\100\uff97" +
    "\001\002\000\006\057\uff8f\077\uff8f\001\002\000\132\002" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\114\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\067\uffbb\071\uffbb\072\107\073" +
    "\111\075\uffbb\076\uffbb\077\uffbb\100\106\001\002\000\004" +
    "\106\017\001\002\000\006\057\045\077\273\001\002\000" +
    "\132\002\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\016\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\067\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\001\002" +
    "\000\020\017\030\020\035\021\032\022\040\023\027\025" +
    "\041\106\017\001\002\000\004\075\276\001\002\000\032" +
    "\010\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb\033\uffcb\052" +
    "\uffcb\057\uffcb\062\uffcb\063\uffcb\075\uffcb\077\uffcb\001\002" +
    "\000\072\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\052\uffd0\057\uffd0\060" +
    "\114\062\uffd0\063\uffd0\064\102\071\101\072\107\073\111" +
    "\075\uffd0\077\uffd0\100\106\001\002\000\020\017\030\020" +
    "\035\021\032\022\040\023\027\025\041\106\017\001\002" +
    "\000\012\014\uffd6\015\uffd6\016\uffd6\033\uffd6\001\002\000" +
    "\014\014\uffd7\015\uffd7\016\uffd7\033\uffd7\061\303\001\002" +
    "\000\020\017\030\020\035\021\032\022\040\023\027\025" +
    "\041\106\017\001\002\000\012\014\uffd8\015\uffd8\016\uffd8" +
    "\033\uffd8\001\002\000\006\061\374\106\017\001\002\000" +
    "\014\002\ufff4\006\ufff4\007\ufff4\012\350\013\347\001\002" +
    "\000\004\061\330\001\002\000\006\061\324\106\017\001" +
    "\002\000\004\106\017\001\002\000\014\012\uff84\013\uff84" +
    "\070\uff84\072\313\106\uff84\001\002\000\006\075\315\106" +
    "\017\001\002\000\006\057\045\075\320\001\002\000\014" +
    "\014\uffd9\015\uffd9\016\uffd9\033\uffd9\061\316\001\002\000" +
    "\020\017\030\020\035\021\032\022\040\023\027\025\041" +
    "\106\017\001\002\000\012\014\uffda\015\uffda\016\uffda\033" +
    "\uffda\001\002\000\014\014\uffdb\015\uffdb\016\uffdb\033\uffdb" +
    "\061\321\001\002\000\020\017\030\020\035\021\032\022" +
    "\040\023\027\025\041\106\017\001\002\000\012\014\uffdc" +
    "\015\uffdc\016\uffdc\033\uffdc\001\002\000\004\061\326\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\070\002\ufff2\006\ufff2\007\ufff2\012\ufff2\013\ufff2\027" +
    "\103\030\074\031\100\032\120\033\117\034\075\035\076" +
    "\036\104\037\105\040\112\041\077\042\113\044\073\045" +
    "\110\046\116\047\115\060\114\064\102\071\101\072\107" +
    "\073\111\100\106\001\002\000\044\017\030\020\035\021" +
    "\032\022\040\023\027\024\052\042\063\050\054\051\065" +
    "\053\057\072\061\101\067\102\070\103\060\104\056\105" +
    "\064\106\017\001\002\000\070\002\ufff3\006\ufff3\007\ufff3" +
    "\012\ufff3\013\ufff3\027\103\030\074\031\100\032\120\033" +
    "\117\034\075\035\076\036\104\037\105\040\112\041\077" +
    "\042\113\044\073\045\110\046\116\047\115\060\114\064" +
    "\102\071\101\072\107\073\111\100\106\001\002\000\020" +
    "\017\030\020\035\021\032\022\040\023\027\025\041\106" +
    "\017\001\002\000\006\010\332\011\334\001\002\000\004" +
    "\061\345\001\002\000\014\002\ufff9\006\ufff9\007\ufff9\010" +
    "\337\011\340\001\002\000\004\061\335\001\002\000\044" +
    "\017\030\020\035\021\032\022\040\023\027\024\052\042" +
    "\063\050\054\051\065\053\057\072\061\101\067\102\070" +
    "\103\060\104\056\105\064\106\017\001\002\000\070\002" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\027\103\030\074" +
    "\031\100\032\120\033\117\034\075\035\076\036\104\037" +
    "\105\040\112\041\077\042\113\044\073\045\110\046\116" +
    "\047\115\060\114\064\102\071\101\072\107\073\111\100" +
    "\106\001\002\000\004\061\343\001\002\000\004\061\341" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\070\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\027\103\030\074\031\100\032\120\033\117\034\075\035" +
    "\076\036\104\037\105\040\112\041\077\042\113\044\073" +
    "\045\110\046\116\047\115\060\114\064\102\071\101\072" +
    "\107\073\111\100\106\001\002\000\044\017\030\020\035" +
    "\021\032\022\040\023\027\024\052\042\063\050\054\051" +
    "\065\053\057\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\070\002\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\027\103\030\074\031\100\032\120" +
    "\033\117\034\075\035\076\036\104\037\105\040\112\041" +
    "\077\042\113\044\073\045\110\046\116\047\115\060\114" +
    "\064\102\071\101\072\107\073\111\100\106\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\070" +
    "\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\027\103\030" +
    "\074\031\100\032\120\033\117\034\075\035\076\036\104" +
    "\037\105\040\112\041\077\042\113\044\073\045\110\046" +
    "\116\047\115\060\114\064\102\071\101\072\107\073\111" +
    "\100\106\001\002\000\006\061\357\106\017\001\002\000" +
    "\006\061\351\106\017\001\002\000\044\017\030\020\035" +
    "\021\032\022\040\023\027\024\052\042\063\050\054\051" +
    "\065\053\057\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\004\061\353\001\002\000" +
    "\044\017\030\020\035\021\032\022\040\023\027\024\052" +
    "\042\063\050\054\051\065\053\057\072\061\101\067\102" +
    "\070\103\060\104\056\105\064\106\017\001\002\000\070" +
    "\002\uffef\006\uffef\007\uffef\012\uffef\013\uffef\027\103\030" +
    "\074\031\100\032\120\033\117\034\075\035\076\036\104" +
    "\037\105\040\112\041\077\042\113\044\073\045\110\046" +
    "\116\047\115\060\114\064\102\071\101\072\107\073\111" +
    "\100\106\001\002\000\070\002\uffee\006\uffee\007\uffee\012" +
    "\uffee\013\uffee\027\103\030\074\031\100\032\120\033\117" +
    "\034\075\035\076\036\104\037\105\040\112\041\077\042" +
    "\113\044\073\045\110\046\116\047\115\060\114\064\102" +
    "\071\101\072\107\073\111\100\106\001\002\000\004\061" +
    "\372\001\002\000\004\106\017\001\002\000\004\033\370" +
    "\001\002\000\014\002\uffec\006\uffec\007\uffec\012\uffec\013" +
    "\uffec\001\002\000\004\070\311\001\002\000\010\061\364" +
    "\070\uff85\072\020\001\002\000\020\017\030\020\035\021" +
    "\032\022\040\023\027\025\041\106\017\001\002\000\004" +
    "\033\366\001\002\000\044\017\030\020\035\021\032\022" +
    "\040\023\027\024\052\042\063\050\054\051\065\053\057" +
    "\072\061\101\067\102\070\103\060\104\056\105\064\106" +
    "\017\001\002\000\070\002\uffeb\006\uffeb\007\uffeb\012\uffeb" +
    "\013\uffeb\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\060\114\064\102\071" +
    "\101\072\107\073\111\100\106\001\002\000\044\017\030" +
    "\020\035\021\032\022\040\023\027\024\052\042\063\050" +
    "\054\051\065\053\057\072\061\101\067\102\070\103\060" +
    "\104\056\105\064\106\017\001\002\000\070\002\uffea\006" +
    "\uffea\007\uffea\012\uffea\013\uffea\027\103\030\074\031\100" +
    "\032\120\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\060\114\064\102\071\101\072\107\073\111\100\106\001" +
    "\002\000\004\106\017\001\002\000\014\002\uffed\006\uffed" +
    "\007\uffed\012\uffed\013\uffed\001\002\000\004\106\017\001" +
    "\002\000\004\061\376\001\002\000\004\106\017\001\002" +
    "\000\014\002\ufff1\006\ufff1\007\ufff1\012\ufff1\013\ufff1\001" +
    "\002\000\014\002\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0" +
    "\001\002\000\006\061\u0121\106\017\001\002\000\006\061" +
    "\u011d\106\017\001\002\000\016\002\uffe9\006\uffe9\007\uffe9" +
    "\014\u010a\015\u010c\016\u010b\001\002\000\006\061\u0105\106" +
    "\017\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\004\061\u0107\001\002\000\044\017\030\020" +
    "\035\021\032\022\040\023\027\024\052\042\063\050\054" +
    "\051\065\053\057\072\061\101\067\102\070\103\060\104" +
    "\056\105\064\106\017\001\002\000\072\002\uffe6\006\uffe6" +
    "\007\uffe6\014\uffe6\015\uffe6\016\uffe6\027\103\030\074\031" +
    "\100\032\120\033\117\034\075\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\060\114\064\102\071\101\072\107\073\111\100\106" +
    "\001\002\000\072\002\uffe5\006\uffe5\007\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\027\103\030\074\031\100\032\120\033\117" +
    "\034\075\035\076\036\104\037\105\040\112\041\077\042" +
    "\113\044\073\045\110\046\116\047\115\060\114\064\102" +
    "\071\101\072\107\073\111\100\106\001\002\000\006\061" +
    "\u0118\106\017\001\002\000\006\061\u0112\106\017\001\002" +
    "\000\006\061\u010e\106\017\001\002\000\004\061\u0110\001" +
    "\002\000\044\017\030\020\035\021\032\022\040\023\027" +
    "\024\052\042\063\050\054\051\065\053\057\072\061\101" +
    "\067\102\070\103\060\104\056\105\064\106\017\001\002" +
    "\000\072\002\uffdf\006\uffdf\007\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\027\103\030\074\031\100\032\120\033\117\034\075" +
    "\035\076\036\104\037\105\040\112\041\077\042\113\044" +
    "\073\045\110\046\116\047\115\060\114\064\102\071\101" +
    "\072\107\073\111\100\106\001\002\000\044\017\030\020" +
    "\035\021\032\022\040\023\027\024\052\042\063\050\054" +
    "\051\065\053\057\072\061\101\067\102\070\103\060\104" +
    "\056\105\064\106\017\001\002\000\072\002\uffe0\006\uffe0" +
    "\007\uffe0\014\uffe0\015\uffe0\016\uffe0\027\103\030\074\031" +
    "\100\032\120\033\117\034\075\035\076\036\104\037\105" +
    "\040\112\041\077\042\113\044\073\045\110\046\116\047" +
    "\115\060\114\064\102\071\101\072\107\073\111\100\106" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\004\061\u0114\001\002\000\044\017\030\020\035" +
    "\021\032\022\040\023\027\024\052\042\063\050\054\051" +
    "\065\053\057\072\061\101\067\102\070\103\060\104\056" +
    "\105\064\106\017\001\002\000\072\002\uffde\006\uffde\007" +
    "\uffde\014\uffde\015\uffde\016\uffde\027\103\030\074\031\100" +
    "\032\120\033\117\034\075\035\076\036\104\037\105\040" +
    "\112\041\077\042\113\044\073\045\110\046\116\047\115" +
    "\060\114\064\102\071\101\072\107\073\111\100\106\001" +
    "\002\000\072\002\uffdd\006\uffdd\007\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\060\114\064\102\071" +
    "\101\072\107\073\111\100\106\001\002\000\004\061\u011a" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\072\002\uffe1\006\uffe1\007\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\060\114\064\102\071" +
    "\101\072\107\073\111\100\106\001\002\000\044\017\030" +
    "\020\035\021\032\022\040\023\027\024\052\042\063\050" +
    "\054\051\065\053\057\072\061\101\067\102\070\103\060" +
    "\104\056\105\064\106\017\001\002\000\072\002\uffe2\006" +
    "\uffe2\007\uffe2\014\uffe2\015\uffe2\016\uffe2\027\103\030\074" +
    "\031\100\032\120\033\117\034\075\035\076\036\104\037" +
    "\105\040\112\041\077\042\113\044\073\045\110\046\116" +
    "\047\115\060\114\064\102\071\101\072\107\073\111\100" +
    "\106\001\002\000\004\061\u011f\001\002\000\044\017\030" +
    "\020\035\021\032\022\040\023\027\024\052\042\063\050" +
    "\054\051\065\053\057\072\061\101\067\102\070\103\060" +
    "\104\056\105\064\106\017\001\002\000\072\002\uffe7\006" +
    "\uffe7\007\uffe7\014\uffe7\015\uffe7\016\uffe7\027\103\030\074" +
    "\031\100\032\120\033\117\034\075\035\076\036\104\037" +
    "\105\040\112\041\077\042\113\044\073\045\110\046\116" +
    "\047\115\060\114\064\102\071\101\072\107\073\111\100" +
    "\106\001\002\000\044\017\030\020\035\021\032\022\040" +
    "\023\027\024\052\042\063\050\054\051\065\053\057\072" +
    "\061\101\067\102\070\103\060\104\056\105\064\106\017" +
    "\001\002\000\072\002\uffe8\006\uffe8\007\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\027\103\030\074\031\100\032\120\033\117" +
    "\034\075\035\076\036\104\037\105\040\112\041\077\042" +
    "\113\044\073\045\110\046\116\047\115\060\114\064\102" +
    "\071\101\072\107\073\111\100\106\001\002\000\044\017" +
    "\030\020\035\021\032\022\040\023\027\024\052\042\063" +
    "\050\054\051\065\053\057\072\061\101\067\102\070\103" +
    "\060\104\056\105\064\106\017\001\002\000\004\061\u0123" +
    "\001\002\000\044\017\030\020\035\021\032\022\040\023" +
    "\027\024\052\042\063\050\054\051\065\053\057\072\061" +
    "\101\067\102\070\103\060\104\056\105\064\106\017\001" +
    "\002\000\072\002\uffe4\006\uffe4\007\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\027\103\030\074\031\100\032\120\033\117\034" +
    "\075\035\076\036\104\037\105\040\112\041\077\042\113" +
    "\044\073\045\110\046\116\047\115\060\114\064\102\071" +
    "\101\072\107\073\111\100\106\001\002\000\072\002\uffe3" +
    "\006\uffe3\007\uffe3\014\uffe3\015\uffe3\016\uffe3\027\103\030" +
    "\074\031\100\032\120\033\117\034\075\035\076\036\104" +
    "\037\105\040\112\041\077\042\113\044\073\045\110\046" +
    "\116\047\115\060\114\064\102\071\101\072\107\073\111" +
    "\100\106\001\002\000\010\006\ufffe\007\ufffe\070\237\001" +
    "\002\000\006\006\u0128\007\013\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\006\003\003\004\005\001\001\000\002\001" +
    "\001\000\006\040\u0125\041\035\001\001\000\012\005\006" +
    "\006\010\011\007\013\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\013\040\014\041\015\001\001\000\004\015\u0102\001" +
    "\001\000\006\007\305\041\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\020\017\023\041\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\022\054\024\276\031\050\032" +
    "\061\036\070\037\052\040\065\041\035\001\001\000\016" +
    "\020\036\021\041\022\033\023\030\040\032\041\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\043\017\023\041\022\001\001\000\002\001\001\000\006" +
    "\017\046\041\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\054\024\071\031\050\032\061\036\070" +
    "\037\052\040\065\041\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\022\054\024\267" +
    "\031\050\032\061\036\070\037\052\040\065\041\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\022\054" +
    "\024\246\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\002\001\001\000\022\022\054\024\244" +
    "\031\050\032\061\036\070\037\052\040\065\041\035\001" +
    "\001\000\002\001\001\000\022\022\054\024\243\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\002\001\001\000\010\016\240\017\023\041\022\001\001" +
    "\000\004\030\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\022\054" +
    "\024\234\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\022\022\054\024\233\031\050\032\061" +
    "\036\070\037\052\040\065\041\035\001\001\000\022\022" +
    "\054\024\232\031\050\032\061\036\070\037\052\040\065" +
    "\041\035\001\001\000\022\022\054\024\231\031\050\032" +
    "\061\036\070\037\052\040\065\041\035\001\001\000\022" +
    "\022\054\024\230\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\022\022\054\024\227\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\004\041\222\001\001\000\004\041\206\001\001\000\022" +
    "\022\054\024\205\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\022\022\054\024\204\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\022\022\054\024\203\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\004\041\167\001\001\000" +
    "\024\017\141\022\054\024\144\031\050\032\061\036\070" +
    "\037\052\040\065\041\142\001\001\000\022\022\054\024" +
    "\140\031\050\032\061\036\070\037\052\040\065\041\035" +
    "\001\001\000\024\022\054\024\132\025\133\031\050\032" +
    "\061\036\070\037\052\040\065\041\035\001\001\000\022" +
    "\022\054\024\131\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\022\022\054\024\130\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\004\041\124\001\001\000\022\022\054\024\123\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\022\022\054\024\122\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\022\022\054\024\121\031" +
    "\050\032\061\036\070\037\052\040\065\041\035\001\001" +
    "\000\022\022\054\024\120\031\050\032\061\036\070\037" +
    "\052\040\065\041\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\054\024\137\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\004\030\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\156\021\041" +
    "\022\033\023\030\040\032\041\035\001\001\000\026\017" +
    "\150\022\054\024\132\025\151\031\050\032\061\036\070" +
    "\037\052\040\065\041\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\022\054\024\154\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\160\041\022\001\001\000" +
    "\002\001\001\000\022\022\054\024\162\031\050\032\061" +
    "\036\070\037\052\040\065\041\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\054\024\165\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\172\041\022\001\001\000\002\001" +
    "\001\000\006\017\177\041\022\001\001\000\022\022\054" +
    "\024\175\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\054\024\201\031\050\032\061\036" +
    "\070\037\052\040\065\041\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\022\054\024\214" +
    "\026\213\027\211\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\022\054\024\214\027\217\031\050\032\061\036\070" +
    "\037\052\040\065\041\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\221\021\041\022\033\023\030" +
    "\040\032\041\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\054\024\214\026\225\027\211\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\054\024\242\031\050\032\061\036\070" +
    "\037\052\040\065\041\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\054\024\250\031\050\032\061\036" +
    "\070\037\052\040\065\041\035\001\001\000\002\001\001" +
    "\000\022\022\054\024\252\031\050\032\061\036\070\037" +
    "\052\040\065\041\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\022\054\024\260\031\050\032\061\033" +
    "\257\034\255\035\256\036\070\037\052\040\065\041\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\022\054" +
    "\024\263\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\002\001\001\000\026\022\054\024\260" +
    "\031\050\032\061\034\266\035\256\036\070\037\052\040" +
    "\065\041\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\271\017\023\041\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\274" +
    "\021\041\022\033\023\030\040\032\041\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\300\021\041\022\033\023\030\040\032\041\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\303" +
    "\021\041\022\033\023\030\040\032\041\035\001\001\000" +
    "\002\001\001\000\004\041\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\322\001\001\000\004\041" +
    "\311\001\001\000\002\001\001\000\010\016\313\017\023" +
    "\041\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\316\021\041\022\033\023\030\040\032\041\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\321\021\041\022\033\023\030\040\032\041\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\022\054\024" +
    "\324\031\050\032\061\036\070\037\052\040\065\041\035" +
    "\001\001\000\002\001\001\000\022\022\054\024\326\031" +
    "\050\032\061\036\070\037\052\040\065\041\035\001\001" +
    "\000\002\001\001\000\016\020\330\021\041\022\033\023" +
    "\030\040\032\041\035\001\001\000\004\012\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\054\024\335\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\054\024\341\031\050" +
    "\032\061\036\070\037\052\040\065\041\035\001\001\000" +
    "\002\001\001\000\022\022\054\024\343\031\050\032\061" +
    "\036\070\037\052\040\065\041\035\001\001\000\002\001" +
    "\001\000\022\022\054\024\345\031\050\032\061\036\070" +
    "\037\052\040\065\041\035\001\001\000\002\001\001\000" +
    "\004\041\355\001\001\000\004\041\351\001\001\000\022" +
    "\022\054\024\354\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\002\001\001\000\022\022\054" +
    "\024\353\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\360\014\357\040\361\041\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\364\021\041\022\033\023" +
    "\030\040\032\041\035\001\001\000\002\001\001\000\022" +
    "\022\054\024\366\031\050\032\061\036\070\037\052\040" +
    "\065\041\035\001\001\000\002\001\001\000\022\022\054" +
    "\024\370\031\050\032\061\036\070\037\052\040\065\041" +
    "\035\001\001\000\002\001\001\000\012\010\372\014\357" +
    "\040\361\041\362\001\001\000\002\001\001\000\012\010" +
    "\377\014\357\040\361\041\362\001\001\000\002\001\001" +
    "\000\012\010\376\014\357\040\361\041\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\u0121\001\001" +
    "\000\004\041\u011b\001\001\000\002\001\001\000\004\041" +
    "\u0105\001\001\000\022\022\054\024\u0108\031\050\032\061" +
    "\036\070\037\052\040\065\041\035\001\001\000\002\001" +
    "\001\000\022\022\054\024\u0107\031\050\032\061\036\070" +
    "\037\052\040\065\041\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\u0116\001\001\000\004\041\u0112" +
    "\001\001\000\004\041\u010c\001\001\000\002\001\001\000" +
    "\022\022\054\024\u010e\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\002\001\001\000\022\022" +
    "\054\024\u0110\031\050\032\061\036\070\037\052\040\065" +
    "\041\035\001\001\000\002\001\001\000\022\022\054\024" +
    "\u0115\031\050\032\061\036\070\037\052\040\065\041\035" +
    "\001\001\000\002\001\001\000\022\022\054\024\u0114\031" +
    "\050\032\061\036\070\037\052\040\065\041\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\054\024\u0118\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\002\001\001\000\022\022" +
    "\054\024\u011a\031\050\032\061\036\070\037\052\040\065" +
    "\041\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\054\024\u011d\031\050\032\061\036\070\037\052" +
    "\040\065\041\035\001\001\000\002\001\001\000\022\022" +
    "\054\024\u011f\031\050\032\061\036\070\037\052\040\065" +
    "\041\035\001\001\000\002\001\001\000\022\022\054\024" +
    "\u0124\031\050\032\061\036\070\037\052\040\065\041\035" +
    "\001\001\000\002\001\001\000\022\022\054\024\u0123\031" +
    "\050\032\061\036\070\037\052\040\065\041\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0126\001" +
    "\001\000\012\005\006\006\010\011\007\013\011\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Yyparse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Yyparse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Yyparse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	// Init the log
	CUP$Yyparse$actions.setLog(log);
	// Init the log
	CUP$Yyparse$actions.setFactory(factory);

    }


	// Log file
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	public ILog getLog() {
		return log;
	}

	// Factory
	protected ASTFactory factory;
	public void setFactory(ASTFactory factory) {
		this.factory = factory;
	}
	public ASTFactory getFactory() {
		return factory;
	}

	// Change the method report_error to display location and the reason
	public void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}
	
	// Change the method report_error to display location and the reason
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Yyparse$actions {


	// Log file
	protected static ILog log;
	public static void setLog(ILog log) {
		CUP$Yyparse$actions.log = log;
	}
	public static ILog getLog() {
		return CUP$Yyparse$actions.log;
	}

	// Factory
	protected static ASTFactory factory;
	public static void setFactory(ASTFactory factory) {
		CUP$Yyparse$actions.factory = factory;
	}
	public static ASTFactory getFactory() {
		return CUP$Yyparse$actions.factory;
	}

	// Check and make a variableDeclaration
	public static VariableDeclarationAS makeVariableDeclaration(OclExpressionAS nameExp, TypeAS type, OclExpressionAS init, int left, int right) {
		if (nameExp instanceof PathNameExpAS) {
			List pathName = ((PathNameExpAS)nameExp).getPathName();
			if (pathName.size() == 1) {
				String name = (String)pathName.get(0);
				return factory.buildVariableDeclaration(name, type, init);
			}
		}
		Symbol info = new Symbol(0, left, right);
		report_error("Variable declaration expected", info);
		return null;
	}
	
	// Report errors
	public static void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}


  private final Yyparse parser;

  /** Constructor */
  CUP$Yyparse$actions(Yyparse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Yyparse$do_action(
    int                        CUP$Yyparse$act_num,
    java_cup.runtime.lr_parser CUP$Yyparse$parser,
    java.util.Stack            CUP$Yyparse$stack,
    int                        CUP$Yyparse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Yyparse$result;

      /* select the action based on the action number */
      switch (CUP$Yyparse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simpleName ::= SIMPLE_NAME 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = value;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(31/*simpleName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // pathName ::= pathName COLON_COLON simpleName 
            {
              List RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add name to path
								RESULT = path;
								path.add(name);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(30/*pathName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pathName ::= simpleName 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a
								List seq = new Vector();
								seq.add(name);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(30/*pathName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primitiveLiteralExp ::= FALSE 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // primitiveLiteralExp ::= TRUE 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // primitiveLiteralExp ::= STRING 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create StringLiteralExp
								RESULT = factory.buildStringLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // primitiveLiteralExp ::= REAL 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create RealLiteralExp
								RESULT = factory.buildRealLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // primitiveLiteralExp ::= INTEGER 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create IntegerLiteralExp
								RESULT = factory.buildIntegerLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tupleLiteralExp ::= TUPLE LEFT_BRA variableDeclarationList RIGHT_BRA 
            {
              TupleLiteralExpAS RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleLiteralExp
								RESULT = factory.buildTupleLiteralExp(seq);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(28/*tupleLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // collectionRange ::= oclExpression DOT_DOT oclExpression 
            {
              CollectionRangeAS RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS first = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int lastleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int lastright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS last = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create CollectionRange
								RESULT = factory.buildCollectionRange(first, last);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(27/*collectionRange*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // collectionLiteralPart ::= collectionRange 
            {
              CollectionLiteralPartAS RESULT = null;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionRangeAS range = (CollectionRangeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = range;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*collectionLiteralPart*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // collectionLiteralPart ::= oclExpression 
            {
              CollectionLiteralPartAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create CollectionItem
								RESULT = factory.buildCollectionItem(exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*collectionLiteralPart*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // collectionLiteralParts ::= collectionLiteralParts COMMA collectionLiteralPart 
            {
              List RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add collPart to seq
								RESULT = seq;
								seq.add(colPart);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(25/*collectionLiteralParts*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // collectionLiteralParts ::= collectionLiteralPart 
            {
              List RESULT = null;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(colPart);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(25/*collectionLiteralParts*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // collectionKind ::= ORDERED_SET 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to ORDERED_SET
								RESULT = CollectionKindAS$Class.ORDERED_SET;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // collectionKind ::= COLLECTION 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to COLLECTION
								RESULT = CollectionKindAS$Class.COLLECTION;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // collectionKind ::= SEQUENCE 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to SEQUENCE
								RESULT = CollectionKindAS$Class.SEQUENCE;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // collectionKind ::= BAG 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to BAG
								RESULT = CollectionKindAS$Class.BAG;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // collectionKind ::= SET 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to SET
								RESULT = CollectionKindAS$Class.SET;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // collectionLiteralExp ::= collectionKind LEFT_BRA RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(24/*collectionLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // collectionLiteralExp ::= collectionKind LEFT_BRA collectionLiteralParts RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, parts);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(24/*collectionLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literalExp ::= primitiveLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		PrimitiveLiteralExpAS exp = (PrimitiveLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(23/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literalExp ::= tupleLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TupleLiteralExpAS exp = (TupleLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(23/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literalExp ::= collectionLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralExpAS exp = (CollectionLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(23/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // isMarkedPre ::= AT PRE 
            {
              Boolean RESULT = null;
		
								RESULT = new Boolean(true);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(22/*isMarkedPre*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // isMarkedPre ::= 
            {
              Boolean RESULT = null;
		
								RESULT = new Boolean(false);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(22/*isMarkedPre*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // oclMessageArgument ::= oclExpression 
            {
              OclMessageArgAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OclMessageArg
								RESULT = factory.buildOclMessageArg(exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(21/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // oclMessageArgument ::= QUESTION COLON type 
            {
              OclMessageArgAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OclMessageArg
								OclMessageArgAS arg = new OclMessageArgAS$Class();
								arg.setType(type);
								RESULT = arg;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(21/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // oclMessageArgument ::= QUESTION 
            {
              OclMessageArgAS RESULT = null;
		
								// Create OclMessageArg
								OclMessageArgAS arg = new OclMessageArgAS$Class();
								RESULT = arg;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(21/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // oclMessageArgumentList ::= oclMessageArgumentList COMMA oclMessageArgument 
            {
              List RESULT = null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
										
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(20/*oclMessageArgumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // oclMessageArgumentList ::= oclMessageArgument 
            {
              List RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(20/*oclMessageArgumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // argumentList ::= argumentList COMMA oclExpression 
            {
              List RESULT = null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
			  				
              CUP$Yyparse$result = new java_cup.runtime.Symbol(19/*argumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argumentList ::= oclExpression 
            {
              List RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(19/*argumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // oclExpression ::= oclExpression UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS$Class.UP, target, name, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // oclExpression ::= oclExpression UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS$Class.UP, target, name, arguments);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS$Class.UP_UP, target, name, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS$Class.UP_UP, target, name, arguments);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // oclExpression ::= LET variableDeclarationList IN oclExpression 
            {
              OclExpressionAS RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create LetExp
								RESULT = factory.buildLetExp(variables, exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oclExpression ::= oclExpression IMPLIES oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create ImpliesExp
								RESULT = factory.buildLogicalExp(4, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oclExpression ::= oclExpression XOR oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OrExp
								RESULT = factory.buildLogicalExp(3, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oclExpression ::= oclExpression OR oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OrExp
								RESULT = factory.buildLogicalExp(2, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oclExpression ::= oclExpression AND oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create AndExp
								RESULT = factory.buildLogicalExp(1, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oclExpression ::= oclExpression NE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<>", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // oclExpression ::= oclExpression EQ oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // oclExpression ::= oclExpression GE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // oclExpression ::= oclExpression LE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // oclExpression ::= oclExpression GT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // oclExpression ::= oclExpression LT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // oclExpression ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              OclExpressionAS RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS condition = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS thenExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS elseExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IfExp
								RESULT = factory.buildIfExp(condition, thenExp, elseExp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // oclExpression ::= oclExpression MINUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // oclExpression ::= oclExpression PLUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("+", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // oclExpression ::= oclExpression INT_MOD oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("mod", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // oclExpression ::= oclExpression INT_DIVIDE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("div", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // oclExpression ::= oclExpression DIVIDE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("/", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // oclExpression ::= oclExpression TIMES oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("*", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // oclExpression ::= MINUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", opd, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // oclExpression ::= NOT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create NotExp
								RESULT = factory.buildLogicalExp(0, opd, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, null, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration SEMICOLON variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // oclExpression ::= oclExpression LEFT_BRK argumentList RIGHT_BRK isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create AssociationCallExp
								RESULT = factory.buildAssociationCallExp(exp, arguments, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // oclExpression ::= oclExpression LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IteratorCallExp
								RESULT = factory.buildIteratorCallExp(exp1, var1, null, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // oclExpression ::= oclExpression LEFT_PAR oclExpression COLON type COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, type, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = factory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, null, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = factory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA argumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS arg1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg1);
								args.addAll(list);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // oclExpression ::= oclExpression LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // oclExpression ::= oclExpression LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OperationCallExp
								RESULT = factory.buildOperationCallExp(exp, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // oclExpression ::= oclExpression MINUS_GT simpleName 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create ArrowSelectionExp
								RESULT = factory.buildArrowSelectionExp(exp, simpleName);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // oclExpression ::= oclExpression DOT simpleName isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create DotSelectionExp
								RESULT = factory.buildDotSelectionExp(exp, simpleName, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // oclExpression ::= pathName isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PathNameExp
								RESULT = factory.buildPathNameExp(path, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // oclExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // oclExpression ::= literalExp 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		LiteralExpAS exp = (LiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Literal expression without enumLiteralExp
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tupleType ::= TUPLE_TYPE LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              TupleTypeAS RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleType
								RESULT = factory.buildTupleType(varList);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(17/*tupleType*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // collectionType ::= collectionKind LEFT_PAR type RIGHT_PAR 
            {
              CollectionTypeAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS elementType = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionType
								RESULT = factory.buildCollectionType(kind, elementType);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*collectionType*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= tupleType 
            {
              TypeAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TupleTypeAS type = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= collectionType 
            {
              TypeAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionTypeAS type = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= pathName 
            {
              TypeAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PathNameType
								RESULT = factory.buildPathNameType(path);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableDeclaration ::= simpleName 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variableDeclaration ::= simpleName EQ oclExpression 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, init);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variableDeclaration ::= simpleName COLON type 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variableDeclaration ::= simpleName COLON type EQ oclExpression 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, init);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variableDeclarationList ::= variableDeclarationList COMMA variableDeclaration 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
			  					// Append 'var' to 'varList' 
			  					RESULT = varList;
			  					RESULT.add(var);
			  				
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*variableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variableDeclarationList ::= variableDeclaration 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								RESULT = new Vector();
								RESULT.add(var);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*variableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, new Vector(), null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operation
								RESULT = factory.buildOperation(path, name, new Vector(), type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.BODY, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.BODY, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // prePostOrBodyDecl ::= prePostOrBodyDecl POST COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.POST, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // prePostOrBodyDecl ::= prePostOrBodyDecl POST simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.POST, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.PRE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.PRE, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prePostOrBodyDecl ::= BODY COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.BODY, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prePostOrBodyDecl ::= BODY simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.BODY, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prePostOrBodyDecl ::= POST COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.POST, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prePostOrBodyDecl ::= POST simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.POST, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // prePostOrBodyDecl ::= PRE COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.PRE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // prePostOrBodyDecl ::= PRE simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								// Create a constraint
								ConstraintAS cons = factory.buildConstraint(ConstraintKindAS$Class.PRE, name, exp, null);
								// Create a list
								RESULT = new Vector();
								RESULT.add(cons);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operationContextDecl ::= CONTEXT operation prePostOrBodyDecl 
            {
              OperationContextDeclAS RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OperationContextDecl
								RESULT = factory.buildOperationContextDeclaration(oper, list);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(9/*operationContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defExpression ::= operation EQ oclExpression 
            {
              Object[] RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a container
								RESULT = new Object[] {oper, exp};
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(6/*defExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defExpression ::= simpleName COLON type EQ oclExpression 
            {
              Object[] RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a container
								VariableDeclarationAS var = new VariableDeclarationAS$Class();
								var.setName(name);
								var.setType(type);
								var.setInitExp(exp);
								RESULT = new Object[] {var, exp};
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(6/*defExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // invOrDef ::= invOrDef DEF COLON defExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DEF, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // invOrDef ::= invOrDef DEF simpleName COLON defExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DEF, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // invOrDef ::= invOrDef INV COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INV, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // invOrDef ::= invOrDef INV simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INV, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // invOrDef ::= DEF COLON defExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DEF, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // invOrDef ::= DEF simpleName COLON defExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DEF, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // invOrDef ::= INV COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INV, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // invOrDef ::= INV simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INV, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classifierContextDecl ::= CONTEXT pathName invOrDef 
            {
              ClassifierContextDeclAS RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a ClassifierContext
								RESULT = factory.buildClassifierContextDeclaration(path, constraints, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(4/*classifierContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // initOrDerValue ::= initOrDerValue DERIVE COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DERIVE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // initOrDerValue ::= initOrDerValue INIT COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INIT, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // initOrDerValue ::= DERIVE COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.DERIVE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initOrDerValue ::= INIT COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS$Class.INIT, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // propertyContextDecl ::= CONTEXT pathName simpleName COLON type initOrDerValue 
            {
              PropertyContextDeclAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PropertyContextDecl
								RESULT = factory.buildPropertyContextDeclaration(path, name, type, constraints);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(7/*propertyContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contextDeclaration ::= operationContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OperationContextDeclAS contextDecl = (OperationContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(3/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contextDeclaration ::= classifierContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		ClassifierContextDeclAS contextDecl = (ClassifierContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(3/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contextDeclaration ::= propertyContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		PropertyContextDeclAS contextDecl = (PropertyContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(3/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contextDeclList ::= contextDeclList contextDeclaration 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		ContextDeclarationAS contextDecl = (ContextDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add element to list
								RESULT = list;
								RESULT.add(contextDecl);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(2/*contextDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contextDeclList ::= 
            {
              List RESULT = null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(2/*contextDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packageDeclaration ::= contextDeclList 
            {
              PackageDeclarationAS RESULT = null;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(new Vector(), contextDecls);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(1/*packageDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // packageDeclaration ::= PACKAGE pathName contextDeclList ENDPACKAGE 
            {
              PackageDeclarationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(path, contextDecls);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(1/*packageDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= packageDeclaration EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		PackageDeclarationAS start_val = (PackageDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		RESULT = start_val;
              CUP$Yyparse$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Yyparse$parser.done_parsing();
          return CUP$Yyparse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

