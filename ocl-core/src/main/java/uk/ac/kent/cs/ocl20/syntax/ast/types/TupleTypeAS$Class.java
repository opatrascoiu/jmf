/**
 *
 *  Class TupleTypeAS$Class.java
 *
 *  Generated by KMFStudio at 11 June 2003 13:46:49
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.ocl20.syntax.ast.types;

import java.util.List;
import java.util.Vector;

import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitable;
import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitor;

public class TupleTypeAS$Class
implements
	TupleTypeAS,
    SyntaxVisitable
{
	/** Default constructor */
	public TupleTypeAS$Class() {
		//--- Set property 'variableDeclarationList' from 'TupleTypeAS' ---
		this.variableDeclarationList = new Vector();
	}


	/** Property 'variableDeclarationList' from 'TupleTypeAS' */
	protected List variableDeclarationList;
	/** Get property 'variableDeclarationList' from 'TupleTypeAS' */
	public List getVariableDeclarationList() {
		return variableDeclarationList;
	}
	/** Set property 'variableDeclarationList' from 'TupleTypeAS' */
	public void setVariableDeclarationList(List variableDeclarationList) { 
		this.variableDeclarationList = variableDeclarationList;
	}

	/** Override toString */
	public String toString() {
		String strId = "ast.types.TupleTypeAS";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId;
		else
			return strId+" '"+name+"'";
	}

	/** Accept 'uk.ac.kent.cs.ocl20.syntax.ast.types.TupleTypeAS$Visitor' */
	public Object accept(SyntaxVisitor v, Object data) {
		return v.visit(this, data);
	}

	/** Clone the object */
	public Object clone() {
		TupleTypeAS$Class obj = new TupleTypeAS$Class();
		obj.variableDeclarationList = variableDeclarationList==null ? null : (List)((Vector)this.variableDeclarationList).clone();
		return obj;
	}
}
