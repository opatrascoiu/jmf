/**
 *
 *  Class CollectionItemAS$Class.java
 *
 *  Generated by KMFStudio at 11 June 2003 13:46:50
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.ocl20.syntax.ast.expressions;

import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitable;
import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitor;

public class CollectionItemAS$Class
implements
	CollectionItemAS,
    SyntaxVisitable
{
	/** Default constructor */
	public CollectionItemAS$Class() {
		//--- Set property 'item' from 'CollectionItemAS' ---
		this.item = null;
	}


	/** Property 'item' from 'CollectionItemAS' */
	protected OclExpressionAS item;
	/** Get property 'item' from 'CollectionItemAS' */
	public OclExpressionAS getItem() {
		return item;
	}
	/** Set property 'item' from 'CollectionItemAS' */
	public void setItem(OclExpressionAS item) { 
		this.item = item;
	}

	/** Override toString */
	public String toString() {
		String strId = "ast.expressions.CollectionItemAS";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId;
		else
			return strId+" '"+name+"'";
	}

	/** Accept 'uk.ac.kent.cs.ocl20.syntax.ast.expressions.CollectionItemAS$Visitor' */
	public Object accept(SyntaxVisitor v, Object data) {
		return v.visit(this, data);
	}

	/** Clone the object */
	public Object clone() {
		CollectionItemAS$Class obj = new CollectionItemAS$Class();
		obj.item = item==null ? null : this.item;
		return obj;
	}
}
