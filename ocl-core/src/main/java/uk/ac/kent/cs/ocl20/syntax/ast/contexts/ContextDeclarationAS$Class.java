/**
 *
 *  Class ContextDeclarationAS$Class.java
 *
 *  Generated by KMFStudio at 11 June 2003 13:46:49
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.ocl20.syntax.ast.contexts;

import java.util.List;
import java.util.Vector;

import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitable;
import uk.ac.kent.cs.ocl20.syntax.SyntaxVisitor;

public class ContextDeclarationAS$Class
implements
	ContextDeclarationAS,
    SyntaxVisitable
{
	/** Default constructor */
	public ContextDeclarationAS$Class() {
		//--- Set property 'constraints' from 'ContextDeclarationAS' ---
		this.constraints = new Vector();
	}


	/** Property 'constraints' from 'ContextDeclarationAS' */
	protected List constraints;
	/** Get property 'constraints' from 'ContextDeclarationAS' */
	public List getConstraints() {
		return constraints;
	}
	/** Set property 'constraints' from 'ContextDeclarationAS' */
	public void setConstraints(List constraints) { 
		this.constraints = constraints;
	}

	/** Get the location */
	protected Object location;
	public Object getLocation() {
		return location;
	}
	/** Set the location */
	public void setLocation(Object location) {
		this.location = location;
	}
	
	/** Override toString */
	public String toString() {
		String strId = "ast.contexts.ContextDeclarationAS";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId;
		else
			return strId+" '"+name+"'";
	}

	/** Accept 'uk.ac.kent.cs.ocl20.syntax.ast.contexts.ContextDeclarationAS$Visitor' */
	public Object accept(SyntaxVisitor v, Object data) {
		return v.visit(this, data);
	}

	/** Clone the object */
	public Object clone() {
		ContextDeclarationAS$Class obj = new ContextDeclarationAS$Class();
		obj.constraints = constraints==null ? null : (List)((Vector)this.constraints).clone();
		return obj;
	}
}
