/**
 *
 *  Class VariableDeclaration$Class.java
 *
 *  Generated by KMFStudio at 09 May 2003 17:47:44
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.ocl20.semantics.model.expressions;

import java.util.LinkedHashSet;
import java.util.Set;

import uk.ac.kent.cs.ocl20.semantics.SemanticsVisitable;
import uk.ac.kent.cs.ocl20.semantics.SemanticsVisitor;

public class VariableDeclaration$Class
implements
    VariableDeclaration,
    SemanticsVisitable
{
	/** Default constructor */
	public VariableDeclaration$Class() {
		//--- Set property 'name' from 'ModelElement' ---
		this.name = null;
		//--- Set property 'type' from 'VariableDeclaration' ---
		this.type = null;
		//--- Set property 'baseExp' from 'VariableDeclaration' ---
		this.baseExp = null;
		//--- Set property 'initExpression' from 'VariableDeclaration' ---
		this.initExpression = null;
		//--- Set property 'loopExpr' from 'VariableDeclaration' ---
		this.loopExpr = null;
		//--- Set property 'variableExp' from 'VariableDeclaration' ---
		this.variableExp = new LinkedHashSet();
	}
	/** Specialized constructor */
	public VariableDeclaration$Class(String name) {
		//--- Set property 'name' from 'ModelElement' ---
		this.name = name;
		//--- Set property 'type' from 'VariableDeclaration' ---
		this.type = null;
		//--- Set property 'baseExp' from 'VariableDeclaration' ---
		this.baseExp = null;
		//--- Set property 'initExpression' from 'VariableDeclaration' ---
		this.initExpression = null;
		//--- Set property 'loopExpr' from 'VariableDeclaration' ---
		this.loopExpr = null;
		//--- Set property 'variableExp' from 'VariableDeclaration' ---
		this.variableExp = new LinkedHashSet();
	}


	/** Property 'name' from 'ModelElement' */
	protected String name;
	/** Get property 'name' from 'ModelElement' */
	public String getName() {
		return name;
	}
	/** Set property 'name' from 'ModelElement' */
	public void setName(String name) {
		this.name = name;
	}

	/** Property 'type' from 'VariableDeclaration' */
	protected uk.ac.kent.cs.ocl20.semantics.bridge.Classifier type;
	/** Get property 'type' from 'VariableDeclaration' */
	public uk.ac.kent.cs.ocl20.semantics.bridge.Classifier getType() {
		return type;
	}
	/** Set property 'type' from 'VariableDeclaration' */
	public void setType(uk.ac.kent.cs.ocl20.semantics.bridge.Classifier type) { 
		this.type = type;
	}

	/** Property 'baseExp' from 'VariableDeclaration' */
	protected IterateExp baseExp;
	/** Get property 'baseExp' from 'VariableDeclaration' */
	public IterateExp getBaseExp() {
		return baseExp;
	}
	/** Set property 'baseExp' from 'VariableDeclaration' */
	public void setBaseExp(IterateExp baseExp) { 
		this.baseExp = baseExp;
	}

	/** Property 'initExpression' from 'VariableDeclaration' */
	protected OclExpression initExpression;
	/** Get property 'initExpression' from 'VariableDeclaration' */
	public OclExpression getInitExpression() {
		return initExpression;
	}
	/** Set property 'initExpression' from 'VariableDeclaration' */
	public void setInitExpression(OclExpression initExpression) { 
		this.initExpression = initExpression;
	}

	/** Property 'loopExpr' from 'VariableDeclaration' */
	protected LoopExp loopExpr;
	/** Get property 'loopExpr' from 'VariableDeclaration' */
	public LoopExp getLoopExpr() {
		return loopExpr;
	}
	/** Set property 'loopExpr' from 'VariableDeclaration' */
	public void setLoopExpr(LoopExp loopExpr) { 
		this.loopExpr = loopExpr;
	}

	/** Property 'variableExp' from 'VariableDeclaration' */
	protected Set variableExp;
	/** Get property 'variableExp' from 'VariableDeclaration' */
	public Set getVariableExp() {
		return variableExp;
	}
	/** Set property 'variableExp' from 'VariableDeclaration' */
	public void setVariableExp(Set variableExp) { 
		this.variableExp = variableExp;
	}

	/** Get the delegate */
	public Object getDelegate() {
		return null;
	}

	/** Override toString */
	public String toString() {
		String strId = "VariableDeclaration";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId;
		else
			return strId+" '"+name+"'";
	}

	/** Accept 'uk.ac.kent.cs.ocl20.semantics.model.expressions.VariableDeclaration$Visitor' */
	public Object accept(SemanticsVisitor v, Object data) {
		return v.visit(this, data);
	}

	/** Clone the object */
	public Object clone() {
		VariableDeclaration$Class obj = new VariableDeclaration$Class();
		obj.name = name==null ? null : this.name;
		obj.type = type==null ? null : this.type;
		obj.baseExp = baseExp==null ? null : this.baseExp;
		obj.initExpression = initExpression==null ? null : this.initExpression;
		obj.loopExpr = loopExpr==null ? null : this.loopExpr;
		obj.variableExp = variableExp==null ? null : (Set)((LinkedHashSet)this.variableExp).clone();
		return obj;
	}
}
