/**
 *
 *  Class Unit$Class.java
 *
 *  Generated by KMFStudio at 22 July 2003 18:50:16
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.yatl.syntax.transformations;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import uk.ac.kent.cs.yatl.YatlVisitable;
import uk.ac.kent.cs.yatl.YatlVisitor;

public class Unit$Class
implements
	Unit,
    YatlVisitable
{
	/** Default constructor */
	public Unit$Class() {
		//--- Set property 'startPathName' from 'Unit' ---
		this.startPathName = new Vector();
		//--- Set property 'imports' from 'Unit' ---
		this.imports = new Vector();
		//--- Set property 'startRule' from 'Unit' ---
		this.startRule = null;
		//--- Set property 'namespaces' from 'Unit' ---
		this.namespaces = new Vector();
	}
	/** Specialized constructor */
	public Unit$Class(List startPathName) {
		//--- Set property 'startPathName' from 'Unit' ---
		this.startPathName = startPathName;
		//--- Set property 'imports' from 'Unit' ---
		this.imports = new Vector();
		//--- Set property 'startRule' from 'Unit' ---
		this.startRule = null;
		//--- Set property 'namespaces' from 'Unit' ---
		this.namespaces = new Vector();
	}


	/** Property 'startPathName' from 'Unit' */
	protected List startPathName;
	/** Get property 'startPathName' from 'Unit' */
	public List getStartPathName() {
		return startPathName;
	}
	/** Set property 'startPathName' from 'Unit' */
	public void setStartPathName(List startPathName) {
		this.startPathName = startPathName;
	}

	/** Property 'imports' from 'Unit' */
	protected List imports;
	/** Get property 'imports' from 'Unit' */
	public List getImports() {
		return imports;
	}
	/** Set property 'imports' from 'Unit' */
	public void setImports(List imports) { 
		this.imports = imports;
	}

	/** Property 'startRule' from 'Unit' */
	protected Rule startRule;
	/** Get property 'startRule' from 'Unit' */
	public Rule getStartRule() {
		return startRule;
	}
	/** Set property 'startRule' from 'Unit' */
	public void setStartRule(Rule startRule) { 
		this.startRule = startRule;
	}

	/** Property 'namespaces' from 'Unit' */
	protected List namespaces;
	/** Get property 'namespaces' from 'Unit' */
	public List getNamespaces() {
		return namespaces;
	}
	/** Set property 'namespaces' from 'Unit' */
	public void setNamespaces(List namespaces) { 
		this.namespaces = namespaces;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.transformations.Unit";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		Iterator importsIt = this.imports.iterator();
		while (importsIt.hasNext()) {
			Import importsObj = (Import)importsIt.next();
			if (importsObj != null)
				importsObj.setUnit(null);
		}
			if (startRule != null)
			this.startRule.setUnit(null);
		Iterator namespacesIt = this.namespaces.iterator();
		while (namespacesIt.hasNext()) {
			Namespace namespacesObj = (Namespace)namespacesIt.next();
			if (namespacesObj != null)
				namespacesObj.setUnit(null);
		}
	}

	/** Clone the object */
	public Object clone() {
		Unit$Class obj = new Unit$Class();
		obj.startPathName = startPathName==null ? null : (List)((Vector)this.startPathName).clone();
		obj.imports = imports==null ? null : (List)((Vector)this.imports).clone();
		obj.startRule = startRule==null ? null : this.startRule;
		obj.namespaces = namespaces==null ? null : (List)((Vector)this.namespaces).clone();
		return obj;
	}

	/** Accept 'uk.ac.kent.cs.ktl.syntax.transformations.Unit$Visitor' */
	public Object accept(YatlVisitor v, Object data) {
		return v.visit(this, data);
	}
}
