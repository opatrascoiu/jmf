/**
 *
 *  Class Namespace$Class.java
 *
 *  Generated by KMFStudio at 22 July 2003 18:50:16
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.yatl.syntax.transformations;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import uk.ac.kent.cs.yatl.YatlVisitable;
import uk.ac.kent.cs.yatl.YatlVisitor;

public class Namespace$Class
implements
	Namespace,
    YatlVisitable
{
	/** Default constructor */
	public Namespace$Class() {
		//--- Set property 'name' from 'NamedElement' ---
		this.name = null;
		//--- Set property 'location' from 'Namespace' ---
		this.location = null;
		//--- Set property 'sourceModel' from 'Namespace' ---
		this.sourceModel = null;
		//--- Set property 'queries' from 'Namespace' ---
		this.queries = new Vector();
		//--- Set property 'transformations' from 'Namespace' ---
		this.transformations = new Vector();
		//--- Set property 'targetModel' from 'Namespace' ---
		this.targetModel = null;
		//--- Set property 'unit' from 'Namespace' ---
		this.unit = null;
	}
	/** Specialized constructor */
	public Namespace$Class(String name, Object location) {
		//--- Set property 'name' from 'NamedElement' ---
		this.name = name;
		//--- Set property 'location' from 'Namespace' ---
		this.location = location;
		//--- Set property 'sourceModel' from 'Namespace' ---
		this.sourceModel = null;
		//--- Set property 'queries' from 'Namespace' ---
		this.queries = new Vector();
		//--- Set property 'transformations' from 'Namespace' ---
		this.transformations = new Vector();
		//--- Set property 'targetModel' from 'Namespace' ---
		this.targetModel = null;
		//--- Set property 'unit' from 'Namespace' ---
		this.unit = null;
	}


	/** Property 'name' from 'NamedElement' */
	protected String name;
	/** Get property 'name' from 'NamedElement' */
	public String getName() {
		return name;
	}
	/** Set property 'name' from 'NamedElement' */
	public void setName(String name) {
		this.name = name;
	}

	/** Property 'location' from 'Namespace' */
	protected Object location;
	/** Get property 'location' from 'Namespace' */
	public Object getLocation() {
		return location;
	}
	/** Set property 'location' from 'Namespace' */
	public void setLocation(Object location) {
		this.location = location;
	}

	/** Property 'sourceModel' from 'Namespace' */
	protected Model sourceModel;
	/** Get property 'sourceModel' from 'Namespace' */
	public Model getSourceModel() {
		return sourceModel;
	}
	/** Set property 'sourceModel' from 'Namespace' */
	public void setSourceModel(Model sourceModel) { 
		this.sourceModel = sourceModel;
	}

	/** Property 'queries' from 'Namespace' */
	protected List queries;
	/** Get property 'queries' from 'Namespace' */
	public List getQueries() {
		return queries;
	}
	/** Set property 'queries' from 'Namespace' */
	public void setQueries(List queries) { 
		this.queries = queries;
	}

	/** Property 'transformations' from 'Namespace' */
	protected List transformations;
	/** Get property 'transformations' from 'Namespace' */
	public List getTransformations() {
		return transformations;
	}
	/** Set property 'transformations' from 'Namespace' */
	public void setTransformations(List transformations) { 
		this.transformations = transformations;
	}

	/** Property 'targetModel' from 'Namespace' */
	protected Model targetModel;
	/** Get property 'targetModel' from 'Namespace' */
	public Model getTargetModel() {
		return targetModel;
	}
	/** Set property 'targetModel' from 'Namespace' */
	public void setTargetModel(Model targetModel) { 
		this.targetModel = targetModel;
	}

	/** Property 'unit' from 'Namespace' */
	protected Unit unit;
	/** Get property 'unit' from 'Namespace' */
	public Unit getUnit() {
		return unit;
	}
	/** Set property 'unit' from 'Namespace' */
	public void setUnit(Unit unit) { 
		this.unit = unit;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.transformations.Namespace";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
			if (sourceModel != null)
			this.sourceModel.setNamespace_(null);
		Iterator queriesIt = this.queries.iterator();
		while (queriesIt.hasNext()) {
			Query queriesObj = (Query)queriesIt.next();
			if (queriesObj != null)
				queriesObj.setNamespace_(null);
		}
		Iterator transformationsIt = this.transformations.iterator();
		while (transformationsIt.hasNext()) {
			Transformation transformationsObj = (Transformation)transformationsIt.next();
			if (transformationsObj != null)
				transformationsObj.setNamespace_(null);
		}
			if (targetModel != null)
			this.targetModel.setNamespace_(null);
		if (unit != null)
			this.unit.getNamespaces().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		Namespace$Class obj = new Namespace$Class();
		obj.name = name==null ? null : this.name;
		obj.location = location==null ? null : this.location;
		obj.sourceModel = sourceModel==null ? null : this.sourceModel;
		obj.queries = queries==null ? null : (List)((Vector)this.queries).clone();
		obj.transformations = transformations==null ? null : (List)((Vector)this.transformations).clone();
		obj.targetModel = targetModel==null ? null : this.targetModel;
		obj.unit = unit==null ? null : this.unit;
		return obj;
	}

	/** Accept 'uk.ac.kent.cs.ktl.syntax.transformations.Namespace$Visitor' */
	public Object accept(YatlVisitor v, Object data) {
		return v.visit(this, data);
	}
}
