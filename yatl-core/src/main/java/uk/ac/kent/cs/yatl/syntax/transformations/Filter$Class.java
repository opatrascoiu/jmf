/**
 *
 *  Class Filter$Class.java
 *
 *  Generated by KMFStudio at 22 July 2003 18:50:16
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.yatl.syntax.transformations;

import java.util.List;
import java.util.Vector;

import uk.ac.kent.cs.yatl.YatlVisitable;
import uk.ac.kent.cs.yatl.YatlVisitor;

public class Filter$Class
implements
	Filter,
    YatlVisitable
{
	/** Default constructor */
	public Filter$Class() {
		//--- Set property 'pathName' from 'Filter' ---
		this.pathName = new Vector();
		//--- Set property 'expression' from 'Filter' ---
		this.expression = null;
		//--- Set property 'rule' from 'Filter' ---
		this.rule = null;
	}
	/** Specialized constructor */
	public Filter$Class(List pathName, Object expression) {
		//--- Set property 'pathName' from 'Filter' ---
		this.pathName = pathName;
		//--- Set property 'expression' from 'Filter' ---
		this.expression = expression;
		//--- Set property 'rule' from 'Filter' ---
		this.rule = null;
	}


	/** Property 'pathName' from 'Filter' */
	protected List pathName;
	/** Get property 'pathName' from 'Filter' */
	public List getPathName() {
		return pathName;
	}
	/** Set property 'pathName' from 'Filter' */
	public void setPathName(List pathName) {
		this.pathName = pathName;
	}

	/** Property 'expression' from 'Filter' */
	protected Object expression;
	/** Get property 'expression' from 'Filter' */
	public Object getExpression() {
		return expression;
	}
	/** Set property 'expression' from 'Filter' */
	public void setExpression(Object expression) {
		this.expression = expression;
	}

	/** Property 'rule' from 'Filter' */
	protected Rule rule;
	/** Get property 'rule' from 'Filter' */
	public Rule getRule() {
		return rule;
	}
	/** Set property 'rule' from 'Filter' */
	public void setRule(Rule rule) { 
		this.rule = rule;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.transformations.Filter";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
			if (rule != null)
			this.rule.setFilter(null);
	}

	/** Clone the object */
	public Object clone() {
		Filter$Class obj = new Filter$Class();
		obj.pathName = pathName==null ? null : (List)((Vector)this.pathName).clone();
		obj.expression = expression==null ? null : this.expression;
		obj.rule = rule==null ? null : this.rule;
		return obj;
	}

	/** Accept 'uk.ac.kent.cs.ktl.syntax.transformations.Filter$Visitor' */
	public Object accept(YatlVisitor v, Object data) {
		return v.visit(this, data);
	}
}
