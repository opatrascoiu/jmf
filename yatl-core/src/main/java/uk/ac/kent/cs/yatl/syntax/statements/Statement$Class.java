/**
 *
 *  Class Statement$Class.java
 *
 *  Generated by KMFStudio at 22 July 2003 18:50:16
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.yatl.syntax.statements;

import uk.ac.kent.cs.yatl.YatlVisitable;
import uk.ac.kent.cs.yatl.YatlVisitor;

public class Statement$Class
implements
	Statement,
    YatlVisitable
{
	/** Default constructor */
	public Statement$Class() {
		//--- Set property 'location' from 'Statement' ---
		this.location = null;
		//--- Set property 'loopStm' from 'Statement' ---
		this.loopStm = null;
		//--- Set property 'owner' from 'Statement' ---
		this.owner = null;
		//--- Set property 'statement' from 'Statement' ---
		this.statement = null;
		//--- Set property 'ifStm' from 'Statement' ---
		this.ifStm = null;
		//--- Set property 'compoundStm' from 'Statement' ---
		this.compoundStm = null;
	}
	/** Specialized constructor */
	public Statement$Class(Object location) {
		//--- Set property 'location' from 'Statement' ---
		this.location = location;
		//--- Set property 'loopStm' from 'Statement' ---
		this.loopStm = null;
		//--- Set property 'owner' from 'Statement' ---
		this.owner = null;
		//--- Set property 'statement' from 'Statement' ---
		this.statement = null;
		//--- Set property 'ifStm' from 'Statement' ---
		this.ifStm = null;
		//--- Set property 'compoundStm' from 'Statement' ---
		this.compoundStm = null;
	}


	/** Property 'location' from 'Statement' */
	protected Object location;
	/** Get property 'location' from 'Statement' */
	public Object getLocation() {
		return location;
	}
	/** Set property 'location' from 'Statement' */
	public void setLocation(Object location) {
		this.location = location;
	}

	/** Property 'loopStm' from 'Statement' */
	protected LoopStm loopStm;
	/** Get property 'loopStm' from 'Statement' */
	public LoopStm getLoopStm() {
		return loopStm;
	}
	/** Set property 'loopStm' from 'Statement' */
	public void setLoopStm(LoopStm loopStm) { 
		this.loopStm = loopStm;
	}

	/** Property 'owner' from 'Statement' */
	protected Statement owner;
	/** Get property 'owner' from 'Statement' */
	public Statement getOwner() {
		return owner;
	}
	/** Set property 'owner' from 'Statement' */
	public void setOwner(Statement owner) { 
		this.owner = owner;
	}

	/** Property 'statement' from 'Statement' */
	protected Statement statement;
	/** Get property 'statement' from 'Statement' */
	public Statement getStatement() {
		return statement;
	}
	/** Set property 'statement' from 'Statement' */
	public void setStatement(Statement statement) { 
		this.statement = statement;
	}

	/** Property 'ifStm' from 'Statement' */
	protected IfStm ifStm;
	/** Get property 'ifStm' from 'Statement' */
	public IfStm getIfStm() {
		return ifStm;
	}
	/** Set property 'ifStm' from 'Statement' */
	public void setIfStm(IfStm ifStm) { 
		this.ifStm = ifStm;
	}

	/** Property 'compoundStm' from 'Statement' */
	protected CompoundStm compoundStm;
	/** Get property 'compoundStm' from 'Statement' */
	public CompoundStm getCompoundStm() {
		return compoundStm;
	}
	/** Set property 'compoundStm' from 'Statement' */
	public void setCompoundStm(CompoundStm compoundStm) { 
		this.compoundStm = compoundStm;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.statements.Statement";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
			if (loopStm != null)
			this.loopStm.setBody(null);
			if (owner != null)
			this.owner.setStatement(null);
			if (ifStm != null)
			this.ifStm.setElseStm(null);
		if (compoundStm != null)
			this.compoundStm.getBody().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		Statement$Class obj = new Statement$Class();
		obj.location = location==null ? null : this.location;
		obj.loopStm = loopStm==null ? null : this.loopStm;
		obj.owner = owner==null ? null : this.owner;
		obj.statement = statement==null ? null : this.statement;
		obj.ifStm = ifStm==null ? null : this.ifStm;
		obj.compoundStm = compoundStm==null ? null : this.compoundStm;
		return obj;
	}

	/** Accept 'uk.ac.kent.cs.ktl.syntax.statements.Statement$Visitor' */
	public Object accept(YatlVisitor v, Object data) {
		return v.visit(this, data);
	}
}
