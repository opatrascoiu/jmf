
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 24 22:45:25 GMT 2003
//----------------------------------------------------

package uk.ac.kent.cs.yatl.syntax.parser;

import java.util.*;
import java_cup.runtime.*;
import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.syntax.ast.contexts.*;
import uk.ac.kent.cs.ocl20.syntax.ast.expressions.*;
import uk.ac.kent.cs.ocl20.syntax.ast.types.*;
import uk.ac.kent.cs.yatl.syntax.*;
import uk.ac.kent.cs.yatl.syntax.transformations.*;
import uk.ac.kent.cs.yatl.syntax.statements.*;

/** CUP v0.10k generated parser.
  * @version Mon Nov 24 22:45:25 GMT 2003
  */
public class Yyparse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Yyparse() {super();}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\004\000\002\003\005\000\002\007" +
    "\002\000\002\007\004\000\002\010\007\000\002\011\005" +
    "\000\002\004\002\000\002\004\004\000\002\005\012\000" +
    "\002\006\003\000\002\006\005\000\002\012\002\000\002" +
    "\012\004\000\002\012\004\000\002\014\007\000\002\015" +
    "\002\000\002\015\004\000\002\016\011\000\002\016\010" +
    "\000\002\016\010\000\002\016\007\000\002\017\007\000" +
    "\002\017\004\000\002\020\002\000\002\020\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\004\000\002\024\005\000\002" +
    "\025\011\000\002\025\007\000\002\026\006\000\002\026" +
    "\011\000\002\026\010\000\002\027\004\000\002\030\004" +
    "\000\002\031\010\000\002\032\005\000\002\033\002\000" +
    "\002\033\004\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\034\003\000\002\035" +
    "\012\000\002\035\012\000\002\035\012\000\002\036\004" +
    "\000\002\013\007\000\002\037\006\000\002\037\003\000" +
    "\002\040\002\000\002\040\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\045\010\000\002\046" +
    "\005\000\002\046\005\000\002\046\006\000\002\046\006" +
    "\000\002\042\005\000\002\043\006\000\002\043\005\000" +
    "\002\043\006\000\002\043\005\000\002\043\007\000\002" +
    "\043\006\000\002\043\007\000\002\043\005\000\002\044" +
    "\007\000\002\044\005\000\002\047\005\000\002\051\006" +
    "\000\002\051\005\000\002\051\006\000\002\051\005\000" +
    "\002\051\006\000\002\051\005\000\002\051\007\000\002" +
    "\051\006\000\002\051\007\000\002\051\006\000\002\051" +
    "\007\000\002\051\006\000\002\050\012\000\002\050\010" +
    "\000\002\050\011\000\002\050\007\000\002\050\010\000" +
    "\002\050\006\000\002\050\007\000\002\050\005\000\002" +
    "\052\003\000\002\052\005\000\002\053\007\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\006\000" +
    "\002\057\006\000\002\060\003\000\002\060\005\000\002" +
    "\060\004\000\002\060\006\000\002\060\005\000\002\060" +
    "\005\000\002\060\006\000\002\060\010\000\002\060\012" +
    "\000\002\060\014\000\002\060\014\000\002\060\016\000" +
    "\002\060\010\000\002\060\007\000\002\060\014\000\002" +
    "\060\012\000\002\060\004\000\002\060\004\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\011\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\006\000\002\060\010\000\002\060\007\000" +
    "\002\060\010\000\002\060\007\000\002\061\003\000\002" +
    "\061\005\000\002\062\003\000\002\062\005\000\002\063" +
    "\003\000\002\063\005\000\002\063\003\000\002\064\002" +
    "\000\002\064\004\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\066\006\000\002\066\005\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\067\003\000\002\067\005" +
    "\000\002\070\003\000\002\070\003\000\002\071\005\000" +
    "\002\072\006\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\074" +
    "\003\000\002\074\005\000\002\075\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\006\006\uffff\007\uffff\001\002\000\006\006" +
    "\012\007\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffb\005\ufffb\001\002\000" +
    "\004\131\015\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\131\015\001\002\000\006\105\016\113\017\001" +
    "\002\000\174\015\uff49\026\uff49\031\uff49\032\uff49\033\uff49" +
    "\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042" +
    "\uff49\043\uff49\044\uff49\045\uff49\046\uff49\051\uff49\052\uff49" +
    "\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060\uff49\061" +
    "\uff49\062\uff49\063\uff49\064\uff49\066\uff49\067\uff49\070\uff49" +
    "\071\uff49\072\uff49\073\uff49\074\uff49\076\uff49\077\uff49\100" +
    "\uff49\101\uff49\102\uff49\103\uff49\104\uff49\105\uff49\106\uff49" +
    "\107\uff49\110\uff49\112\uff49\113\uff49\114\uff49\115\uff49\116" +
    "\uff49\120\uff49\121\uff49\122\uff49\123\uff49\124\uff49\125\uff49" +
    "\126\uff49\127\uff49\130\uff49\131\uff49\001\002\000\200\013" +
    "\uff47\015\uff47\026\uff47\031\uff47\032\uff47\033\uff47\034\uff47" +
    "\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043" +
    "\uff47\044\uff47\045\uff47\046\uff47\051\uff47\052\uff47\053\uff47" +
    "\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062" +
    "\uff47\063\uff47\064\uff47\066\uff47\067\uff47\070\uff47\071\uff47" +
    "\072\uff47\073\uff47\074\uff47\076\uff47\077\uff47\100\uff47\101" +
    "\uff47\102\uff47\103\uff47\104\uff47\105\uff47\106\uff47\107\uff47" +
    "\110\uff47\112\uff47\113\uff47\114\uff47\115\uff47\116\uff47\117" +
    "\uff47\120\uff47\121\uff47\122\uff47\123\uff47\124\uff47\125\uff47" +
    "\126\uff47\127\uff47\130\uff47\131\uff47\001\002\000\006\002" +
    "\ufffc\005\ufffc\001\002\000\004\131\015\001\002\000\174" +
    "\015\uff48\026\uff48\031\uff48\032\uff48\033\uff48\034\uff48\035" +
    "\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48\043\uff48" +
    "\044\uff48\045\uff48\046\uff48\051\uff48\052\uff48\053\uff48\054" +
    "\uff48\055\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062\uff48" +
    "\063\uff48\064\uff48\066\uff48\067\uff48\070\uff48\071\uff48\072" +
    "\uff48\073\uff48\074\uff48\076\uff48\077\uff48\100\uff48\101\uff48" +
    "\102\uff48\103\uff48\104\uff48\105\uff48\106\uff48\107\uff48\110" +
    "\uff48\112\uff48\113\uff48\114\uff48\115\uff48\116\uff48\120\uff48" +
    "\121\uff48\122\uff48\123\uff48\124\uff48\125\uff48\126\uff48\127" +
    "\uff48\130\uff48\131\uff48\001\002\000\004\103\022\001\002" +
    "\000\004\066\023\001\002\000\004\105\024\001\002\000" +
    "\006\006\ufffd\007\ufffd\001\002\000\006\002\000\005\027" +
    "\001\002\000\006\002\ufffa\005\ufffa\001\002\000\004\131" +
    "\015\001\002\000\004\115\031\001\002\000\004\131\015" +
    "\001\002\000\006\102\u01bc\120\ufff8\001\002\000\004\120" +
    "\034\001\002\000\004\117\035\001\002\000\010\010\ufff6" +
    "\011\ufff6\122\ufff6\001\002\000\010\010\042\011\037\122" +
    "\040\001\002\000\004\131\015\001\002\000\006\002\ufff9" +
    "\005\ufff9\001\002\000\010\010\ufff4\011\ufff4\122\ufff4\001" +
    "\002\000\004\131\015\001\002\000\010\010\ufff5\011\ufff5" +
    "\122\ufff5\001\002\000\004\117\045\001\002\000\006\031" +
    "\uffc4\122\uffc4\001\002\000\006\031\054\122\047\001\002" +
    "\000\010\010\uffc7\011\uffc7\122\uffc7\001\002\000\006\031" +
    "\uffc3\122\uffc3\001\002\000\006\031\uffc2\122\uffc2\001\002" +
    "\000\006\031\uffc1\122\uffc1\001\002\000\006\031\uffc0\122" +
    "\uffc0\001\002\000\004\131\015\001\002\000\010\036\u012d" +
    "\037\u012f\040\u012c\001\002\000\012\034\363\035\360\113" +
    "\364\131\015\001\002\000\014\034\uff49\035\uff49\113\uff49" +
    "\115\060\131\uff49\001\002\000\006\120\062\131\015\001" +
    "\002\000\006\102\104\120\355\001\002\000\014\036\uff9b" +
    "\037\uff9b\040\uff9b\055\uff9b\104\353\001\002\000\022\055" +
    "\065\074\uff95\102\uff95\104\066\105\uff95\106\uff95\120\uff95" +
    "\122\uff95\001\002\000\014\074\uff9a\102\uff9a\105\uff9a\120" +
    "\uff9a\122\uff9a\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\020\041\070\042\075\043\072\044" +
    "\077\045\067\047\100\131\015\001\002\000\006\115\uff55" +
    "\117\uff55\001\002\000\006\115\uff59\117\uff59\001\002\000" +
    "\032\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92\055\uff92" +
    "\074\uff92\102\uff92\105\uff92\106\uff92\120\uff92\122\uff92\001" +
    "\002\000\006\115\uff57\117\uff57\001\002\000\034\032\uff94" +
    "\033\uff94\036\uff94\037\uff94\040\uff94\055\uff94\074\uff94\102" +
    "\uff94\105\uff94\106\uff94\113\017\120\uff94\122\uff94\001\002" +
    "\000\004\115\347\001\002\000\006\115\uff58\117\uff58\001" +
    "\002\000\020\055\107\074\uff97\102\uff97\105\uff97\106\uff97" +
    "\120\uff97\122\uff97\001\002\000\006\115\uff56\117\uff56\001" +
    "\002\000\004\115\102\001\002\000\032\032\uff93\033\uff93" +
    "\036\uff93\037\uff93\040\uff93\055\uff93\074\uff93\102\uff93\105" +
    "\uff93\106\uff93\120\uff93\122\uff93\001\002\000\004\131\015" +
    "\001\002\000\006\102\104\120\105\001\002\000\004\131" +
    "\015\001\002\000\032\032\uff90\033\uff90\036\uff90\037\uff90" +
    "\040\uff90\055\uff90\074\uff90\102\uff90\105\uff90\106\uff90\120" +
    "\uff90\122\uff90\001\002\000\014\074\uff99\102\uff99\105\uff99" +
    "\120\uff99\122\uff99\001\002\000\044\041\070\042\075\043" +
    "\072\044\077\045\067\046\111\064\122\072\113\073\124" +
    "\076\116\115\120\124\126\125\127\126\117\127\115\130" +
    "\123\131\015\001\002\000\170\015\uff8f\026\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\076" +
    "\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f" +
    "\105\uff8f\106\uff8f\107\uff8f\112\uff8f\114\uff8f\115\uff8f\116" +
    "\uff8f\120\uff8f\121\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f" +
    "\126\uff8f\127\uff8f\130\uff8f\131\uff8f\001\002\000\004\117" +
    "\344\001\002\000\170\015\uff5c\026\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\051\uff5c" +
    "\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060" +
    "\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c\066\uff5c\067\uff5c" +
    "\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\076\uff5c\077" +
    "\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c" +
    "\106\uff5c\107\uff5c\112\uff5c\114\uff5c\115\uff5c\116\uff5c\120" +
    "\uff5c\121\uff5c\122\uff5c\123\uff5c\124\uff5c\125\uff5c\126\uff5c" +
    "\127\uff5c\130\uff5c\131\uff5c\001\002\000\044\041\070\042" +
    "\075\043\072\044\077\045\067\046\111\064\122\072\113" +
    "\073\124\076\116\115\120\124\126\125\127\126\117\127" +
    "\115\130\123\131\015\001\002\000\004\117\330\001\002" +
    "\000\170\015\uff4b\026\uff4b\031\uff4b\032\uff4b\033\uff4b\034" +
    "\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\046\uff4b\051\uff4b\052\uff4b\053" +
    "\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\064\uff4b\066\uff4b\067\uff4b\070\uff4b\071" +
    "\uff4b\072\uff4b\073\uff4b\074\uff4b\076\uff4b\077\uff4b\100\uff4b" +
    "\101\uff4b\102\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\107" +
    "\uff4b\112\uff4b\114\uff4b\115\uff4b\116\uff4b\120\uff4b\121\uff4b" +
    "\122\uff4b\123\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b\130" +
    "\uff4b\131\uff4b\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\170\015\uff4c\026\uff4c\031\uff4c\032" +
    "\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\051" +
    "\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c" +
    "\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\066\uff4c\067" +
    "\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\076\uff4c" +
    "\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\104\uff4c\105" +
    "\uff4c\106\uff4c\107\uff4c\112\uff4c\114\uff4c\115\uff4c\116\uff4c" +
    "\120\uff4c\121\uff4c\122\uff4c\123\uff4c\124\uff4c\125\uff4c\126" +
    "\uff4c\127\uff4c\130\uff4c\131\uff4c\001\002\000\044\041\070" +
    "\042\075\043\072\044\077\045\067\046\111\064\122\072" +
    "\113\073\124\076\116\115\120\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\170\015\uff5e\026" +
    "\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e" +
    "\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045" +
    "\uff5e\046\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e" +
    "\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e" +
    "\074\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103" +
    "\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\112\uff5e\114\uff5e" +
    "\115\uff5e\116\uff5e\120\uff5e\121\uff5e\122\uff5e\123\uff5e\124" +
    "\uff5e\125\uff5e\126\uff5e\127\uff5e\130\uff5e\131\uff5e\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\170\015\uff4a\026\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a" +
    "\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\051\uff4a\052\uff4a\053\uff4a" +
    "\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\064\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a" +
    "\072\uff4a\073\uff4a\074\uff4a\076\uff4a\077\uff4a\100\uff4a\101" +
    "\uff4a\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a\107\uff4a" +
    "\112\uff4a\114\uff4a\115\uff4a\116\uff4a\120\uff4a\121\uff4a\122" +
    "\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a\127\uff4a\130\uff4a" +
    "\131\uff4a\001\002\000\004\131\015\001\002\000\174\015" +
    "\uff60\026\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044" +
    "\uff60\045\uff60\046\uff60\051\uff60\052\uff60\053\uff60\054\uff60" +
    "\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063" +
    "\uff60\064\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60" +
    "\073\uff60\074\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102" +
    "\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110\164" +
    "\112\uff60\113\017\114\uff60\115\uff60\116\uff60\120\uff60\121" +
    "\uff60\122\uff60\123\uff60\124\uff60\125\uff60\126\uff60\127\uff60" +
    "\130\uff60\131\uff60\001\002\000\170\015\uff4e\026\uff4e\031" +
    "\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e" +
    "\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\066" +
    "\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e" +
    "\076\uff4e\077\uff4e\100\uff4e\101\uff4e\102\uff4e\103\uff4e\104" +
    "\uff4e\105\uff4e\106\uff4e\107\uff4e\112\uff4e\114\uff4e\115\uff4e" +
    "\116\uff4e\120\uff4e\121\uff4e\122\uff4e\123\uff4e\124\uff4e\125" +
    "\uff4e\126\uff4e\127\uff4e\130\uff4e\131\uff4e\001\002\000\170" +
    "\015\uff4d\026\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035" +
    "\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d" +
    "\044\uff4d\045\uff4d\046\uff4d\051\uff4d\052\uff4d\053\uff4d\054" +
    "\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\064\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072" +
    "\uff4d\073\uff4d\074\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d" +
    "\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\112" +
    "\uff4d\114\uff4d\115\uff4d\116\uff4d\120\uff4d\121\uff4d\122\uff4d" +
    "\123\uff4d\124\uff4d\125\uff4d\126\uff4d\127\uff4d\130\uff4d\131" +
    "\uff4d\001\002\000\072\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\074\uff98" +
    "\102\uff98\103\154\105\uff98\106\uff98\107\141\114\140\115" +
    "\146\116\150\120\uff98\122\uff98\123\145\001\002\000\170" +
    "\015\uff5d\026\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035" +
    "\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\044\uff5d\045\uff5d\046\uff5d\051\uff5d\052\uff5d\053\uff5d\054" +
    "\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d" +
    "\063\uff5d\064\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072" +
    "\uff5d\073\uff5d\074\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\112" +
    "\uff5d\114\uff5d\115\uff5d\116\uff5d\120\uff5d\121\uff5d\122\uff5d" +
    "\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130\uff5d\131" +
    "\uff5d\001\002\000\044\041\070\042\075\043\072\044\077" +
    "\045\067\046\111\064\122\072\113\073\124\076\116\115" +
    "\120\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\044\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\044\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\124\076\116\115\120\124\126\125" +
    "\127\126\117\127\115\130\123\131\015\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\004\131" +
    "\015\001\002\000\004\131\015\001\002\000\044\041\070" +
    "\042\075\043\072\044\077\045\067\046\111\064\122\072" +
    "\113\073\124\076\116\115\120\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\044\041\070\042" +
    "\075\043\072\044\077\045\067\046\111\064\122\072\113" +
    "\073\124\076\116\115\120\124\126\125\127\126\117\127" +
    "\115\130\123\131\015\001\002\000\044\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\006\050\246\131\015\001" +
    "\002\000\046\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\120" +
    "\203\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\044\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\044\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\124\076\116\115\120\124\126\125" +
    "\127\126\117\127\115\130\123\131\015\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\004\131" +
    "\015\001\002\000\044\041\070\042\075\043\072\044\077" +
    "\045\067\046\111\064\122\072\113\073\124\076\116\115" +
    "\120\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\044\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\170\015\uff6e\026\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\044\uff6e\045\uff6e\046\uff6e\051\uff6e\052\uff6e\053" +
    "\uff6e\054\uff6e\055\156\056\135\057\134\060\143\061\144" +
    "\062\151\063\136\064\152\066\132\067\147\070\155\071" +
    "\153\072\uff6e\073\uff6e\074\uff6e\076\uff6e\077\uff6e\100\uff6e" +
    "\101\uff6e\102\uff6e\103\154\104\uff6e\105\uff6e\106\uff6e\107" +
    "\uff6e\112\uff6e\114\uff6e\115\146\116\150\120\uff6e\121\uff6e" +
    "\122\uff6e\123\145\124\uff6e\125\uff6e\126\uff6e\127\uff6e\130" +
    "\uff6e\131\uff6e\001\002\000\170\015\uff72\026\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057" +
    "\134\060\143\061\144\062\151\063\136\064\152\066\132" +
    "\067\147\070\155\071\153\072\uff72\073\uff72\074\uff72\076" +
    "\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\154\104\uff72" +
    "\105\uff72\106\uff72\107\uff72\112\uff72\114\uff72\115\146\116" +
    "\150\120\uff72\121\uff72\122\uff72\123\145\124\uff72\125\uff72" +
    "\126\uff72\127\uff72\130\uff72\131\uff72\001\002\000\170\015" +
    "\uff7b\026\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\064\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\073\uff7b\074\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102" +
    "\uff7b\103\154\104\uff7b\105\uff7b\106\uff7b\107\uff7b\112\uff7b" +
    "\114\uff7b\115\146\116\150\120\uff7b\121\uff7b\122\uff7b\123" +
    "\145\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b" +
    "\001\002\000\172\015\uff60\026\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60" +
    "\042\uff60\043\uff60\044\uff60\045\uff60\046\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\062\uff60\063\uff60\064\uff60\066\uff60\067\uff60\070" +
    "\uff60\071\uff60\072\uff60\073\uff60\074\uff60\076\uff60\077\uff60" +
    "\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106" +
    "\uff60\107\uff60\110\164\112\uff60\114\uff60\115\uff60\116\uff60" +
    "\120\uff60\121\uff60\122\uff60\123\uff60\124\uff60\125\uff60\126" +
    "\uff60\127\uff60\130\uff60\131\uff60\001\002\000\004\036\166" +
    "\001\002\000\170\015\uff8c\026\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106" +
    "\uff8c\107\uff8c\112\uff8c\114\uff8c\115\uff8c\116\uff8c\120\uff8c" +
    "\121\uff8c\122\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c\127" +
    "\uff8c\130\uff8c\131\uff8c\001\002\000\170\015\uff5f\026\uff5f" +
    "\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037" +
    "\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f" +
    "\046\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056" +
    "\uff5f\057\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f" +
    "\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074" +
    "\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f" +
    "\104\uff5f\105\uff5f\106\uff5f\107\uff5f\112\uff5f\114\uff5f\115" +
    "\uff5f\116\uff5f\120\uff5f\121\uff5f\122\uff5f\123\uff5f\124\uff5f" +
    "\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f\001\002\000" +
    "\170\015\uff7a\026\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062" +
    "\uff7a\063\uff7a\064\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\076\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\103\154\104\uff7a\105\uff7a\106\uff7a\107\uff7a" +
    "\112\uff7a\114\uff7a\115\146\116\150\120\uff7a\121\uff7a\122" +
    "\uff7a\123\145\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a" +
    "\131\uff7a\001\002\000\170\015\uff78\026\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\066\132\067" +
    "\147\070\155\071\153\072\uff78\073\uff78\074\uff78\076\uff78" +
    "\077\uff78\100\uff78\101\uff78\102\uff78\103\154\104\uff78\105" +
    "\uff78\106\uff78\107\uff78\112\uff78\114\uff78\115\146\116\150" +
    "\120\uff78\121\uff78\122\uff78\123\145\124\uff78\125\uff78\126" +
    "\uff78\127\uff78\130\uff78\131\uff78\001\002\000\170\015\uff73" +
    "\026\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063\136" +
    "\064\152\066\132\067\147\070\155\071\153\072\uff73\073" +
    "\uff73\074\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73" +
    "\103\154\104\uff73\105\uff73\106\uff73\107\uff73\112\uff73\114" +
    "\uff73\115\146\116\150\120\uff73\121\uff73\122\uff73\123\145" +
    "\124\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131\uff73\001" +
    "\002\000\064\051\142\052\133\053\137\054\157\055\156" +
    "\056\135\057\134\060\143\061\144\062\151\063\136\064" +
    "\152\066\132\067\147\070\155\071\153\102\uff67\103\154" +
    "\107\141\114\140\115\146\116\150\120\uff67\121\uff67\123" +
    "\145\001\002\000\006\102\174\121\175\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\172\015" +
    "\uff60\026\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044" +
    "\uff60\045\uff60\046\uff60\051\uff60\052\uff60\053\uff60\054\uff60" +
    "\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063" +
    "\uff60\064\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60" +
    "\073\uff60\074\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102" +
    "\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110\164" +
    "\112\uff60\114\uff60\115\uff60\116\uff60\120\uff60\121\uff60\122" +
    "\uff60\123\uff60\124\uff60\125\uff60\126\uff60\127\uff60\130\uff60" +
    "\131\uff60\001\002\000\170\015\uff82\026\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\051" +
    "\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82" +
    "\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\066\uff82\067" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\076\uff82" +
    "\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105" +
    "\uff82\106\uff82\107\uff82\112\uff82\114\uff82\115\uff82\116\uff82" +
    "\120\uff82\121\uff82\122\uff82\123\uff82\124\uff82\125\uff82\126" +
    "\uff82\127\uff82\130\uff82\131\uff82\001\002\000\064\051\142" +
    "\052\133\053\137\054\157\055\156\056\135\057\134\060" +
    "\143\061\144\062\151\063\136\064\152\066\132\067\147" +
    "\070\155\071\153\102\uff66\103\154\107\141\114\140\115" +
    "\146\116\150\120\uff66\121\uff66\123\145\001\002\000\170" +
    "\015\uff7c\026\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\051\uff7c\052\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\103\154\104\uff7c\105\uff7c\106\uff7c\107\uff7c\112" +
    "\uff7c\114\uff7c\115\146\116\150\120\uff7c\121\uff7c\122\uff7c" +
    "\123\145\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131" +
    "\uff7c\001\002\000\004\106\242\001\002\000\072\051\uff49" +
    "\052\uff49\053\uff49\054\uff49\055\065\056\uff49\057\uff49\060" +
    "\uff49\061\uff49\062\uff49\063\uff49\064\uff49\066\uff49\067\uff49" +
    "\070\uff49\071\uff49\102\uff49\103\uff49\104\066\106\uff95\107" +
    "\uff49\110\uff49\113\uff49\114\uff49\115\uff49\116\uff49\120\uff49" +
    "\123\uff49\001\002\000\170\015\uff8a\026\uff8a\031\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\051" +
    "\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\076\uff8a" +
    "\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105" +
    "\uff8a\106\uff8a\107\uff8a\112\uff8a\114\uff8a\115\uff8a\116\uff8a" +
    "\120\uff8a\121\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\126" +
    "\uff8a\127\uff8a\130\uff8a\131\uff8a\001\002\000\064\051\142" +
    "\052\133\053\137\054\157\055\210\056\135\057\134\060" +
    "\143\061\144\062\151\063\136\064\152\066\132\067\147" +
    "\070\155\071\153\102\206\103\154\104\205\107\141\114" +
    "\140\115\146\116\150\120\207\123\145\001\002\000\020" +
    "\041\070\042\075\043\072\044\077\045\067\047\100\131" +
    "\015\001\002\000\044\041\070\042\075\043\072\044\077" +
    "\045\067\046\111\064\122\072\113\073\124\076\116\115" +
    "\120\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\170\015\uff89\026\uff89\031\uff89\032\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89" +
    "\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\051\uff89\052" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\074\uff89\076\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106" +
    "\uff89\107\uff89\112\uff89\114\uff89\115\uff89\116\uff89\120\uff89" +
    "\121\uff89\122\uff89\123\uff89\124\uff89\125\uff89\126\uff89\127" +
    "\uff89\130\uff89\131\uff89\001\002\000\044\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\064\051\uff72\052\uff72\053" +
    "\uff72\054\uff72\055\uff72\056\uff72\057\134\060\143\061\144" +
    "\062\151\063\136\064\152\066\132\067\147\070\155\071" +
    "\153\102\uff72\103\154\104\uff72\107\uff72\114\uff72\115\146" +
    "\116\150\120\uff72\123\145\001\002\000\004\131\015\001" +
    "\002\000\004\106\214\001\002\000\044\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\060\051\142\052\133\053" +
    "\137\054\157\055\156\056\135\057\134\060\143\061\144" +
    "\062\151\063\136\064\152\066\132\067\147\070\155\071" +
    "\153\103\154\107\141\114\140\115\146\116\150\120\216" +
    "\123\145\001\002\000\170\015\uff85\026\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\066\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\076\uff85" +
    "\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105" +
    "\uff85\106\uff85\107\uff85\112\uff85\114\uff85\115\uff85\116\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\126" +
    "\uff85\127\uff85\130\uff85\131\uff85\001\002\000\004\106\222" +
    "\001\002\000\006\102\174\120\221\001\002\000\170\015" +
    "\uff88\026\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\112\uff88" +
    "\114\uff88\115\uff88\116\uff88\120\uff88\121\uff88\122\uff88\123" +
    "\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\060\051\142\052\133\053\137\054\157\055\156" +
    "\056\135\057\134\060\143\061\144\062\151\063\136\064" +
    "\152\066\132\067\147\070\155\071\153\103\154\107\141" +
    "\114\140\115\146\116\150\120\224\123\145\001\002\000" +
    "\170\015\uff87\026\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\076\uff87\077\uff87\100\uff87\101" +
    "\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87" +
    "\112\uff87\114\uff87\115\uff87\116\uff87\120\uff87\121\uff87\122" +
    "\uff87\123\uff87\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87" +
    "\131\uff87\001\002\000\006\055\227\102\226\001\002\000" +
    "\004\131\015\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\060\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\102" +
    "\231\103\154\107\141\114\140\115\146\116\150\123\145" +
    "\001\002\000\004\131\015\001\002\000\004\106\233\001" +
    "\002\000\044\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\060\051\142\052\133\053\137\054\157\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\103\154\107\141\114" +
    "\140\115\146\116\150\120\235\123\145\001\002\000\170" +
    "\015\uff84\026\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\076\uff84\077\uff84\100\uff84\101\uff84" +
    "\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\112" +
    "\uff84\114\uff84\115\uff84\116\uff84\120\uff84\121\uff84\122\uff84" +
    "\123\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131" +
    "\uff84\001\002\000\004\106\237\001\002\000\044\041\070" +
    "\042\075\043\072\044\077\045\067\046\111\064\122\072" +
    "\113\073\124\076\116\115\120\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\060\051\142\052" +
    "\133\053\137\054\157\055\156\056\135\057\134\060\143" +
    "\061\144\062\151\063\136\064\152\066\132\067\147\070" +
    "\155\071\153\103\154\107\141\114\140\115\146\116\150" +
    "\120\241\123\145\001\002\000\170\015\uff86\026\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\066" +
    "\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104" +
    "\uff86\105\uff86\106\uff86\107\uff86\112\uff86\114\uff86\115\uff86" +
    "\116\uff86\120\uff86\121\uff86\122\uff86\123\uff86\124\uff86\125" +
    "\uff86\126\uff86\127\uff86\130\uff86\131\uff86\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\060\051" +
    "\142\052\133\053\137\054\157\055\156\056\135\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\103\154\107\141\114\140\115\146" +
    "\116\150\120\244\123\145\001\002\000\170\015\uff83\026" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\105\uff83\106\uff83\107\uff83\112\uff83\114\uff83" +
    "\115\uff83\116\uff83\120\uff83\121\uff83\122\uff83\123\uff83\124" +
    "\uff83\125\uff83\126\uff83\127\uff83\130\uff83\131\uff83\001\002" +
    "\000\170\015\uff8b\026\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\046\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\066\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\076\uff8b\077\uff8b\100\uff8b" +
    "\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107" +
    "\uff8b\112\uff8b\114\uff8b\115\uff8b\116\uff8b\120\uff8b\121\uff8b" +
    "\122\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130" +
    "\uff8b\131\uff8b\001\002\000\004\115\247\001\002\000\004" +
    "\131\015\001\002\000\006\105\251\106\252\001\002\000" +
    "\004\131\015\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\060\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\103" +
    "\154\107\141\114\140\115\146\116\150\120\254\123\145" +
    "\001\002\000\170\015\uff80\026\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\061\uff80\062\uff80\063\uff80\064\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\074\uff80\076\uff80\077\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106" +
    "\uff80\107\uff80\112\uff80\114\uff80\115\uff80\116\uff80\120\uff80" +
    "\121\uff80\122\uff80\123\uff80\124\uff80\125\uff80\126\uff80\127" +
    "\uff80\130\uff80\131\uff80\001\002\000\004\106\256\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\060\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\103\154\107\141\114\140" +
    "\115\146\116\150\120\260\123\145\001\002\000\170\015" +
    "\uff81\026\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\112\uff81" +
    "\114\uff81\115\uff81\116\uff81\120\uff81\121\uff81\122\uff81\123" +
    "\uff81\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131\uff81" +
    "\001\002\000\170\015\uff74\026\uff74\031\uff74\032\uff74\033" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\051\uff74\052" +
    "\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74" +
    "\061\uff74\062\uff74\063\136\064\152\066\132\067\147\070" +
    "\155\071\153\072\uff74\073\uff74\074\uff74\076\uff74\077\uff74" +
    "\100\uff74\101\uff74\102\uff74\103\154\104\uff74\105\uff74\106" +
    "\uff74\107\uff74\112\uff74\114\uff74\115\146\116\150\120\uff74" +
    "\121\uff74\122\uff74\123\145\124\uff74\125\uff74\126\uff74\127" +
    "\uff74\130\uff74\131\uff74\001\002\000\170\015\uff75\026\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75" +
    "\046\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056" +
    "\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\072\uff75\073\uff75\074" +
    "\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75\103\154" +
    "\104\uff75\105\uff75\106\uff75\107\uff75\112\uff75\114\uff75\115" +
    "\146\116\150\120\uff75\121\uff75\122\uff75\123\145\124\uff75" +
    "\125\uff75\126\uff75\127\uff75\130\uff75\131\uff75\001\002\000" +
    "\170\015\uff6d\026\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d" +
    "\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\045\uff6d\046\uff6d\051\uff6d\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\072\uff6d\073\uff6d\074\uff6d\076\uff6d\077\uff6d\100\uff6d\101" +
    "\uff6d\102\uff6d\103\154\104\uff6d\105\uff6d\106\uff6d\107\uff6d" +
    "\112\uff6d\114\uff6d\115\146\116\150\120\uff6d\121\uff6d\122" +
    "\uff6d\123\145\124\uff6d\125\uff6d\126\uff6d\127\uff6d\130\uff6d" +
    "\131\uff6d\001\002\000\004\115\265\001\002\000\050\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\111\266\115\120\120\270\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\010\102\uff63\104\276\120\uff63\001\002\000\006\102" +
    "\uff65\120\uff65\001\002\000\170\015\uff68\026\uff68\031\uff68" +
    "\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040" +
    "\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68" +
    "\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057" +
    "\uff68\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\066\uff68" +
    "\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68\076" +
    "\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68" +
    "\105\uff68\106\uff68\107\uff68\112\uff68\114\uff68\115\uff68\116" +
    "\uff68\120\uff68\121\uff68\122\uff68\123\uff68\124\uff68\125\uff68" +
    "\126\uff68\127\uff68\130\uff68\131\uff68\001\002\000\006\102" +
    "\273\120\274\001\002\000\062\051\142\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\102\uff61\103\154\107\141\114\140\115\146\116\150\120" +
    "\uff61\123\145\001\002\000\046\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\111\266\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\170\015\uff69\026\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69" +
    "\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046" +
    "\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69" +
    "\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\066" +
    "\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074\uff69" +
    "\076\uff69\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69\104" +
    "\uff69\105\uff69\106\uff69\107\uff69\112\uff69\114\uff69\115\uff69" +
    "\116\uff69\120\uff69\121\uff69\122\uff69\123\uff69\124\uff69\125" +
    "\uff69\126\uff69\127\uff69\130\uff69\131\uff69\001\002\000\006" +
    "\102\uff64\120\uff64\001\002\000\020\041\070\042\075\043" +
    "\072\044\077\045\067\047\100\131\015\001\002\000\006" +
    "\102\uff62\120\uff62\001\002\000\004\115\301\001\002\000" +
    "\050\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\124\076\116\111\266\115\120\120" +
    "\302\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\170\015\uff6a\026\uff6a\031\uff6a\032\uff6a\033" +
    "\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\051\uff6a\052" +
    "\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\066\uff6a\067\uff6a\070" +
    "\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106" +
    "\uff6a\107\uff6a\112\uff6a\114\uff6a\115\uff6a\116\uff6a\120\uff6a" +
    "\121\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\126\uff6a\127" +
    "\uff6a\130\uff6a\131\uff6a\001\002\000\006\102\273\120\304" +
    "\001\002\000\170\015\uff6b\026\uff6b\031\uff6b\032\uff6b\033" +
    "\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\051\uff6b\052" +
    "\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\063\uff6b\064\uff6b\066\uff6b\067\uff6b\070" +
    "\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b\076\uff6b\077\uff6b" +
    "\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b\106" +
    "\uff6b\107\uff6b\112\uff6b\114\uff6b\115\uff6b\116\uff6b\120\uff6b" +
    "\121\uff6b\122\uff6b\123\uff6b\124\uff6b\125\uff6b\126\uff6b\127" +
    "\uff6b\130\uff6b\131\uff6b\001\002\000\170\015\uff6f\026\uff6f" +
    "\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\072\uff6f\073\uff6f\074" +
    "\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\154" +
    "\104\uff6f\105\uff6f\106\uff6f\107\uff6f\112\uff6f\114\uff6f\115" +
    "\146\116\150\120\uff6f\121\uff6f\122\uff6f\123\145\124\uff6f" +
    "\125\uff6f\126\uff6f\127\uff6f\130\uff6f\131\uff6f\001\002\000" +
    "\170\015\uff79\026\uff79\031\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\063\uff79\064\uff79\066\132\067\147\070\155\071\153" +
    "\072\uff79\073\uff79\074\uff79\076\uff79\077\uff79\100\uff79\101" +
    "\uff79\102\uff79\103\154\104\uff79\105\uff79\106\uff79\107\uff79" +
    "\112\uff79\114\uff79\115\146\116\150\120\uff79\121\uff79\122" +
    "\uff79\123\145\124\uff79\125\uff79\126\uff79\127\uff79\130\uff79" +
    "\131\uff79\001\002\000\170\015\uff71\026\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\051" +
    "\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\072\uff71\073\uff71\074\uff71\076\uff71" +
    "\077\uff71\100\uff71\101\uff71\102\uff71\103\154\104\uff71\105" +
    "\uff71\106\uff71\107\uff71\112\uff71\114\uff71\115\146\116\150" +
    "\120\uff71\121\uff71\122\uff71\123\145\124\uff71\125\uff71\126" +
    "\uff71\127\uff71\130\uff71\131\uff71\001\002\000\170\015\uff76" +
    "\026\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\136" +
    "\064\152\066\132\067\147\070\155\071\153\072\uff76\073" +
    "\uff76\074\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\154\104\uff76\105\uff76\106\uff76\107\uff76\112\uff76\114" +
    "\uff76\115\146\116\150\120\uff76\121\uff76\122\uff76\123\145" +
    "\124\uff76\125\uff76\126\uff76\127\uff76\130\uff76\131\uff76\001" +
    "\002\000\170\015\uff70\026\uff70\031\uff70\032\uff70\033\uff70" +
    "\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\051\uff70\052\uff70" +
    "\053\uff70\054\uff70\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\072\uff70\073\uff70\074\uff70\076\uff70\077\uff70\100" +
    "\uff70\101\uff70\102\uff70\103\154\104\uff70\105\uff70\106\uff70" +
    "\107\uff70\112\uff70\114\uff70\115\146\116\150\120\uff70\121" +
    "\uff70\122\uff70\123\145\124\uff70\125\uff70\126\uff70\127\uff70" +
    "\130\uff70\131\uff70\001\002\000\170\015\uff7d\026\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\154\104" +
    "\uff7d\105\uff7d\106\uff7d\107\uff7d\112\uff7d\114\uff7d\115\146" +
    "\116\150\120\uff7d\121\uff7d\122\uff7d\123\145\124\uff7d\125" +
    "\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\001\002\000\170" +
    "\015\uff8d\026\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d" +
    "\063\uff8d\064\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\073\uff8d\074\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d" +
    "\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\112" +
    "\uff8d\114\uff8d\115\uff8d\116\uff8d\120\uff8d\121\uff8d\122\uff8d" +
    "\123\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131" +
    "\uff8d\001\002\000\006\074\315\102\104\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\170\015" +
    "\uff6c\026\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\072\uff6c" +
    "\073\uff6c\074\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102" +
    "\uff6c\103\154\104\uff6c\105\uff6c\106\uff6c\107\141\112\uff6c" +
    "\114\140\115\146\116\150\120\uff6c\121\uff6c\122\uff6c\123" +
    "\145\124\uff6c\125\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c" +
    "\001\002\000\170\015\uff7e\026\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\064\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\076\uff7e\077\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\103\154\104\uff7e\105\uff7e\106" +
    "\uff7e\107\uff7e\112\uff7e\114\uff7e\115\146\116\150\120\uff7e" +
    "\121\uff7e\122\uff7e\123\145\124\uff7e\125\uff7e\126\uff7e\127" +
    "\uff7e\130\uff7e\131\uff7e\001\002\000\060\051\142\052\133" +
    "\053\137\054\157\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\103\154\107\141\114\140\115\146\116\150\120" +
    "\321\123\145\001\002\000\170\015\uff8e\026\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\066\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\076" +
    "\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e" +
    "\105\uff8e\106\uff8e\107\uff8e\112\uff8e\114\uff8e\115\uff8e\116" +
    "\uff8e\120\uff8e\121\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e" +
    "\126\uff8e\127\uff8e\130\uff8e\131\uff8e\001\002\000\060\051" +
    "\142\052\133\053\137\054\157\055\156\056\135\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\077\323\103\154\107\141\114\140" +
    "\115\146\116\150\123\145\001\002\000\044\041\070\042" +
    "\075\043\072\044\077\045\067\046\111\064\122\072\113" +
    "\073\124\076\116\115\120\124\126\125\127\126\117\127" +
    "\115\130\123\131\015\001\002\000\060\051\142\052\133" +
    "\053\137\054\157\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\100\325\103\154\107\141\114\140\115\146\116" +
    "\150\123\145\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\060\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\101" +
    "\327\103\154\107\141\114\140\115\146\116\150\123\145" +
    "\001\002\000\170\015\uff77\026\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\051\uff77\052" +
    "\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77" +
    "\061\uff77\062\uff77\063\uff77\064\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\076\uff77\077\uff77" +
    "\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106" +
    "\uff77\107\uff77\112\uff77\114\uff77\115\uff77\116\uff77\120\uff77" +
    "\121\uff77\122\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127" +
    "\uff77\130\uff77\131\uff77\001\002\000\046\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\122\335\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\006\102\uff51\122" +
    "\uff51\001\002\000\006\102\uff54\122\uff54\001\002\000\006" +
    "\102\340\122\341\001\002\000\064\051\142\052\133\053" +
    "\137\054\157\055\156\056\135\057\134\060\143\061\144" +
    "\062\151\063\136\064\152\066\132\067\147\070\155\071" +
    "\153\102\uff52\103\154\107\141\112\336\114\140\115\146" +
    "\116\150\122\uff52\123\145\001\002\000\170\015\uff5a\026" +
    "\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a" +
    "\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064" +
    "\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a\103" +
    "\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\112\uff5a\114\uff5a" +
    "\115\uff5a\116\uff5a\120\uff5a\121\uff5a\122\uff5a\123\uff5a\124" +
    "\uff5a\125\uff5a\126\uff5a\127\uff5a\130\uff5a\131\uff5a\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\062\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\102\uff50\103\154\107\141" +
    "\114\140\115\146\116\150\122\uff50\123\145\001\002\000" +
    "\044\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\124\076\116\115\120\124\126\125" +
    "\127\126\117\127\115\130\123\131\015\001\002\000\170" +
    "\015\uff5b\026\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035" +
    "\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\046\uff5b\051\uff5b\052\uff5b\053\uff5b\054" +
    "\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b" +
    "\063\uff5b\064\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072" +
    "\uff5b\073\uff5b\074\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b" +
    "\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\112" +
    "\uff5b\114\uff5b\115\uff5b\116\uff5b\120\uff5b\121\uff5b\122\uff5b" +
    "\123\uff5b\124\uff5b\125\uff5b\126\uff5b\127\uff5b\130\uff5b\131" +
    "\uff5b\001\002\000\006\102\uff53\122\uff53\001\002\000\170" +
    "\015\uff7f\026\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f" +
    "\102\uff7f\103\154\104\uff7f\105\uff7f\106\uff7f\107\uff7f\112" +
    "\uff7f\114\uff7f\115\146\116\150\120\uff7f\121\uff7f\122\uff7f" +
    "\123\145\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f\131" +
    "\uff7f\001\002\000\004\131\015\001\002\000\006\102\104" +
    "\122\346\001\002\000\170\015\uff4f\026\uff4f\031\uff4f\032" +
    "\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\051" +
    "\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f\057\uff4f" +
    "\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\066\uff4f\067" +
    "\uff4f\070\uff4f\071\uff4f\072\uff4f\073\uff4f\074\uff4f\076\uff4f" +
    "\077\uff4f\100\uff4f\101\uff4f\102\uff4f\103\uff4f\104\uff4f\105" +
    "\uff4f\106\uff4f\107\uff4f\112\uff4f\114\uff4f\115\uff4f\116\uff4f" +
    "\120\uff4f\121\uff4f\122\uff4f\123\uff4f\124\uff4f\125\uff4f\126" +
    "\uff4f\127\uff4f\130\uff4f\131\uff4f\001\002\000\020\041\070" +
    "\042\075\043\072\044\077\045\067\047\100\131\015\001" +
    "\002\000\004\120\351\001\002\000\032\032\uff91\033\uff91" +
    "\036\uff91\037\uff91\040\uff91\055\uff91\074\uff91\102\uff91\105" +
    "\uff91\106\uff91\120\uff91\122\uff91\001\002\000\072\051\142" +
    "\052\133\053\137\054\157\055\156\056\135\057\134\060" +
    "\143\061\144\062\151\063\136\064\152\066\132\067\147" +
    "\070\155\071\153\074\uff96\102\uff96\103\154\105\uff96\106" +
    "\uff96\107\141\114\140\115\146\116\150\120\uff96\122\uff96" +
    "\123\145\001\002\000\020\041\070\042\075\043\072\044" +
    "\077\045\067\047\100\131\015\001\002\000\012\036\uff9c" +
    "\037\uff9c\040\uff9c\055\uff9c\001\002\000\014\036\uff9d\037" +
    "\uff9d\040\uff9d\055\uff9d\104\356\001\002\000\020\041\070" +
    "\042\075\043\072\044\077\045\067\047\100\131\015\001" +
    "\002\000\012\036\uff9e\037\uff9e\040\uff9e\055\uff9e\001\002" +
    "\000\006\104\u0128\131\015\001\002\000\014\031\uffba\034" +
    "\u0114\035\u0112\104\u0113\122\uffba\001\002\000\004\104\u0103" +
    "\001\002\000\006\104\377\131\015\001\002\000\004\131" +
    "\015\001\002\000\014\034\uff48\035\uff48\113\uff48\115\366" +
    "\131\uff48\001\002\000\006\120\370\131\015\001\002\000" +
    "\006\102\104\120\373\001\002\000\014\036\uff9f\037\uff9f" +
    "\040\uff9f\055\uff9f\104\371\001\002\000\020\041\070\042" +
    "\075\043\072\044\077\045\067\047\100\131\015\001\002" +
    "\000\012\036\uffa0\037\uffa0\040\uffa0\055\uffa0\001\002\000" +
    "\014\036\uffa1\037\uffa1\040\uffa1\055\uffa1\104\374\001\002" +
    "\000\020\041\070\042\075\043\072\044\077\045\067\047" +
    "\100\131\015\001\002\000\012\036\uffa2\037\uffa2\040\uffa2" +
    "\055\uffa2\001\002\000\004\104\u0101\001\002\000\044\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\115\120\124\126\125\127\126" +
    "\117\127\115\130\123\131\015\001\002\000\070\031\uffb8" +
    "\034\uffb8\035\uffb8\051\142\052\133\053\137\054\157\055" +
    "\156\056\135\057\134\060\143\061\144\062\151\063\136" +
    "\064\152\066\132\067\147\070\155\071\153\103\154\104" +
    "\uffb8\107\141\114\140\115\146\116\150\122\uffb8\123\145" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\070\031\uffb9\034\uffb9\035\uffb9\051\142\052\133" +
    "\053\137\054\157\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\103\154\104\uffb9\107\141\114\140\115\146\116" +
    "\150\122\uffb9\123\145\001\002\000\020\041\070\042\075" +
    "\043\072\044\077\045\067\047\100\131\015\001\002\000" +
    "\006\032\u0105\033\u0107\001\002\000\004\104\u0110\001\002" +
    "\000\012\031\uffbf\032\u010a\033\u010b\122\uffbf\001\002\000" +
    "\004\104\u0108\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\066\031\uffbd\032\uffbd\033\uffbd\051" +
    "\142\052\133\053\137\054\157\055\156\056\135\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\103\154\107\141\114\140\115\146" +
    "\116\150\122\uffbd\123\145\001\002\000\004\104\u010e\001" +
    "\002\000\004\104\u010c\001\002\000\044\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\066\031\uffbb\032\uffbb\033" +
    "\uffbb\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\103\154\107\141\114\140" +
    "\115\146\116\150\122\uffbb\123\145\001\002\000\044\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\115\120\124\126\125\127\126" +
    "\117\127\115\130\123\131\015\001\002\000\066\031\uffbc" +
    "\032\uffbc\033\uffbc\051\142\052\133\053\137\054\157\055" +
    "\156\056\135\057\134\060\143\061\144\062\151\063\136" +
    "\064\152\066\132\067\147\070\155\071\153\103\154\107" +
    "\141\114\140\115\146\116\150\122\uffbc\123\145\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\066\031\uffbe\032\uffbe\033\uffbe\051\142\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\103\154\107\141\114\140\115\146\116\150\122\uffbe\123" +
    "\145\001\002\000\004\131\015\001\002\000\004\131\015" +
    "\001\002\000\006\104\u0115\131\015\001\002\000\044\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\115\120\124\126\125\127\126" +
    "\117\127\115\130\123\131\015\001\002\000\004\104\u0117" +
    "\001\002\000\044\041\070\042\075\043\072\044\077\045" +
    "\067\046\111\064\122\072\113\073\124\076\116\115\120" +
    "\124\126\125\127\126\117\127\115\130\123\131\015\001" +
    "\002\000\070\031\uffb5\034\uffb5\035\uffb5\051\142\052\133" +
    "\053\137\054\157\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\103\154\104\uffb5\107\141\114\140\115\146\116" +
    "\150\122\uffb5\123\145\001\002\000\070\031\uffb4\034\uffb4" +
    "\035\uffb4\051\142\052\133\053\137\054\157\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\103\154\104\uffb4\107" +
    "\141\114\140\115\146\116\150\122\uffb4\123\145\001\002" +
    "\000\004\055\u0122\001\002\000\014\031\uffb2\034\uffb2\035" +
    "\uffb2\104\uffb2\122\uffb2\001\002\000\004\113\364\001\002" +
    "\000\010\104\u011e\113\uff49\115\060\001\002\000\020\041" +
    "\070\042\075\043\072\044\077\045\067\047\100\131\015" +
    "\001\002\000\004\055\u0120\001\002\000\044\041\070\042" +
    "\075\043\072\044\077\045\067\046\111\064\122\072\113" +
    "\073\124\076\116\115\120\124\126\125\127\126\117\127" +
    "\115\130\123\131\015\001\002\000\070\031\uffb1\034\uffb1" +
    "\035\uffb1\051\142\052\133\053\137\054\157\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\103\154\104\uffb1\107" +
    "\141\114\140\115\146\116\150\122\uffb1\123\145\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\070\031\uffb0\034\uffb0\035\uffb0\051\142\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\103\154\104\uffb0\107\141\114\140\115\146\116\150\122" +
    "\uffb0\123\145\001\002\000\004\104\u0125\001\002\000\004" +
    "\131\015\001\002\000\014\031\uffb3\034\uffb3\035\uffb3\104" +
    "\uffb3\122\uffb3\001\002\000\004\104\u012a\001\002\000\004" +
    "\131\015\001\002\000\014\031\uffb6\034\uffb6\035\uffb6\104" +
    "\uffb6\122\uffb6\001\002\000\004\131\015\001\002\000\014" +
    "\031\uffb7\034\uffb7\035\uffb7\104\uffb7\122\uffb7\001\002\000" +
    "\006\104\u014c\131\015\001\002\000\006\104\u0148\131\015" +
    "\001\002\000\014\031\uffaf\036\u0135\037\u0137\040\u0136\122" +
    "\uffaf\001\002\000\006\104\u0131\131\015\001\002\000\004" +
    "\104\u0133\001\002\000\044\041\070\042\075\043\072\044" +
    "\077\045\067\046\111\064\122\072\113\073\124\076\116" +
    "\115\120\124\126\125\127\126\117\127\115\130\123\131" +
    "\015\001\002\000\070\031\uffab\036\uffab\037\uffab\040\uffab" +
    "\051\142\052\133\053\137\054\157\055\156\056\135\057" +
    "\134\060\143\061\144\062\151\063\136\064\152\066\132" +
    "\067\147\070\155\071\153\103\154\107\141\114\140\115" +
    "\146\116\150\122\uffab\123\145\001\002\000\044\041\070" +
    "\042\075\043\072\044\077\045\067\046\111\064\122\072" +
    "\113\073\124\076\116\115\120\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\070\031\uffac\036" +
    "\uffac\037\uffac\040\uffac\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\103\154" +
    "\107\141\114\140\115\146\116\150\122\uffac\123\145\001" +
    "\002\000\006\104\u0143\131\015\001\002\000\006\104\u013e" +
    "\131\015\001\002\000\006\104\u0139\131\015\001\002\000" +
    "\004\104\u013b\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\070\031\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\103\154\107\141\114\140" +
    "\115\146\116\150\122\uffa5\123\145\001\002\000\044\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\115\120\124\126\125\127\126" +
    "\117\127\115\130\123\131\015\001\002\000\070\031\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\103" +
    "\154\107\141\114\140\115\146\116\150\122\uffa6\123\145" +
    "\001\002\000\004\104\u0140\001\002\000\044\041\070\042" +
    "\075\043\072\044\077\045\067\046\111\064\122\072\113" +
    "\073\124\076\116\115\120\124\126\125\127\126\117\127" +
    "\115\130\123\131\015\001\002\000\070\031\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\051\142\052\133\053\137\054\157\055" +
    "\156\056\135\057\134\060\143\061\144\062\151\063\136" +
    "\064\152\066\132\067\147\070\155\071\153\103\154\107" +
    "\141\114\140\115\146\116\150\122\uffa3\123\145\001\002" +
    "\000\044\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\124\076\116\115\120\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\070\031\uffa4\036\uffa4\037\uffa4\040\uffa4\051\142\052\133" +
    "\053\137\054\157\055\156\056\135\057\134\060\143\061" +
    "\144\062\151\063\136\064\152\066\132\067\147\070\155" +
    "\071\153\103\154\107\141\114\140\115\146\116\150\122" +
    "\uffa4\123\145\001\002\000\004\104\u0145\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\070\031" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\051\142\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\103\154\107\141\114\140\115\146\116\150\122\uffa7\123" +
    "\145\001\002\000\044\041\070\042\075\043\072\044\077" +
    "\045\067\046\111\064\122\072\113\073\124\076\116\115" +
    "\120\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\070\031\uffa8\036\uffa8\037\uffa8\040\uffa8\051" +
    "\142\052\133\053\137\054\157\055\156\056\135\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\103\154\107\141\114\140\115\146" +
    "\116\150\122\uffa8\123\145\001\002\000\004\104\u014a\001" +
    "\002\000\044\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\124\076\116\115\120\124" +
    "\126\125\127\126\117\127\115\130\123\131\015\001\002" +
    "\000\070\031\uffad\036\uffad\037\uffad\040\uffad\051\142\052" +
    "\133\053\137\054\157\055\156\056\135\057\134\060\143" +
    "\061\144\062\151\063\136\064\152\066\132\067\147\070" +
    "\155\071\153\103\154\107\141\114\140\115\146\116\150" +
    "\122\uffad\123\145\001\002\000\044\041\070\042\075\043" +
    "\072\044\077\045\067\046\111\064\122\072\113\073\124" +
    "\076\116\115\120\124\126\125\127\126\117\127\115\130" +
    "\123\131\015\001\002\000\070\031\uffae\036\uffae\037\uffae" +
    "\040\uffae\051\142\052\133\053\137\054\157\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\103\154\107\141\114" +
    "\140\115\146\116\150\122\uffae\123\145\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\004\104" +
    "\u014e\001\002\000\044\041\070\042\075\043\072\044\077" +
    "\045\067\046\111\064\122\072\113\073\124\076\116\115" +
    "\120\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\070\031\uffaa\036\uffaa\037\uffaa\040\uffaa\051" +
    "\142\052\133\053\137\054\157\055\156\056\135\057\134" +
    "\060\143\061\144\062\151\063\136\064\152\066\132\067" +
    "\147\070\155\071\153\103\154\107\141\114\140\115\146" +
    "\116\150\122\uffaa\123\145\001\002\000\070\031\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\103\154" +
    "\107\141\114\140\115\146\116\150\122\uffa9\123\145\001" +
    "\002\000\004\117\u0152\001\002\000\006\012\ufff2\122\ufff2" +
    "\001\002\000\006\012\u0155\122\u0154\001\002\000\010\010" +
    "\ufff3\011\ufff3\122\ufff3\001\002\000\004\131\015\001\002" +
    "\000\006\012\ufff1\122\ufff1\001\002\000\006\013\u0159\115" +
    "\u0158\001\002\000\006\120\u01b8\131\015\001\002\000\004" +
    "\131\015\001\002\000\004\115\u015b\001\002\000\006\120" +
    "\u015d\131\015\001\002\000\006\102\104\120\u01b1\001\002" +
    "\000\004\117\u015f\001\002\000\006\012\uffef\122\uffef\001" +
    "\002\000\074\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\025\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\064\uffea\072\uffea\073\uffea\075\uffea" +
    "\076\uffea\105\uffea\115\uffea\117\uffea\122\uffea\124\uffea\125" +
    "\uffea\126\uffea\127\uffea\130\uffea\131\uffea\001\002\000\074" +
    "\014\u0172\015\u0178\016\u0170\017\u016f\020\u0166\021\u0161\022" +
    "\u016c\025\u0167\041\070\042\075\043\072\044\077\045\067" +
    "\046\111\064\122\072\113\073\u0173\075\u0177\076\116\105" +
    "\u0168\115\120\117\u015f\122\u0175\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\004\131\015\001" +
    "\002\000\100\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\025\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\064\uffe2\072\uffe2\073\uffe2\075\uffe2" +
    "\076\uffe2\100\uffe2\101\uffe2\105\uffe2\115\uffe2\117\uffe2\122" +
    "\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2" +
    "\001\002\000\062\026\u01a5\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\103" +
    "\154\105\uffcd\107\141\114\140\115\146\116\150\123\145" +
    "\001\002\000\100\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\025\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\064\uffe1\072\uffe1\073\uffe1\075" +
    "\uffe1\076\uffe1\100\uffe1\101\uffe1\105\uffe1\115\uffe1\117\uffe1" +
    "\122\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\001\002\000\100\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\025\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\064\uffe8\072\uffe8\073\uffe8" +
    "\075\uffe8\076\uffe8\100\uffe8\101\uffe8\105\uffe8\115\uffe8\117" +
    "\uffe8\122\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8" +
    "\131\uffe8\001\002\000\004\105\u01a4\001\002\000\044\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\124\076\116\115\120\124\126\125\127\126" +
    "\117\127\115\130\123\131\015\001\002\000\100\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\025" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\064\uffde\072\uffde\073\uffde\075\uffde\076\uffde\100\uffde\101" +
    "\uffde\105\uffde\115\uffde\117\uffde\122\uffde\124\uffde\125\uffde" +
    "\126\uffde\127\uffde\130\uffde\131\uffde\001\002\000\100\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\025\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\064\uffe6\072\uffe6\073\uffe6\075\uffe6\076\uffe6\100\uffe6" +
    "\101\uffe6\105\uffe6\115\uffe6\117\uffe6\122\uffe6\124\uffe6\125" +
    "\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\001\002\000\004" +
    "\105\u01a1\001\002\000\074\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\064\uffe9\072\uffe9\073" +
    "\uffe9\075\uffe9\076\uffe9\105\uffe9\115\uffe9\117\uffe9\122\uffe9" +
    "\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9\001" +
    "\002\000\004\115\u0192\001\002\000\100\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\025\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\064\uffe5" +
    "\072\uffe5\073\uffe5\075\uffe5\076\uffe5\100\uffe5\101\uffe5\105" +
    "\uffe5\115\uffe5\117\uffe5\122\uffe5\124\uffe5\125\uffe5\126\uffe5" +
    "\127\uffe5\130\uffe5\131\uffe5\001\002\000\100\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\064" +
    "\uffe4\072\uffe4\073\uffe4\075\uffe4\076\uffe4\100\uffe4\101\uffe4" +
    "\105\uffe4\115\uffe4\117\uffe4\122\uffe4\124\uffe4\125\uffe4\126" +
    "\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000\004\105\u0191" +
    "\001\002\000\004\131\015\001\002\000\100\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\064" +
    "\uffe7\072\uffe7\073\uffe7\075\uffe7\076\uffe7\100\uffe7\101\uffe7" +
    "\105\uffe7\115\uffe7\117\uffe7\122\uffe7\124\uffe7\125\uffe7\126" +
    "\uffe7\127\uffe7\130\uffe7\131\uffe7\001\002\000\044\041\070" +
    "\042\075\043\072\044\077\045\067\046\111\064\122\072" +
    "\113\073\124\076\116\115\120\124\126\125\127\126\117" +
    "\127\115\130\123\131\015\001\002\000\004\131\015\001" +
    "\002\000\100\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\025\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\064\uffe3\072\uffe3\073\uffe3\075\uffe3" +
    "\076\uffe3\100\uffe3\101\uffe3\105\uffe3\115\uffe3\117\uffe3\122" +
    "\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3" +
    "\001\002\000\102\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\025\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\064\uffdc\072\uffdc\073" +
    "\uffdc\075\uffdc\076\uffdc\100\uffdc\101\uffdc\105\uffdc\115\uffdc" +
    "\117\uffdc\122\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130" +
    "\uffdc\131\uffdc\001\002\000\004\105\uffcc\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\072\014" +
    "\u0172\015\u0178\016\u0170\017\u016f\020\u0166\021\u0161\022\u016c" +
    "\025\u0167\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\u0173\075\u0177\076\116\105\u0168" +
    "\115\120\117\u015f\124\126\125\127\126\117\127\115\130" +
    "\123\131\015\001\002\000\100\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\064\uffe0\072\uffe0" +
    "\073\uffe0\075\uffe0\076\uffe0\100\uffe0\101\uffe0\105\uffe0\115" +
    "\uffe0\117\uffe0\122\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0" +
    "\130\uffe0\131\uffe0\001\002\000\004\014\u017b\001\002\000" +
    "\004\115\u017c\001\002\000\044\041\070\042\075\043\072" +
    "\044\077\045\067\046\111\064\122\072\113\073\124\076" +
    "\116\115\120\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\060\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\103" +
    "\154\107\141\114\140\115\146\116\150\120\u017e\123\145" +
    "\001\002\000\004\105\u017f\001\002\000\100\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\064" +
    "\uffd8\072\uffd8\073\uffd8\075\uffd8\076\uffd8\100\uffd8\101\uffd8" +
    "\105\uffd8\115\uffd8\117\uffd8\122\uffd8\124\uffd8\125\uffd8\126" +
    "\uffd8\127\uffd8\130\uffd8\131\uffd8\001\002\000\060\051\142" +
    "\052\133\053\137\054\157\055\156\056\135\057\134\060" +
    "\143\061\144\062\151\063\136\064\152\066\132\067\147" +
    "\070\155\071\153\077\u0181\103\154\107\141\114\140\115" +
    "\146\116\150\123\145\001\002\000\072\014\u0172\015\u0178" +
    "\016\u0170\017\u016f\020\u0166\021\u0161\022\u016c\025\u0167\041" +
    "\070\042\075\043\072\044\077\045\067\046\111\064\122" +
    "\072\113\073\u0173\075\u0177\076\116\105\u0168\115\120\117" +
    "\u015f\124\126\125\127\126\117\127\115\130\123\131\015" +
    "\001\002\000\006\100\u0183\101\u0184\001\002\000\072\014" +
    "\u0172\015\u0178\016\u0170\017\u016f\020\u0166\021\u0161\022\u016c" +
    "\025\u0167\041\070\042\075\043\072\044\077\045\067\046" +
    "\111\064\122\072\113\073\u0173\075\u0177\076\116\105\u0168" +
    "\115\120\117\u015f\124\126\125\127\126\117\127\115\130" +
    "\123\131\015\001\002\000\100\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\025\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\064\uffda\072\uffda" +
    "\073\uffda\075\uffda\076\uffda\100\uffda\101\uffda\105\uffda\115" +
    "\uffda\117\uffda\122\uffda\124\uffda\125\uffda\126\uffda\127\uffda" +
    "\130\uffda\131\uffda\001\002\000\004\101\u0186\001\002\000" +
    "\100\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\025\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\064\uffdb\072\uffdb\073\uffdb\075\uffdb\076\uffdb" +
    "\100\uffdb\101\uffdb\105\uffdb\115\uffdb\117\uffdb\122\uffdb\124" +
    "\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\001\002" +
    "\000\010\074\315\102\104\105\u0188\001\002\000\100\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\025\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\064\uffdf\072\uffdf\073\uffdf\075\uffdf\076\uffdf\100\uffdf" +
    "\101\uffdf\105\uffdf\115\uffdf\117\uffdf\122\uffdf\124\uffdf\125" +
    "\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\060" +
    "\015\u018a\051\142\052\133\053\137\054\157\055\156\056" +
    "\135\057\134\060\143\061\144\062\151\063\136\064\152" +
    "\066\132\067\147\070\155\071\153\103\154\107\141\114" +
    "\140\115\146\116\150\123\145\001\002\000\072\014\u0172" +
    "\015\u0178\016\u0170\017\u016f\020\u0166\021\u0161\022\u016c\025" +
    "\u0167\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\u0173\075\u0177\076\116\105\u0168\115" +
    "\120\117\u015f\124\126\125\127\126\117\127\115\130\123" +
    "\131\015\001\002\000\100\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\025\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\064\uffd9\072\uffd9\073" +
    "\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9\105\uffd9\115\uffd9" +
    "\117\uffd9\122\uffd9\124\uffd9\125\uffd9\126\uffd9\127\uffd9\130" +
    "\uffd9\131\uffd9\001\002\000\004\074\u018d\001\002\000\044" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\060\015" +
    "\u018f\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\103\154\107\141\114\140" +
    "\115\146\116\150\123\145\001\002\000\072\014\u0172\015" +
    "\u0178\016\u0170\017\u016f\020\u0166\021\u0161\022\u016c\025\u0167" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\u0173\075\u0177\076\116\105\u0168\115\120" +
    "\117\u015f\124\126\125\127\126\117\127\115\130\123\131" +
    "\015\001\002\000\100\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\025\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\064\uffd7\072\uffd7\073\uffd7" +
    "\075\uffd7\076\uffd7\100\uffd7\101\uffd7\105\uffd7\115\uffd7\117" +
    "\uffd7\122\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7" +
    "\131\uffd7\001\002\000\100\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\025\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\064\uffd6\072\uffd6\073" +
    "\uffd6\075\uffd6\076\uffd6\100\uffd6\101\uffd6\105\uffd6\115\uffd6" +
    "\117\uffd6\122\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130" +
    "\uffd6\131\uffd6\001\002\000\046\023\u0193\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\004\102\u019c\001\002\000" +
    "\060\051\142\052\133\053\137\054\157\055\156\056\135" +
    "\057\134\060\143\061\144\062\151\063\136\064\152\066" +
    "\132\067\147\070\155\071\153\102\u0195\103\154\107\141" +
    "\114\140\115\146\116\150\123\145\001\002\000\004\131" +
    "\015\001\002\000\004\102\u0197\001\002\000\046\023\u0198" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\124\126\125\127" +
    "\126\117\127\115\130\123\131\015\001\002\000\004\120" +
    "\u019b\001\002\000\060\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\103\154" +
    "\107\141\114\140\115\146\116\150\120\u019a\123\145\001" +
    "\002\000\004\105\uffcb\001\002\000\004\105\uffc9\001\002" +
    "\000\004\131\015\001\002\000\004\102\u019e\001\002\000" +
    "\044\041\070\042\075\043\072\044\077\045\067\046\111" +
    "\064\122\072\113\073\124\076\116\115\120\124\126\125" +
    "\127\126\117\127\115\130\123\131\015\001\002\000\060" +
    "\051\142\052\133\053\137\054\157\055\156\056\135\057" +
    "\134\060\143\061\144\062\151\063\136\064\152\066\132" +
    "\067\147\070\155\071\153\103\154\107\141\114\140\115" +
    "\146\116\150\120\u01a0\123\145\001\002\000\004\105\uffca" +
    "\001\002\000\100\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\025\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\064\uffdd\072\uffdd\073\uffdd\075" +
    "\uffdd\076\uffdd\100\uffdd\101\uffdd\105\uffdd\115\uffdd\117\uffdd" +
    "\122\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131" +
    "\uffdd\001\002\000\060\051\142\052\133\053\137\054\157" +
    "\055\156\056\135\057\134\060\143\061\144\062\151\063" +
    "\136\064\152\066\132\067\147\070\155\071\153\103\154" +
    "\105\u01a3\107\141\114\140\115\146\116\150\123\145\001" +
    "\002\000\100\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\025\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\064\uffd3\072\uffd3\073\uffd3\075\uffd3" +
    "\076\uffd3\100\uffd3\101\uffd3\105\uffd3\115\uffd3\117\uffd3\122" +
    "\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3" +
    "\001\002\000\100\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\025\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\064\uffd5\072\uffd5\073\uffd5\075" +
    "\uffd5\076\uffd5\100\uffd5\101\uffd5\105\uffd5\115\uffd5\117\uffd5" +
    "\122\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131" +
    "\uffd5\001\002\000\050\022\u016c\024\u01a8\041\070\042\075" +
    "\043\072\044\077\045\067\046\111\064\122\072\113\073" +
    "\124\076\116\115\120\124\126\125\127\126\117\127\115" +
    "\130\123\131\015\001\002\000\004\105\uffce\001\002\000" +
    "\004\105\uffcf\001\002\000\004\131\015\001\002\000\060" +
    "\051\142\052\133\053\137\054\157\055\156\056\135\057" +
    "\134\060\143\061\144\062\151\063\136\064\152\066\132" +
    "\067\147\070\155\071\153\103\154\105\uffd0\107\141\114" +
    "\140\115\146\116\150\123\145\001\002\000\006\105\uffc8" +
    "\113\017\001\002\000\004\115\u01ac\001\002\000\046\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\064\uffd2" +
    "\072\uffd2\073\uffd2\076\uffd2\115\uffd2\120\uffd2\124\uffd2\125" +
    "\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\001\002\000\046" +
    "\041\070\042\075\043\072\044\077\045\067\046\111\064" +
    "\122\072\113\073\124\076\116\115\120\120\u01ae\124\126" +
    "\125\127\126\117\127\115\130\123\131\015\001\002\000" +
    "\004\105\u01b0\001\002\000\116\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\051\142\052\133\053\137\054" +
    "\157\055\156\056\135\057\134\060\143\061\144\062\151" +
    "\063\136\064\152\066\132\067\147\070\155\071\153\072" +
    "\uffd1\073\uffd1\076\uffd1\103\154\107\141\114\140\115\146" +
    "\116\150\120\uffd1\123\145\124\uffd1\125\uffd1\126\uffd1\127" +
    "\uffd1\130\uffd1\131\uffd1\001\002\000\100\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\025\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\064\uffd4" +
    "\072\uffd4\073\uffd4\075\uffd4\076\uffd4\100\uffd4\101\uffd4\105" +
    "\uffd4\115\uffd4\117\uffd4\122\uffd4\124\uffd4\125\uffd4\126\uffd4" +
    "\127\uffd4\130\uffd4\131\uffd4\001\002\000\004\117\u015f\001" +
    "\002\000\006\012\ufff0\122\ufff0\001\002\000\010\113\017" +
    "\115\uffeb\116\u01b4\001\002\000\044\041\070\042\075\043" +
    "\072\044\077\045\067\046\111\064\122\072\113\073\124" +
    "\076\116\115\120\124\126\125\127\126\117\127\115\130" +
    "\123\131\015\001\002\000\060\051\142\052\133\053\137" +
    "\054\157\055\156\056\135\057\134\060\143\061\144\062" +
    "\151\063\136\064\152\066\132\067\147\070\155\071\153" +
    "\103\154\107\141\114\140\115\146\116\150\121\u01b6\123" +
    "\145\001\002\000\004\115\uffec\001\002\000\006\102\104" +
    "\120\u01ba\001\002\000\004\117\u015f\001\002\000\006\012" +
    "\uffed\122\uffed\001\002\000\004\117\u015f\001\002\000\006" +
    "\012\uffee\122\uffee\001\002\000\004\131\015\001\002\000" +
    "\004\120\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\006\003\004\007\003\001\001\000\006\010" +
    "\010\011\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\024\001\001\000\004\075\020\001\001\000" +
    "\002\001\001\000\006\074\012\075\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\025\001\001\000\002\001\001\000\004" +
    "\075\027\001\001\000\002\001\001\000\006\006\032\075" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\035\001\001\000\006\013\042\014" +
    "\040\001\001\000\004\075\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\045\001\001\000\012" +
    "\041\047\042\051\045\050\047\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\054\074\055\075\056\001" +
    "\001\000\004\051\u012d\001\001\000\006\043\360\075\361" +
    "\001\001\000\002\001\001\000\010\052\060\053\063\075" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\056\113\060\351\065" +
    "\107\066\120\072\130\073\111\074\124\075\013\001\001" +
    "\000\016\054\075\055\100\056\073\057\070\074\072\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\102\053" +
    "\063\075\062\001\001\000\002\001\001\000\006\053\105" +
    "\075\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\056\113\060\127\065\107\066\120\072\130\073\111" +
    "\074\124\075\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\056\113\060\342\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\056\113\060\321" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\022\056\113\060\317\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\022\056\113\060\316\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\002\001" +
    "\001\000\010\052\313\053\063\075\062\001\001\000\004" +
    "\064\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\056\113\060\311" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\022\056\113\060\310\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\022\056\113\060" +
    "\307\065\107\066\120\072\130\073\111\074\124\075\013" +
    "\001\001\000\022\056\113\060\306\065\107\066\120\072" +
    "\130\073\111\074\124\075\013\001\001\000\022\056\113" +
    "\060\305\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\022\056\113\060\304\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\004\075" +
    "\277\001\001\000\004\075\263\001\001\000\022\056\113" +
    "\060\262\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\022\056\113\060\261\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\022\056" +
    "\113\060\260\065\107\066\120\072\130\073\111\074\124" +
    "\075\013\001\001\000\004\075\244\001\001\000\024\053" +
    "\200\056\113\060\203\065\107\066\120\072\130\073\111" +
    "\074\124\075\201\001\001\000\022\056\113\060\177\065" +
    "\107\066\120\072\130\073\111\074\124\075\013\001\001" +
    "\000\024\056\113\060\171\061\172\065\107\066\120\072" +
    "\130\073\111\074\124\075\013\001\001\000\022\056\113" +
    "\060\170\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\022\056\113\060\167\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\022\056" +
    "\113\060\166\065\107\066\120\072\130\073\111\074\124" +
    "\075\013\001\001\000\004\075\162\001\001\000\022\056" +
    "\113\060\161\065\107\066\120\072\130\073\111\074\124" +
    "\075\013\001\001\000\022\056\113\060\160\065\107\066" +
    "\120\072\130\073\111\074\124\075\013\001\001\000\022" +
    "\056\113\060\157\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\056\113\060\176\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\004\064" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\054\224\055\100\056\073" +
    "\057\070\074\072\075\013\001\001\000\026\053\216\056" +
    "\113\060\171\061\217\065\107\066\120\072\130\073\111" +
    "\074\124\075\201\001\001\000\002\001\001\000\022\056" +
    "\113\060\210\065\107\066\120\072\130\073\111\074\124" +
    "\075\013\001\001\000\002\001\001\000\006\053\212\075" +
    "\062\001\001\000\002\001\001\000\022\056\113\060\214" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\056\113\060" +
    "\222\065\107\066\120\072\130\073\111\074\124\075\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\235\075\062\001\001\000\022\056\113" +
    "\060\227\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\006\053\231\075\062" +
    "\001\001\000\002\001\001\000\022\056\113\060\233\065" +
    "\107\066\120\072\130\073\111\074\124\075\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\056\113\060\237\065\107\066\120\072\130\073\111" +
    "\074\124\075\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\056\113\060\242\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\247\075\062\001\001\000\002\001\001\000\006\053" +
    "\254\075\062\001\001\000\022\056\113\060\252\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\256\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\056\113\060\271\062\270\063\266" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\056\113\060" +
    "\271\063\274\065\107\066\120\072\130\073\111\074\124" +
    "\075\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\054\276\055\100\056\073\057\070\074\072\075\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\056" +
    "\113\060\271\062\302\063\266\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\056\113\060\315\065\107\066\120\072\130\073" +
    "\111\074\124\075\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\056\113\060\323\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\002\001\001\000" +
    "\022\056\113\060\325\065\107\066\120\072\130\073\111" +
    "\074\124\075\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\056\113\060\333\065\107\066\120\067\332" +
    "\070\331\071\330\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\056\113\060" +
    "\336\065\107\066\120\072\130\073\111\074\124\075\013" +
    "\001\001\000\002\001\001\000\026\056\113\060\333\065" +
    "\107\066\120\070\341\071\330\072\130\073\111\074\124" +
    "\075\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\052\344\053\063\075\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\054\347\055" +
    "\100\056\073\057\070\074\072\075\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\054" +
    "\353\055\100\056\073\057\070\074\072\075\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\054\356\055" +
    "\100\056\073\057\070\074\072\075\013\001\001\000\002" +
    "\001\001\000\004\075\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\375\001\001\000\004\075\364" +
    "\001\001\000\002\001\001\000\010\052\366\053\063\075" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\054\371\055\100\056\073\057\070\074\072\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\054\374" +
    "\055\100\056\073\057\070\074\072\075\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\056\113\060\377" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\022\056\113\060\u0101\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\016\054\u0103\055\100\056\073\057\070" +
    "\074\072\075\013\001\001\000\004\046\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\u0108\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\056\113\060\u010c\065\107\066" +
    "\120\072\130\073\111\074\124\075\013\001\001\000\002" +
    "\001\001\000\022\056\113\060\u010e\065\107\066\120\072" +
    "\130\073\111\074\124\075\013\001\001\000\002\001\001" +
    "\000\022\056\113\060\u0110\065\107\066\120\072\130\073" +
    "\111\074\124\075\013\001\001\000\002\001\001\000\004" +
    "\075\u0123\001\001\000\012\044\u011a\050\u0119\074\u011b\075" +
    "\u011c\001\001\000\004\075\u0115\001\001\000\022\056\113" +
    "\060\u0118\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\022\056\113\060\u0117" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\054\u011e\055\100\056\073\057\070\074\072\075\013" +
    "\001\001\000\002\001\001\000\022\056\113\060\u0120\065" +
    "\107\066\120\072\130\073\111\074\124\075\013\001\001" +
    "\000\002\001\001\000\022\056\113\060\u0122\065\107\066" +
    "\120\072\130\073\111\074\124\075\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\u0125\050\u0119\074" +
    "\u011b\075\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\u0128\050\u0119\074\u011b\075\u011c\001\001\000" +
    "\002\001\001\000\012\044\u012a\050\u0119\074\u011b\075\u011c" +
    "\001\001\000\002\001\001\000\004\075\u014c\001\001\000" +
    "\004\075\u0146\001\001\000\002\001\001\000\004\075\u012f" +
    "\001\001\000\002\001\001\000\022\056\113\060\u0131\065" +
    "\107\066\120\072\130\073\111\074\124\075\013\001\001" +
    "\000\002\001\001\000\022\056\113\060\u0133\065\107\066" +
    "\120\072\130\073\111\074\124\075\013\001\001\000\002" +
    "\001\001\000\004\075\u0141\001\001\000\004\075\u013c\001" +
    "\001\000\004\075\u0137\001\001\000\002\001\001\000\022" +
    "\056\113\060\u0139\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\022\056\113" +
    "\060\u013b\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\u013e\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\022\056\113" +
    "\060\u0140\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\u0143\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\022\056\113" +
    "\060\u0145\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\u0148\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\002\001\001\000\022\056\113" +
    "\060\u014a\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\022\056\113\060\u014f" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\022\056\113\060\u014e\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0152\001\001\000\004\016\u0155\001\001\000\002\001" +
    "\001\000\004\075\u0156\001\001\000\002\001\001\000\004" +
    "\017\u0159\001\001\000\010\052\u01b6\053\063\075\062\001" +
    "\001\000\006\074\u01b2\075\013\001\001\000\002\001\001" +
    "\000\010\052\u015b\053\063\075\062\001\001\000\002\001" +
    "\001\000\004\024\u015d\001\001\000\002\001\001\000\004" +
    "\020\u015f\001\001\000\052\021\u016a\022\u0164\023\u0170\024" +
    "\u0168\025\u016c\026\u016d\027\u0173\030\u0161\031\u0163\032\u0178" +
    "\034\u0169\035\u0175\056\113\060\u0162\065\107\066\120\072" +
    "\130\073\111\074\124\075\013\001\001\000\004\075\u01aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\056\113" +
    "\060\u01a1\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u018b" +
    "\075\062\001\001\000\002\001\001\000\022\056\113\060" +
    "\u0188\065\107\066\120\072\130\073\111\074\124\075\013" +
    "\001\001\000\010\052\u0186\053\063\075\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\056\113\060\u017f\065\107\066\120\072\130\073\111\074" +
    "\124\075\013\001\001\000\052\021\u0179\022\u0164\023\u0170" +
    "\024\u0168\025\u016c\026\u016d\027\u0173\030\u0161\031\u0163\032" +
    "\u0178\034\u0169\035\u0175\056\113\060\u0162\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\056\113" +
    "\060\u017c\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\021\u0181\022\u0164\023" +
    "\u0170\024\u0168\025\u016c\026\u016d\027\u0173\030\u0161\031\u0163" +
    "\032\u0178\034\u0169\035\u0175\056\113\060\u0162\065\107\066" +
    "\120\072\130\073\111\074\124\075\013\001\001\000\002" +
    "\001\001\000\052\021\u0184\022\u0164\023\u0170\024\u0168\025" +
    "\u016c\026\u016d\027\u0173\030\u0161\031\u0163\032\u0178\034\u0169" +
    "\035\u0175\056\113\060\u0162\065\107\066\120\072\130\073" +
    "\111\074\124\075\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\021\u018a\022\u0164\023\u0170" +
    "\024\u0168\025\u016c\026\u016d\027\u0173\030\u0161\031\u0163\032" +
    "\u0178\034\u0169\035\u0175\056\113\060\u0162\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\056\113\060\u018d\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\052\021\u018f\022\u0164\023\u0170\024\u0168" +
    "\025\u016c\026\u016d\027\u0173\030\u0161\031\u0163\032\u0178\034" +
    "\u0169\035\u0175\056\113\060\u0162\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\056\113\060\u0193\065\107\066\120" +
    "\072\130\073\111\074\124\075\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u0195\001\001\000\002" +
    "\001\001\000\022\056\113\060\u0198\065\107\066\120\072" +
    "\130\073\111\074\124\075\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u019c\001\001\000\002\001\001\000\022\056\113" +
    "\060\u019e\065\107\066\120\072\130\073\111\074\124\075" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\035\u01a6\036\u01a5\056\113\060\u01a8\065\107" +
    "\066\120\072\130\073\111\074\124\075\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\u01a9\075\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u01ac\001\001\000\022\056\113\060\u01ae" +
    "\065\107\066\120\072\130\073\111\074\124\075\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\056\113\060\u01b4\065\107\066\120\072\130" +
    "\073\111\074\124\075\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u01b8\001\001" +
    "\000\002\001\001\000\004\024\u01ba\001\001\000\002\001" +
    "\001\000\004\075\u01bc\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Yyparse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Yyparse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Yyparse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	// Init the log
	CUP$Yyparse$actions.setLog(log);
	// Init the factory
	CUP$Yyparse$actions.setQTFactory(qtFactory);
	CUP$Yyparse$actions.setOclFactory(oclFactory);

    }


	// Log file
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	public ILog getLog() {
		return log;
	}

	// Ocl Factory
	protected ASTFactory oclFactory;
	public void setOclFactory(ASTFactory oclFactory) {
		this.oclFactory = oclFactory;
	}
	public ASTFactory getOclFactory() {
		return oclFactory;
	}

	// QT Factory
	protected QTFactory qtFactory;
	public void setQTFactory(QTFactory qtFactory) {
		this.qtFactory = qtFactory;
	}
	public QTFactory getQTFactory() {
		return qtFactory;
	}

	// Change the method report_error to display location and the reason
	public void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}
	
	// Change the method report_error to display location and the reason
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Yyparse$actions {


	// Log file
	protected static ILog log;
	public static void setLog(ILog log) {
		CUP$Yyparse$actions.log = log;
	}
	public static ILog getLog() {
		return CUP$Yyparse$actions.log;
	}

	// OCL Factory
	protected static ASTFactory oclFactory;
	public static void setOclFactory(ASTFactory oclFactory) {
		CUP$Yyparse$actions.oclFactory = oclFactory;
	}
	public static ASTFactory getOclFactory() {
		return CUP$Yyparse$actions.oclFactory;
	}

	// QT Factory
	protected static QTFactory qtFactory;
	public static void setQTFactory(QTFactory qtFactory) {
		CUP$Yyparse$actions.qtFactory = qtFactory;
	}
	public static QTFactory getQTFactory() {
		return CUP$Yyparse$actions.qtFactory;
	}

	// Check and make a variableDeclaration
	public static VariableDeclarationAS makeVariableDeclaration(OclExpressionAS nameExp, TypeAS type, OclExpressionAS init, int left, int right) {
		if (nameExp instanceof PathNameExpAS) {
			List pathName = ((PathNameExpAS)nameExp).getPathName();
			if (pathName.size() == 1) {
				String name = (String)pathName.get(0);
				return oclFactory.buildVariableDeclaration(name, type, init);
			}
		}
		Symbol info = new Symbol(0, left, right);
		report_error("Variable declaration expected", info);
		return null;
	}
	
	// Report errors
	public static void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}


  private final Yyparse parser;

  /** Constructor */
  CUP$Yyparse$actions(Yyparse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Yyparse$do_action(
    int                        CUP$Yyparse$act_num,
    java_cup.runtime.lr_parser CUP$Yyparse$parser,
    java.util.Stack            CUP$Yyparse$stack,
    int                        CUP$Yyparse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Yyparse$result;

      /* select the action based on the action number */
      switch (CUP$Yyparse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // simpleName ::= SIMPLE_NAME 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = value;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(59/*simpleName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // pathName ::= pathName COLON_COLON simpleName 
            {
              List RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add name to path
								RESULT = path;
								path.add(name);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(58/*pathName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // pathName ::= simpleName 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a
								List seq = new Vector();
								seq.add(name);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(58/*pathName*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // primitiveLiteralExp ::= FALSE 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create BooleanLiteralExp
								RESULT = oclFactory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(57/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // primitiveLiteralExp ::= TRUE 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create BooleanLiteralExp
								RESULT = oclFactory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(57/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // primitiveLiteralExp ::= STRING 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create StringLiteralExp
								RESULT = oclFactory.buildStringLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(57/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // primitiveLiteralExp ::= REAL 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create RealLiteralExp
								RESULT = oclFactory.buildRealLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(57/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // primitiveLiteralExp ::= INTEGER 
            {
              PrimitiveLiteralExpAS RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create IntegerLiteralExp
								RESULT = oclFactory.buildIntegerLiteralExp(value);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(57/*primitiveLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tupleLiteralExp ::= TUPLE LEFT_BRA variableDeclarationList RIGHT_BRA 
            {
              TupleLiteralExpAS RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleLiteralExp
								RESULT = oclFactory.buildTupleLiteralExp(seq);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(56/*tupleLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // collectionRange ::= oclExpression DOT_DOT oclExpression 
            {
              CollectionRangeAS RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS first = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int lastleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int lastright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS last = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create CollectionRange
								RESULT = oclFactory.buildCollectionRange(first, last);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(55/*collectionRange*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // collectionLiteralPart ::= collectionRange 
            {
              CollectionLiteralPartAS RESULT = null;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionRangeAS range = (CollectionRangeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = range;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(54/*collectionLiteralPart*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // collectionLiteralPart ::= oclExpression 
            {
              CollectionLiteralPartAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create CollectionItem
								RESULT = oclFactory.buildCollectionItem(exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(54/*collectionLiteralPart*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // collectionLiteralParts ::= collectionLiteralParts COMMA collectionLiteralPart 
            {
              List RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add collPart to seq
								RESULT = seq;
								seq.add(colPart);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(53/*collectionLiteralParts*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // collectionLiteralParts ::= collectionLiteralPart 
            {
              List RESULT = null;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(colPart);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(53/*collectionLiteralParts*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // collectionKind ::= ORDERED_SET 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to ORDERED_SET
								RESULT = CollectionKindAS$Class.ORDERED_SET;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(44/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // collectionKind ::= COLLECTION 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to COLLECTION
								RESULT = CollectionKindAS$Class.COLLECTION;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(44/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // collectionKind ::= SEQUENCE 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to SEQUENCE
								RESULT = CollectionKindAS$Class.SEQUENCE;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(44/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // collectionKind ::= BAG 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to BAG
								RESULT = CollectionKindAS$Class.BAG;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(44/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // collectionKind ::= SET 
            {
              CollectionKindAS RESULT = null;
		
								// Set kind to SET
								RESULT = CollectionKindAS$Class.SET;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(44/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // collectionLiteralExp ::= collectionKind LEFT_BRA RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create CollectionLiteralExp
								RESULT = oclFactory.buildCollectionLiteralExp(kind, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(52/*collectionLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // collectionLiteralExp ::= collectionKind LEFT_BRA collectionLiteralParts RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionLiteralExp
								RESULT = oclFactory.buildCollectionLiteralExp(kind, parts);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(52/*collectionLiteralExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // literalExp ::= primitiveLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		PrimitiveLiteralExpAS exp = (PrimitiveLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(51/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // literalExp ::= tupleLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TupleLiteralExpAS exp = (TupleLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(51/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // literalExp ::= collectionLiteralExp 
            {
              LiteralExpAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionLiteralExpAS exp = (CollectionLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(51/*literalExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // isMarkedPre ::= AT PRE 
            {
              Boolean RESULT = null;
		
								RESULT = new Boolean(true);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(50/*isMarkedPre*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // isMarkedPre ::= 
            {
              Boolean RESULT = null;
		
								RESULT = new Boolean(false);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(50/*isMarkedPre*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // oclMessageArgument ::= oclExpression 
            {
              OclMessageArgAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OclMessageArg
								RESULT = oclFactory.buildOclMessageArg(exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(49/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // oclMessageArgument ::= QUESTION COLON type 
            {
              OclMessageArgAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OclMessageArg
								OclMessageArgAS arg = new OclMessageArgAS$Class();
								arg.setType(type);
								RESULT = arg;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(49/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // oclMessageArgument ::= QUESTION 
            {
              OclMessageArgAS RESULT = null;
		
								// Create OclMessageArg
								OclMessageArgAS arg = new OclMessageArgAS$Class();
								RESULT = arg;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(49/*oclMessageArgument*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // oclMessageArgumentList ::= oclMessageArgumentList COMMA oclMessageArgument 
            {
              List RESULT = null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
										
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(48/*oclMessageArgumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // oclMessageArgumentList ::= oclMessageArgument 
            {
              List RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(48/*oclMessageArgumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // argumentList ::= argumentList COMMA oclExpression 
            {
              List RESULT = null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
			  				
              CUP$Yyparse$result = new java_cup.runtime.Symbol(47/*argumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // argumentList ::= oclExpression 
            {
              List RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(47/*argumentList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // oclExpression ::= oclExpression UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExp
								RESULT = oclFactory.buildOclMessageExp(OclMessageKindAS$Class.UP, target, name, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // oclExpression ::= oclExpression UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExp
								RESULT = oclFactory.buildOclMessageExp(OclMessageKindAS$Class.UP, target, name, arguments);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExpAS
								RESULT = oclFactory.buildOclMessageExp(OclMessageKindAS$Class.UP_UP, target, name, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExpAS
								RESULT = oclFactory.buildOclMessageExp(OclMessageKindAS$Class.UP_UP, target, name, arguments);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // oclExpression ::= LET variableDeclarationList IN oclExpression 
            {
              OclExpressionAS RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create LetExp
								RESULT = oclFactory.buildLetExp(variables, exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // oclExpression ::= oclExpression IMPLIES oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create ImpliesExp
								RESULT = oclFactory.buildLogicalExp(sym.IMPLIES, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // oclExpression ::= oclExpression XOR oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OrExp
								RESULT = oclFactory.buildLogicalExp(sym.XOR, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // oclExpression ::= oclExpression OR oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OrExp
								RESULT = oclFactory.buildLogicalExp(sym.OR, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // oclExpression ::= oclExpression AND oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create AndExp
								RESULT = oclFactory.buildLogicalExp(sym.AND, left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // oclExpression ::= oclExpression NE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("<>", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // oclExpression ::= oclExpression EQ oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // oclExpression ::= oclExpression GE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp(">=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // oclExpression ::= oclExpression LE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("<=", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // oclExpression ::= oclExpression GT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp(">", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // oclExpression ::= oclExpression LT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("<", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // oclExpression ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              OclExpressionAS RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS condition = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS thenExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS elseExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IfExp
								RESULT = oclFactory.buildIfExp(condition, thenExp, elseExp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // oclExpression ::= oclExpression MINUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("-", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // oclExpression ::= oclExpression PLUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("+", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // oclExpression ::= oclExpression INT_MOD oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("mod", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // oclExpression ::= oclExpression INT_DIVIDE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("div", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // oclExpression ::= oclExpression DIVIDE oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("/", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // oclExpression ::= oclExpression TIMES oclExpression 
            {
              OclExpressionAS RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("*", left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // oclExpression ::= MINUS oclExpression 
            {
              OclExpressionAS RESULT = null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an OperationCallExp
								RESULT = oclFactory.buildOperationCallExp("-", opd, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // oclExpression ::= NOT oclExpression 
            {
              OclExpressionAS RESULT = null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create NotExp
								RESULT = oclFactory.buildLogicalExp(sym.NOT, opd, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = oclFactory.buildIterateExp(exp1, null, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration SEMICOLON variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = oclFactory.buildIterateExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // oclExpression ::= oclExpression LEFT_BRK argumentList RIGHT_BRK isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create AssociationCallExp
								RESULT = oclFactory.buildAssociationCallExp(exp, arguments, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // oclExpression ::= oclExpression LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IteratorCallExp
								RESULT = oclFactory.buildIteratorCallExp(exp1, var1, null, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // oclExpression ::= oclExpression LEFT_PAR oclExpression COLON type EQ oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, type, init, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = oclFactory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // oclExpression ::= oclExpression LEFT_PAR oclExpression EQ oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, null, init, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = oclFactory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // oclExpression ::= oclExpression LEFT_PAR oclExpression COLON type COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, type, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = oclFactory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, null, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								RESULT = oclFactory.buildIteratorCallExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA argumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS arg1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg1);
								args.addAll(list);
								RESULT = oclFactory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // oclExpression ::= oclExpression LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg);
								RESULT = oclFactory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // oclExpression ::= oclExpression LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OperationCallExp
								RESULT = oclFactory.buildOperationCallExp(exp, new Vector());
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // oclExpression ::= oclExpression MINUS_GT simpleName 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create ArrowSelectionExp
								RESULT = oclFactory.buildArrowSelectionExp(exp, simpleName);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // oclExpression ::= oclExpression DOT simpleName isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create DotSelectionExp
								RESULT = oclFactory.buildDotSelectionExp(exp, simpleName, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // oclExpression ::= pathName isMarkedPre 
            {
              OclExpressionAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PathNameExp
								RESULT = oclFactory.buildPathNameExp(path, isMarkedPre);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // oclExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // oclExpression ::= literalExp 
            {
              OclExpressionAS RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		LiteralExpAS exp = (LiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Literal expression without enumLiteralExp
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(46/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tupleType ::= TUPLE_TYPE LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              TupleTypeAS RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleType
								RESULT = oclFactory.buildTupleType(varList);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(45/*tupleType*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // collectionType ::= collectionKind LEFT_PAR type RIGHT_PAR 
            {
              CollectionTypeAS RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS elementType = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionType
								RESULT = oclFactory.buildCollectionType(kind, elementType);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(43/*collectionType*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type ::= tupleType 
            {
              TypeAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TupleTypeAS type = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(42/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= collectionType 
            {
              TypeAS RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		CollectionTypeAS type = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(42/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= pathName 
            {
              TypeAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PathNameType
								RESULT = oclFactory.buildPathNameType(path);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(42/*type*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variableDeclaration ::= simpleName 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = oclFactory.buildVariableDeclaration(name, null, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(41/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variableDeclaration ::= simpleName EQ oclExpression 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = oclFactory.buildVariableDeclaration(name, null, init);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(41/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variableDeclaration ::= simpleName COLON type 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = oclFactory.buildVariableDeclaration(name, type, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(41/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variableDeclaration ::= simpleName COLON type EQ oclExpression 
            {
              VariableDeclarationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a VariableDeclaration
								RESULT = oclFactory.buildVariableDeclaration(name, type, init);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(41/*variableDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variableDeclarationList ::= variableDeclarationList COMMA variableDeclaration 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
			  					// Append 'var' to 'varList' 
			  					RESULT = varList;
			  					RESULT.add(var);
			  				
              CUP$Yyparse$result = new java_cup.runtime.Symbol(40/*variableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variableDeclarationList ::= variableDeclaration 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a List
								RESULT = new Vector();
								RESULT.add(var);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(40/*variableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operation ::= simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(new Vector(), name, new Vector(), null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operation ::= simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(new Vector(), name, new Vector(), type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(new Vector(), name, params, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(new Vector(), name, params, type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(path, name, new Vector(), null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operation
								RESULT = oclFactory.buildOperation(path, name, new Vector(), type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(path, name, params, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create an Operationn
								RESULT = oclFactory.buildOperation(path, name, params, type);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(38/*operation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.BODY, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.BODY, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // prePostOrBodyDecl ::= prePostOrBodyDecl POST COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.POST, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prePostOrBodyDecl ::= prePostOrBodyDecl POST simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.POST, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.PRE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.PRE, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // prePostOrBodyDecl ::= BODY COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.BODY, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prePostOrBodyDecl ::= BODY simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.BODY, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // prePostOrBodyDecl ::= POST COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.POST, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prePostOrBodyDecl ::= POST simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.POST, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prePostOrBodyDecl ::= PRE COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.PRE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prePostOrBodyDecl ::= PRE simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								// Create a constraint
								ConstraintAS cons = oclFactory.buildConstraint(ConstraintKindAS$Class.PRE, name, exp, null);
								// Create a list
								RESULT = new Vector();
								RESULT.add(cons);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(39/*prePostOrBodyDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operationContextDecl ::= CONTEXT operation prePostOrBodyDecl 
            {
              OperationContextDeclAS RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create OperationContextDecl
								RESULT = oclFactory.buildOperationContextDeclaration(oper, list);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(37/*operationContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // defExpression ::= operation EQ oclExpression 
            {
              Object[] RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a container
								RESULT = new Object[] {oper, exp};
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(34/*defExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // defExpression ::= simpleName COLON type EQ oclExpression 
            {
              Object[] RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a container
								VariableDeclarationAS var = new VariableDeclarationAS$Class();
								var.setName(name);
								var.setType(type);
								var.setInitExp(exp);
								RESULT = new Object[] {var, exp};
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(34/*defExpression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // invOrDef ::= invOrDef COLON defExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DEF, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // invOrDef ::= invOrDef DEF simpleName COLON defExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DEF, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // invOrDef ::= invOrDef INV COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INV, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // invOrDef ::= invOrDef INV simpleName COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INV, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // invOrDef ::= DEF COLON defExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DEF, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // invOrDef ::= DEF simpleName COLON defExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DEF, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // invOrDef ::= INV COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INV, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // invOrDef ::= INV simpleName COLON oclExpression 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INV, name, exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(33/*invOrDef*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // classifierContextDecl ::= CONTEXT pathName invOrDef 
            {
              ClassifierContextDeclAS RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a ClassifierContext
								RESULT = oclFactory.buildClassifierContextDeclaration(path, constraints, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(32/*classifierContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // initOrDerValue ::= initOrDerValue DERIVE COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DERIVE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(36/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // initOrDerValue ::= initOrDerValue INIT COLON oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INIT, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(36/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // initOrDerValue ::= DERIVE COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.DERIVE, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(36/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // initOrDerValue ::= INIT COLON oclExpression 
            {
              List RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(oclFactory.buildConstraint(ConstraintKindAS$Class.INIT, "", exp, null));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(36/*initOrDerValue*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // propertyContextDecl ::= CONTEXT pathName simpleName COLON type initOrDerValue 
            {
              PropertyContextDeclAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create PropertyContextDecl
								RESULT = oclFactory.buildPropertyContextDeclaration(path, name, type, constraints);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(35/*propertyContextDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contextDeclaration ::= operationContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OperationContextDeclAS contextDecl = (OperationContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(31/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contextDeclaration ::= classifierContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		ClassifierContextDeclAS contextDecl = (ClassifierContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(31/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contextDeclaration ::= propertyContextDecl 
            {
              ContextDeclarationAS RESULT = null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		PropertyContextDeclAS contextDecl = (PropertyContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(31/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contextDeclList ::= contextDeclList contextDeclaration 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		ContextDeclarationAS contextDecl = (ContextDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add element to list
								RESULT = list;
								RESULT.add(contextDecl);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(30/*contextDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contextDeclList ::= 
            {
              List RESULT = null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(30/*contextDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // packageDeclaration ::= contextDeclList 
            {
              PackageDeclarationAS RESULT = null;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Create a PackageDeclaration
								RESULT = oclFactory.buildPackageDeclaration(new Vector(), contextDecls);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*packageDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // packageDeclaration ::= PACKAGE pathName contextDeclList ENDPACKAGE 
            {
              PackageDeclarationAS RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a PackageDeclaration
								RESULT = oclFactory.buildPackageDeclaration(path, contextDecls);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(29/*packageDeclaration*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // query ::= QUERY simpleName LEFT_BRA contextDeclList RIGHT_BRA 
            {
              Query RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildQuery(name, contextDecls, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(9/*query*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // newExp ::= NEW pathName 
            {
              NewExp RESULT = null;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildNewExp(pathName);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(28/*newExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // trackExp ::= TRACK LEFT_PAR oclExpression COMMA simpleName COMMA NULL RIGHT_PAR 
            {
              TrackExp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		
								RESULT = qtFactory.buildTrackExp(name, exp1, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(27/*trackExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // trackExp ::= TRACK LEFT_PAR NULL COMMA simpleName COMMA oclExpression RIGHT_PAR 
            {
              TrackExp RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildTrackExp(name, null, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(27/*trackExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // trackExp ::= TRACK LEFT_PAR oclExpression COMMA simpleName COMMA oclExpression RIGHT_PAR 
            {
              TrackExp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildTrackExp(name, exp1, exp2);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(27/*trackExp*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= trackExp 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TrackExp exp = (TrackExp)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpression(null, exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*expression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= oclExpression 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpression(left, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*expression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= oclExpression ASSIGN newExp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		NewExp right = (NewExp)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpression(left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*expression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= oclExpression ASSIGN trackExp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		TrackExp right = (TrackExp)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpression(left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*expression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= oclExpression ASSIGN oclExpression 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpression(left, right);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(26/*expression*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressionList ::= expressionList oclExpression 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		OclExpressionAS elem = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = list;
								RESULT.add(elem);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(25/*expressionList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressionList ::= 
            {
              List RESULT = null;
		
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(25/*expressionList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // deleteStm ::= DELETE oclExpression SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildDeleteStm(exp, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(24/*deleteStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // applyStm ::= APPLY simpleName LEFT_PAR expressionList RIGHT_PAR SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								RESULT = qtFactory.buildApplyStm(name, args, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(23/*applyStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // continueStm ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildContinueStm(new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(22/*continueStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // breakStm ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildBreakStm(new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(21/*breakStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loopStm ::= FOREACH variableDeclaration IN oclExpression DO statement 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		VariableDeclarationAS varDecl = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS col = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildForeachStm(varDecl, col, body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(20/*loopStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loopStm ::= DO statement WHILE LEFT_PAR oclExpression RIGHT_PAR SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS cond = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								RESULT = qtFactory.buildDoStm(cond, body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(20/*loopStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // loopStm ::= WHILE oclExpression DO statement 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS cond = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildWhileStm(cond, body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(20/*loopStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStm ::= IFSTM oclExpression THEN statement ENDIF 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS cond = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int thenStmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int thenStmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Statement thenStm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildIfStm(cond, thenStm, null, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(19/*ifStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifStm ::= IFSTM oclExpression THEN statement ELSE statement ENDIF 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS cond = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int thenStmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int thenStmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		Statement thenStm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elseStmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elseStmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Statement elseStm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildIfStm(cond, thenStm, elseStm, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(19/*ifStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // compoundStm ::= LEFT_BRA statementList RIGHT_BRA 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildCompoundStm(list, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(18/*compoundStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressionStm ::= expression SEMICOLON 
            {
              Statement RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildExpressionStm(exp, new Symbol(0, expleft, expright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(17/*expressionStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressionStm ::= SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildExpressionStm(null, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(17/*expressionStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarationStm ::= LET variableDeclarationList SEMICOLON 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildDeclarationStm(list, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(16/*declarationStm*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= deleteStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= applyStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= continueStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= breakStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= loopStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= ifStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= compoundStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= expressionStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= declarationStm 
            {
              Statement RESULT = null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = stm;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(15/*statement*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementList ::= statementList statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = list;
								RESULT.add(stm);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(14/*statementList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= 
            {
              List RESULT = null;
		
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(14/*statementList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // filter ::= MATCH pathName 
            {
              Filter RESULT = null;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildFilter(pathName, null);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*filter*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // filter ::= MATCH pathName LEFT_BRK oclExpression RIGHT_BRK 
            {
              Filter RESULT = null;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildFilter(pathName, exp);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(13/*filter*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rule ::= RULE simpleName LEFT_PAR RIGHT_PAR compoundStm 
            {
              Rule RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int ruleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int ruleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String ruleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildRule(ruleName, null, new Vector(), body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*rule*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rule ::= RULE simpleName LEFT_PAR variableDeclarationList RIGHT_PAR compoundStm 
            {
              Rule RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int ruleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int ruleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String ruleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildRule(ruleName, null, params, body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*rule*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rule ::= RULE simpleName filter LEFT_PAR RIGHT_PAR compoundStm 
            {
              Rule RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int ruleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int ruleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String ruleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int filterleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		Filter filter = (Filter)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildRule(ruleName, filter, new Vector(), body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*rule*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rule ::= RULE simpleName filter LEFT_PAR variableDeclarationList RIGHT_PAR compoundStm 
            {
              Rule RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int ruleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int ruleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String ruleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int filterleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		Filter filter = (Filter)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildRule(ruleName, filter, params, body, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(12/*rule*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ruleList ::= ruleList rule 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Rule rule = (Rule)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = list;
								list.add(rule);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*ruleList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ruleList ::= 
            {
              List RESULT = null;
		
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(11/*ruleList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // transformation ::= TRANSFORMATION simpleName LEFT_BRA ruleList RIGHT_BRA 
            {
              Transformation RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List rules = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildTransformation(name, rules, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(10/*transformation*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // qtList ::= qtList transformation 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Transformation element = (Transformation)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add element
								RESULT = list;
								RESULT.add(element);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*qtList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // qtList ::= qtList query 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Query element = (Query)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add element
								RESULT = list;
								RESULT.add(element);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*qtList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // qtList ::= 
            {
              List RESULT = null;
		
								// Create empty list
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(8/*qtList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // models ::= simpleName COMMA simpleName 
            {
              List RESULT = null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String source = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String target = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = new Vector();
								RESULT.add(source);
								RESULT.add(target);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(4/*models*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // models ::= simpleName 
            {
              List RESULT = null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		String source = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = new Vector();
								RESULT.add(source);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(4/*models*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespaceDecl ::= NAMESPACE simpleName LEFT_PAR models RIGHT_PAR LEFT_BRA qtList RIGHT_BRA 
            {
              Namespace RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int modelsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int modelsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List models = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = qtFactory.buildNamespace(name, models, list, new Symbol(0, locleft, locright));
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(3/*namespaceDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespaceDeclList ::= namespaceDeclList namespaceDecl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Namespace namespace = (Namespace)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add namespace
								RESULT = list;
								RESULT.add(namespace);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(2/*namespaceDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // namespaceDeclList ::= 
            {
              List RESULT = null;
		
								// Create empty list
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(2/*namespaceDeclList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startingRule ::= START pathName SEMICOLON 
            {
              List RESULT = null;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = pathName;
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(7/*startingRule*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importDecl ::= IMPORT simpleName DOT TIMES SEMICOLON 
            {
              Import RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		
								RESULT = qtFactory.buildImport(name);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(6/*importDecl*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importList ::= importList importDecl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int import_left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int import_right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		Import import_ = (Import)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								// Add element
								RESULT = list;
								RESULT.add(import_);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*importList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importList ::= 
            {
              List RESULT = null;
		
								// Create empty list
								RESULT = new Vector();
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(5/*importList*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unit ::= importList startingRule namespaceDeclList 
            {
              Unit RESULT = null;
		int importsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List imports = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).value;
		
								RESULT = qtFactory.buildUnit(imports, pathName, list);
							
              CUP$Yyparse$result = new java_cup.runtime.Symbol(1/*unit*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		Unit start_val = (Unit)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		RESULT = start_val;
              CUP$Yyparse$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Yyparse$parser.done_parsing();
          return CUP$Yyparse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

