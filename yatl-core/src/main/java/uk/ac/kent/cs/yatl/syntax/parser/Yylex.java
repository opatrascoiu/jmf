/* The following code was generated by JFlex 1.3.5 on 25/11/03 15:52 */

/**
 * 
 * @author Octavian Patrascoiu
 *
 */

// Usercode Section
package uk.ac.kent.cs.yatl.syntax.parser;

import java_cup.runtime.*;
import uk.ac.kent.cs.kmf.util.*;
	  

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 25/11/03 15:52 from the specification file
 * <tt>file:/C:/D/Work/Java Projects/KTL/src/uk/ac/kent/cs/ktl/syntax/parser/ktl.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\15"+
    "\1\22\1\25\1\5\1\14\1\30\1\6\1\11\1\4\12\10\1\17"+
    "\1\31\1\50\1\21\1\51\1\34\1\33\1\7\1\55\1\62\1\7"+
    "\1\13\11\7\1\63\3\7\1\53\1\64\6\7\1\23\1\16\1\26"+
    "\1\20\1\7\1\0\1\42\1\71\1\61\1\44\1\12\1\66\1\56"+
    "\1\67\1\35\1\7\1\70\1\40\1\36\1\43\1\45\1\37\1\57"+
    "\1\46\1\41\1\54\1\60\1\52\1\72\1\47\1\65\1\7\1\24"+
    "\1\32\1\27\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    59,    59,   118,    59,   177,   236,   295,   354,   413, 
       59,   472,   531,   590,    59,    59,    59,    59,    59,    59, 
       59,    59,    59,    59,    59,    59,   649,   708,   767,   826, 
      885,   944,  1003,  1062,  1121,  1180,  1239,  1298,  1357,  1416, 
     1475,  1534,  1593,  1652,  1711,  1770,  1829,  1888,  1947,  2006, 
     2065,  2124,    59,  2183,  2242,    59,  2301,  2360,   472,    59, 
     2419,    59,    59,    59,  2478,  2537,  2596,  2655,  2714,  2773, 
     2832,  2891,  2950,  3009,  3068,  3127,  3186,  3245,  3304,  3363, 
     3422,  3481,  3540,   236,   236,  3599,  3658,    59,    59,    59, 
     3717,  3776,  3835,  3894,  3953,  4012,  4071,  4130,  4189,  4248, 
     4307,  4366,  4425,  4484,  4543,  4602,  4661,  4720,  4779,  4779, 
     4838,  4897,   472,  4956,  5015,   236,  5074,   236,  5133,   236, 
     5192,  5251,   236,   236,  5310,  5369,   236,   236,  5428,   236, 
     5487,  5546,  5605,   236,   236,  5664,   236,   236,  5723,  5782, 
     5841,  5900,   236,  5959,  6018,  6077,  6136,  6195,  6254,  6313, 
     6372,  6431,  6490,   236,  6549,  6608,  6667,  6726,   236,  6785, 
     6844,  6903,   236,  6962,  7021,  7080,   236,  7139,  7198,   236, 
     7257,  7316,  7375,   236,   236,  7434,  7493,  7552,  7611,  7670, 
     7729,  7788,   236,  7847,  7906,   236,  7965,  8024,  8083,  8142, 
      236,  8201,   236,   236,  8260,  8319,  8378,  8437,  8496,   236, 
      236,  8555,  8614,  8673,  8732,  8791,   236,  8850,   236,   236, 
     8909,  8968,   236,  9027,  9086,  9145,   236,   236,  9204,  9263, 
     9322,  9381,  9440,  9499,  9558,  9617,  9676,   236,   236,   236, 
     9735,  9794,  9853,   236,  9912,  9971, 10030, 10089,   236, 10148, 
    10207,   236, 10266,   236, 10325, 10384, 10443, 10502,   236, 10561, 
    10620, 10679,   236,   236, 10738,   236,   236, 10797, 10856, 10915, 
      236
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\7\1\50\1\51\1\52\1\7\1\53\1\7\1\54"+
    "\1\55\1\56\1\57\1\7\1\60\2\7\1\61\1\62"+
    "\100\0\1\63\73\0\1\64\42\0\1\65\30\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\21\7\10\0\1\10"+
    "\1\66\2\67\70\0\1\70\70\0\2\7\1\0\2\7"+
    "\21\0\3\7\1\71\2\7\1\72\4\7\2\0\21\7"+
    "\15\73\1\74\1\75\54\73\17\0\1\76\1\0\1\77"+
    "\71\0\1\100\61\0\2\7\1\0\2\7\21\0\1\7"+
    "\1\101\4\7\1\102\4\7\2\0\2\7\1\103\11\7"+
    "\1\104\4\7\7\0\2\7\1\0\2\7\21\0\5\7"+
    "\1\105\2\7\1\106\2\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\5\7\1\107\2\7\1\110\1\111"+
    "\1\7\2\0\21\7\7\0\2\7\1\0\1\112\1\7"+
    "\21\0\13\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\13\7\2\0\2\7\1\113\16\7\7\0\2\7"+
    "\1\0\2\7\21\0\2\7\1\114\3\7\1\115\4\7"+
    "\2\0\21\7\7\0\2\7\1\0\1\116\1\7\21\0"+
    "\5\7\1\117\2\7\1\120\2\7\2\0\6\7\1\121"+
    "\12\7\7\0\2\7\1\0\1\122\1\7\21\0\1\123"+
    "\7\7\1\124\2\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\11\7\1\125\1\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\6\7\1\126"+
    "\12\7\7\0\2\7\1\0\2\7\21\0\10\7\1\127"+
    "\2\7\2\0\21\7\21\0\1\130\27\0\1\131\42\0"+
    "\1\132\60\0\2\7\1\0\1\133\1\7\21\0\13\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\11\7"+
    "\1\134\1\7\2\0\15\7\1\135\3\7\7\0\2\7"+
    "\1\0\2\7\21\0\5\7\1\136\5\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\13\7\2\0\6\7"+
    "\1\137\12\7\7\0\2\7\1\0\2\7\21\0\10\7"+
    "\1\140\2\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\10\7\1\141\2\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\11\7\1\142\1\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\13\7\2\0\6\7"+
    "\1\143\12\7\7\0\2\7\1\0\2\7\21\0\5\7"+
    "\1\144\2\7\1\145\2\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\10\7\1\146\1\147\1\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\15\7\1\150\3\7\5\63\1\151\65\63\1\64\1\152"+
    "\1\153\70\64\10\0\1\154\70\0\1\155\1\0\1\156"+
    "\3\0\1\155\65\0\2\7\1\0\2\7\21\0\4\7"+
    "\1\157\6\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\7\7\1\160\3\7\2\0\21\7\15\73\1\161"+
    "\1\75\54\73\7\0\2\7\1\0\2\7\21\0\2\7"+
    "\1\162\10\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\1\163\12\7\2\0\1\164\20\7\7\0\2\7"+
    "\1\0\1\165\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\14\7\1\166"+
    "\4\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\2\7\1\167\16\7\7\0\2\7\1\0\2\7\21\0"+
    "\7\7\1\170\3\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\7\7\1\171\11\7\7\0"+
    "\2\7\1\0\2\7\21\0\4\7\1\172\6\7\2\0"+
    "\21\7\7\0\2\7\1\0\1\173\1\7\21\0\13\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\2\7\1\174\16\7\7\0\2\7\1\0\2\7"+
    "\21\0\5\7\1\175\5\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\2\7\1\176\10\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\7\7\1\177\3\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\20\7\1\200\7\0\2\7\1\0\2\7\21\0"+
    "\1\7\1\201\11\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\2\7\1\202\16\7\7\0"+
    "\2\7\1\0\2\7\21\0\3\7\1\203\7\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\3\7\1\204"+
    "\5\7\1\205\1\7\2\0\14\7\1\206\4\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\1\207\20\7"+
    "\7\0\2\7\1\0\2\7\21\0\3\7\1\210\7\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\11\7"+
    "\1\211\1\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\13\7\2\0\2\7\1\212\2\7\1\213\13\7"+
    "\7\0\2\7\1\0\2\7\21\0\5\7\1\214\5\7"+
    "\2\0\6\7\1\215\12\7\7\0\2\7\1\0\1\216"+
    "\1\7\21\0\13\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\4\7\1\217\14\7\7\0"+
    "\2\7\1\0\1\220\1\7\21\0\13\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\6\7\1\221\4\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\3\7"+
    "\1\222\7\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\7\7\1\223\3\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\2\7\1\224\10\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\3\7\1\225\7\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\11\7"+
    "\1\226\1\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\7\7\1\227\3\7\2\0\21\7\7\0\2\7"+
    "\1\0\1\230\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\1\231\12\7\2\0\21\7"+
    "\4\63\1\3\1\151\65\63\2\0\1\3\71\0\1\3"+
    "\101\0\1\154\1\0\2\67\67\0\1\156\71\0\2\7"+
    "\1\0\1\232\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\1\233\1\7\1\234\10\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\3\7"+
    "\1\235\4\7\1\236\2\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\2\7\1\237\16\7"+
    "\7\0\2\7\1\0\2\7\21\0\11\7\1\240\1\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\7\7\1\241\11\7\7\0\2\7\1\0\2\7"+
    "\21\0\13\7\2\0\16\7\1\242\2\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\2\7\1\243\16\7"+
    "\7\0\2\7\1\0\2\7\21\0\11\7\1\244\1\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\3\7"+
    "\1\245\7\7\2\0\21\7\7\0\2\7\1\0\1\246"+
    "\1\7\21\0\13\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\3\7\1\247\7\7\2\0\21\7\7\0"+
    "\2\7\1\0\1\250\1\7\21\0\13\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\1\251\12\7\2\0"+
    "\21\7\7\0\2\7\1\0\1\252\1\7\21\0\13\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\6\7\1\253\12\7\7\0\2\7\1\0\2\7"+
    "\21\0\6\7\1\254\4\7\2\0\7\7\1\255\11\7"+
    "\7\0\2\7\1\0\1\256\1\7\21\0\13\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\6\7\1\257"+
    "\4\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\11\7\1\260\1\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\2\7\1\261\16\7\7\0"+
    "\2\7\1\0\2\7\21\0\3\7\1\262\7\7\2\0"+
    "\21\7\7\0\2\7\1\0\1\263\1\7\21\0\13\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\3\7"+
    "\1\264\7\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\4\7\1\265\6\7\2\0\21\7\7\0\2\7"+
    "\1\0\1\266\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\13\7\1\267"+
    "\5\7\7\0\2\7\1\0\2\7\21\0\5\7\1\270"+
    "\5\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\3\7\1\271\7\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\14\7\1\272\4\7\7\0"+
    "\2\7\1\0\2\7\21\0\5\7\1\273\5\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\1\274\12\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\11\7"+
    "\1\275\1\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\5\7\1\276\5\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\15\7\1\277\3\7"+
    "\7\0\2\7\1\0\2\7\21\0\5\7\1\300\5\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\2\7\1\301\16\7\7\0\2\7\1\0\2\7"+
    "\21\0\13\7\2\0\13\7\1\302\5\7\7\0\2\7"+
    "\1\0\2\7\21\0\4\7\1\303\6\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\13\7\2\0\2\7"+
    "\1\304\16\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\1\305\20\7\7\0\2\7\1\0\1\306\1\7"+
    "\21\0\13\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\4\7\1\307\6\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\16\7\1\310\2\7"+
    "\7\0\2\7\1\0\2\7\21\0\13\7\2\0\13\7"+
    "\1\311\5\7\7\0\2\7\1\0\1\312\1\7\21\0"+
    "\1\313\12\7\2\0\21\7\7\0\2\7\1\0\1\314"+
    "\1\7\21\0\13\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\11\7\1\315\1\7\2\0\21\7\7\0"+
    "\2\7\1\0\1\316\1\7\21\0\13\7\2\0\21\7"+
    "\7\0\2\7\1\0\1\317\1\7\21\0\13\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\5\7\1\320"+
    "\5\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\13\7\2\0\16\7\1\321\2\7\7\0\2\7\1\0"+
    "\1\322\1\7\21\0\13\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\7\7\1\323\11\7"+
    "\7\0\2\7\1\0\1\324\1\7\21\0\13\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\2\7\1\325\16\7\7\0\2\7\1\0\2\7\21\0"+
    "\13\7\2\0\2\7\1\326\16\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\4\7\1\327\14\7\7\0"+
    "\2\7\1\0\2\7\21\0\2\7\1\330\10\7\2\0"+
    "\21\7\7\0\2\7\1\0\1\331\1\7\21\0\13\7"+
    "\2\0\21\7\7\0\2\7\1\0\1\332\1\7\21\0"+
    "\13\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\6\7\1\333\4\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\14\7\1\334\4\7\7\0"+
    "\2\7\1\0\2\7\21\0\12\7\1\335\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\6\7\1\336\4\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\7\7\1\337\11\7\7\0\2\7\1\0\1\340"+
    "\1\7\21\0\13\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\12\7\1\341\6\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\7\7\1\342"+
    "\11\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\16\7\1\343\2\7\7\0\2\7\1\0\2\7\21\0"+
    "\4\7\1\344\6\7\2\0\21\7\7\0\2\7\1\0"+
    "\1\345\1\7\21\0\13\7\2\0\21\7\7\0\2\7"+
    "\1\0\1\346\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\2\7\21\0\5\7\1\347\5\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\7\7\1\350\11\7\7\0\2\7\1\0\2\7\21\0"+
    "\10\7\1\351\2\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\2\7\1\352\16\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\6\7\1\353"+
    "\12\7\7\0\2\7\1\0\2\7\21\0\13\7\2\0"+
    "\2\7\1\354\16\7\7\0\2\7\1\0\2\7\21\0"+
    "\7\7\1\355\3\7\2\0\21\7\7\0\2\7\1\0"+
    "\2\7\21\0\13\7\2\0\13\7\1\356\5\7\7\0"+
    "\2\7\1\0\2\7\21\0\13\7\2\0\15\7\1\357"+
    "\3\7\7\0\2\7\1\0\2\7\21\0\5\7\1\360"+
    "\5\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\13\7\2\0\7\7\1\361\11\7\7\0\2\7\1\0"+
    "\1\362\1\7\21\0\13\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\11\7\1\363\1\7\2\0\21\7"+
    "\7\0\2\7\1\0\1\364\1\7\21\0\13\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\1\365\12\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\13\7"+
    "\2\0\1\7\1\366\17\7\7\0\2\7\1\0\2\7"+
    "\21\0\2\7\1\367\10\7\2\0\21\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\4\7\1\370\14\7"+
    "\7\0\2\7\1\0\1\371\1\7\21\0\13\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\1\7\1\372"+
    "\11\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\10\7\1\373\2\7\2\0\21\7\7\0\2\7\1\0"+
    "\1\374\1\7\21\0\13\7\2\0\21\7\7\0\2\7"+
    "\1\0\1\375\1\7\21\0\13\7\2\0\21\7\7\0"+
    "\2\7\1\0\1\376\1\7\21\0\13\7\2\0\21\7"+
    "\7\0\2\7\1\0\2\7\21\0\5\7\1\377\5\7"+
    "\2\0\21\7\7\0\2\7\1\0\2\7\21\0\6\7"+
    "\1\u0100\4\7\2\0\21\7\7\0\2\7\1\0\2\7"+
    "\21\0\13\7\2\0\2\7\1\u0101\16\7\7\0\2\7"+
    "\1\0\2\7\21\0\13\7\2\0\2\7\1\u0102\16\7"+
    "\7\0\2\7\1\0\2\7\21\0\1\u0103\12\7\2\0"+
    "\21\7\7\0\2\7\1\0\2\7\21\0\10\7\1\u0104"+
    "\2\7\2\0\21\7\7\0\2\7\1\0\2\7\21\0"+
    "\6\7\1\u0105\4\7\2\0\21\7";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  9,  0,  0,  9,  1,  1,  0,  9,  0,  9,  9,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	// Debug flag
	protected static boolean lexDebug = false;
	protected void debug(int type) {
		if (lexDebug) {
			log.reportMessage(yyline+":"+yycolumn+" Token "+type+" '"+yytext()+"'");		
		}
	}

	// Output log
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	
	// Create a new java_cup.runtime.Symbol with information about the current token
	protected Symbol symbol(int type) {
		debug(type);
		return new Symbol(type, yyline, yycolumn, new String(yytext()));
	}
	protected Symbol symbol(int type, Object value) {
		debug(type);
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	// Replace escape sequences
	protected String replaceEscapeSequences(String str) {
		String result = "";
		for(int i=0; i<str.length(); i++) {
			// Escape sequence
			char ch = str.charAt(i); 
			if (ch == '\\') {
				if (i+1 < str.length()) {
					char ch1 = str.charAt(i+1); 
					if (ch1 == '\'') result += "'";
					else if (ch1 == 't') result += '\t';
					else if (ch1 == 'r') result += '\r';
					else if (ch1 == 'n') result += '\n';					
				}
			} else {
				result += ch; 
			}
		}
		return result;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[10974];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 256: 
          {  return symbol(sym.ORDERED_SET);  }
        case 262: break;
        case 255: 
          {  return symbol(sym.COLLECTION);  }
        case 263: break;
        case 253: 
          {  return symbol(sym.ENDPACKAGE);  }
        case 264: break;
        case 252: 
          {  return symbol(sym.TUPLE_TYPE);  }
        case 265: break;
        case 61: 
          {  return symbol(sym.COLON_COLON);  }
        case 266: break;
        case 6: 
        case 9: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 56: 
        case 57: 
        case 64: 
        case 66: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 85: 
        case 86: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 116: 
        case 118: 
        case 120: 
        case 121: 
        case 124: 
        case 125: 
        case 128: 
        case 130: 
        case 131: 
        case 132: 
        case 135: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 159: 
        case 160: 
        case 161: 
        case 163: 
        case 164: 
        case 165: 
        case 167: 
        case 168: 
        case 170: 
        case 171: 
        case 172: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 191: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 207: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 215: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 230: 
        case 231: 
        case 232: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 239: 
        case 240: 
        case 242: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 249: 
        case 250: 
        case 251: 
        case 254: 
        case 257: 
        case 258: 
        case 259: 
          {  return symbol(sym.SIMPLE_NAME);  }
        case 267: break;
        case 134: 
          {  return symbol(sym.INT_DIVIDE);  }
        case 268: break;
        case 248: 
          {  return symbol(sym.NAMESPACE);  }
        case 269: break;
        case 243: 
          {  return symbol(sym.CONTINUE);  }
        case 270: break;
        case 241: 
          {  return symbol(sym.SEQUENCE);  }
        case 271: break;
        case 52: 
          {  return symbol(sym.MINUS_GT);  }
        case 272: break;
        case 25: 
          {  return symbol(sym.QUESTION);  }
        case 273: break;
        case 22: 
          {  return symbol(sym.SEMICOLON);  }
        case 274: break;
        case 20: 
          {  return symbol(sym.RIGHT_BRA);  }
        case 275: break;
        case 15: 
          {  return symbol(sym.LEFT_PAR);  }
        case 276: break;
        case 16: 
          {  return symbol(sym.LEFT_BRK);  }
        case 277: break;
        case 17: 
          {  return symbol(sym.LEFT_BRA);  }
        case 278: break;
        case 18: 
          {  return symbol(sym.RIGHT_PAR);  }
        case 279: break;
        case 19: 
          {  return symbol(sym.RIGHT_BRK);  }
        case 280: break;
        case 84: 
          {  return symbol(sym.OR);  }
        case 281: break;
        case 83: 
          {  return symbol(sym.DO);  }
        case 282: break;
        case 67: 
          {  return symbol(sym.IF);  }
        case 283: break;
        case 65: 
          {  return symbol(sym.IN);  }
        case 284: break;
        case 38: 
          {  return symbol(sym.GT);  }
        case 285: break;
        case 37: 
          {  return symbol(sym.LT);  }
        case 286: break;
        case 24: 
          {  return symbol(sym.AT);  }
        case 287: break;
        case 23: 
          {  return symbol(sym.BAR);  }
        case 288: break;
        case 8: 
          {  return symbol(sym.DOT);  }
        case 289: break;
        case 13: 
          {  return symbol(sym.UP);  }
        case 290: break;
        case 14: 
          {  return symbol(sym.EQ);  }
        case 291: break;
        case 87: 
          {  return symbol(sym.LE);  }
        case 292: break;
        case 88: 
          {  return symbol(sym.NE);  }
        case 293: break;
        case 89: 
          {  return symbol(sym.GE);  }
        case 294: break;
        case 115: 
          {  return symbol(sym.INV);  }
        case 295: break;
        case 122: 
          {  return symbol(sym.PRE);  }
        case 296: break;
        case 123: 
          {  return symbol(sym.LET);  }
        case 297: break;
        case 126: 
          {  return symbol(sym.AND);  }
        case 298: break;
        case 127: 
          {  return symbol(sym.NEW);  }
        case 299: break;
        case 129: 
          {  return symbol(sym.NOT);  }
        case 300: break;
        case 133: 
          {  return symbol(sym.DEF);  }
        case 301: break;
        case 136: 
          {  return symbol(sym.XOR);  }
        case 302: break;
        case 137: 
          {  return symbol(sym.SET);  }
        case 303: break;
        case 142: 
          {  return symbol(sym.BAG);  }
        case 304: break;
        case 63: 
          {  return symbol(sym.UP_UP);  }
        case 305: break;
        case 21: 
          {  return symbol(sym.COMMA);  }
        case 306: break;
        case 5: 
          {  return symbol(sym.MINUS);  }
        case 307: break;
        case 4: 
          {  return symbol(sym.TIMES);  }
        case 308: break;
        case 10: 
          {  return symbol(sym.PLUS);  }
        case 309: break;
        case 12: 
          {  return symbol(sym.COLON);  }
        case 310: break;
        case 107: 
        case 109: 
          {  return symbol(sym.REAL);  }
        case 311: break;
        case 117: 
          {  return symbol(sym.IFSTM);  }
        case 312: break;
        case 153: 
          {  return symbol(sym.ELSE);  }
        case 313: break;
        case 158: 
          {  return symbol(sym.INIT);  }
        case 314: break;
        case 162: 
          {  return symbol(sym.POST);  }
        case 315: break;
        case 166: 
          {  return symbol(sym.NULL);  }
        case 316: break;
        case 169: 
          {  return symbol(sym.RULE);  }
        case 317: break;
        case 173: 
          {  return symbol(sym.TRUE);  }
        case 318: break;
        case 174: 
          {  return symbol(sym.THEN);  }
        case 319: break;
        case 182: 
          {  return symbol(sym.BODY);  }
        case 320: break;
        case 185: 
          {  return symbol(sym.ENDIF);  }
        case 321: break;
        case 190: 
          {  return symbol(sym.MATCH);  }
        case 322: break;
        case 192: 
          {  return symbol(sym.START);  }
        case 323: break;
        case 193: 
          {  return symbol(sym.APPLY);  }
        case 324: break;
        case 199: 
          {  return symbol(sym.TRACK);  }
        case 325: break;
        case 200: 
          {  return symbol(sym.QUERY);  }
        case 326: break;
        case 205: 
          {  return symbol(sym.TUPLE);  }
        case 327: break;
        case 206: 
          {  return symbol(sym.FALSE);  }
        case 328: break;
        case 208: 
          {  return symbol(sym.BREAK);  }
        case 329: break;
        case 209: 
          {  return symbol(sym.WHILE);  }
        case 330: break;
        case 59: 
        case 112: 
          {  return symbol(sym.STRING, replaceEscapeSequences(yytext()));  }
        case 331: break;
        case 260: 
          {  return symbol(sym.TRANSFORMATION);  }
        case 332: break;
        case 1: 
        case 11: 
          {  log.reportError("Illegal character '"+yytext()+"'"); return symbol(sym.BAD); }
        case 333: break;
        case 238: 
          {  return symbol(sym.FOREACH);  }
        case 334: break;
        case 233: 
          {  return symbol(sym.CONTEXT);  }
        case 335: break;
        case 229: 
          {  return symbol(sym.PACKAGE);  }
        case 336: break;
        case 228: 
          {  return symbol(sym.ITERATE);  }
        case 337: break;
        case 227: 
          {  return symbol(sym.IMPLIES);  }
        case 338: break;
        case 217: 
          {  return symbol(sym.DERIVE);  }
        case 339: break;
        case 216: 
          {  return symbol(sym.DELETE);  }
        case 340: break;
        case 212: 
          {  return symbol(sym.IMPORT);  }
        case 341: break;
        case 62: 
          {  return symbol(sym.ASSIGN);  }
        case 342: break;
        case 55: 
          {  return symbol(sym.DOT_DOT);  }
        case 343: break;
        case 7: 
          {  return symbol(sym.INTEGER);  }
        case 344: break;
        case 3: 
          {  return symbol(sym.DIVIDE);  }
        case 345: break;
        case 119: 
          {  return symbol(sym.INT_MOD);  }
        case 346: break;
        case 2: 
          {  /* just skip what was found, do nothing */  }
        case 347: break;
        case 105: 
        case 106: 
          {  /* just skip what was found, do nothing */  }
        case 348: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { 	return symbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
