/**
 *
 *  Class WsJTreeVisitor$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 13:29:40
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ws.repository;

import java.util.*;
import java.lang.reflect.*;
import javax.swing.tree.*;

import uk.ac.kent.cs.kmf.util.*;

public class WsJTreeVisitor$Class
	implements WsJTreeVisitor
{
	/** Visit factory for 'WsFactory' */
	public Object visit(ws.WsFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		return root;
	}
	/** Visit factory for 'ws.bpel.BusinessProcess' */
	public Object visit(ws.bpel.BusinessProcessFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.BusinessProcess' */
	public Object visit(ws.bpel.BusinessProcess host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BusinessProcess ---
		//--- Property targetNamespace ---
		DefaultMutableTreeNode targetNamespaceNode = getNode(this, "targetNamespace", host.getTargetNamespace(), data);
		root.add(targetNamespaceNode);
		//--- Property queryLanguage ---
		DefaultMutableTreeNode queryLanguageNode = getNode(this, "queryLanguage", host.getQueryLanguage(), data);
		root.add(queryLanguageNode);
		//--- Property expressionLanguage ---
		DefaultMutableTreeNode expressionLanguageNode = getNode(this, "expressionLanguage", host.getExpressionLanguage(), data);
		root.add(expressionLanguageNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association partner ---
		DefaultMutableTreeNode partnerNode = getNode(this, "partner", host.getPartner(), data);
		root.add(partnerNode);
		//--- Properties for Scope ---
		//--- Property variableAccessSerializable ---
		DefaultMutableTreeNode variableAccessSerializableNode = getNode(this, "variableAccessSerializable", host.getVariableAccessSerializable(), data);
		root.add(variableAccessSerializableNode);
		//--- Association scopeFaultHandler ---
		DefaultMutableTreeNode scopeFaultHandlerNode = getNode(this, "scopeFaultHandler", host.getScopeFaultHandler(), data);
		root.add(scopeFaultHandlerNode);
		//--- Association scopeActivity ---
		DefaultMutableTreeNode scopeActivityNode = getNode(this, "scopeActivity", host.getScopeActivity(), data);
		root.add(scopeActivityNode);
		//--- Association compensationActivity ---
		DefaultMutableTreeNode compensationActivityNode = getNode(this, "compensationActivity", host.getCompensationActivity(), data);
		root.add(compensationActivityNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association correlationSet ---
		DefaultMutableTreeNode correlationSetNode = getNode(this, "correlationSet", host.getCorrelationSet(), data);
		root.add(correlationSetNode);
		//--- Association scopeEventHandler ---
		DefaultMutableTreeNode scopeEventHandlerNode = getNode(this, "scopeEventHandler", host.getScopeEventHandler(), data);
		root.add(scopeEventHandlerNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Partner' */
	public Object visit(ws.bpel.PartnerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Partner' */
	public Object visit(ws.bpel.Partner host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Partner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property serviceLinkType ---
		DefaultMutableTreeNode serviceLinkTypeNode = getNode(this, "serviceLinkType", host.getServiceLinkType(), data);
		root.add(serviceLinkTypeNode);
		//--- Property myRole ---
		DefaultMutableTreeNode myRoleNode = getNode(this, "myRole", host.getMyRole(), data);
		root.add(myRoleNode);
		//--- Property partnerRole ---
		DefaultMutableTreeNode partnerRoleNode = getNode(this, "partnerRole", host.getPartnerRole(), data);
		root.add(partnerRoleNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association businessProcess ---
		DefaultMutableTreeNode businessProcessNode = getNode(this, "businessProcess", host.getBusinessProcess(), data);
		root.add(businessProcessNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Variable' */
	public Object visit(ws.bpel.VariableFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Variable' */
	public Object visit(ws.bpel.Variable host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Variable ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variableSpec ---
		DefaultMutableTreeNode variableSpecNode = getNode(this, "variableSpec", host.getVariableSpec(), data);
		root.add(variableSpecNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association element ---
		DefaultMutableTreeNode elementNode = getNode(this, "element", host.getElement(), data);
		root.add(elementNode);
		//--- Association inputInvoke ---
		DefaultMutableTreeNode inputInvokeNode = getNode(this, "inputInvoke", host.getInputInvoke(), data);
		root.add(inputInvokeNode);
		//--- Association outputInvoke ---
		DefaultMutableTreeNode outputInvokeNode = getNode(this, "outputInvoke", host.getOutputInvoke(), data);
		root.add(outputInvokeNode);
		//--- Association reply ---
		DefaultMutableTreeNode replyNode = getNode(this, "reply", host.getReply(), data);
		root.add(replyNode);
		//--- Association receive ---
		DefaultMutableTreeNode receiveNode = getNode(this, "receive", host.getReceive(), data);
		root.add(receiveNode);
		//--- Association throw_ ---
		DefaultMutableTreeNode throw_Node = getNode(this, "throw_", host.getThrow_(), data);
		root.add(throw_Node);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		//--- Association onMessage ---
		DefaultMutableTreeNode onMessageNode = getNode(this, "onMessage", host.getOnMessage(), data);
		root.add(onMessageNode);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association messageType ---
		DefaultMutableTreeNode messageTypeNode = getNode(this, "messageType", host.getMessageType(), data);
		root.add(messageTypeNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.CorrelationSet' */
	public Object visit(ws.bpel.CorrelationSetFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.CorrelationSet' */
	public Object visit(ws.bpel.CorrelationSet host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CorrelationSet ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association correlation ---
		DefaultMutableTreeNode correlationNode = getNode(this, "correlation", host.getCorrelation(), data);
		root.add(correlationNode);
		//--- Association property ---
		DefaultMutableTreeNode propertyNode = getNode(this, "property", host.getProperty(), data);
		root.add(propertyNode);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.FaultHandler' */
	public Object visit(ws.bpel.FaultHandlerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.FaultHandler' */
	public Object visit(ws.bpel.FaultHandler host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FaultHandler ---
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		//--- Association catchAll ---
		DefaultMutableTreeNode catchAllNode = getNode(this, "catchAll", host.getCatchAll(), data);
		root.add(catchAllNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		return root;
	}
	/** Visit class for 'ws.bpel.Activity' */
	public Object visit(ws.bpel.Activity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.EventHandler' */
	public Object visit(ws.bpel.EventHandlerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.EventHandler' */
	public Object visit(ws.bpel.EventHandler host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EventHandler ---
		//--- Association onAlarm ---
		DefaultMutableTreeNode onAlarmNode = getNode(this, "onAlarm", host.getOnAlarm(), data);
		root.add(onAlarmNode);
		//--- Association onMessage ---
		DefaultMutableTreeNode onMessageNode = getNode(this, "onMessage", host.getOnMessage(), data);
		root.add(onMessageNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Catch' */
	public Object visit(ws.bpel.CatchFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Catch' */
	public Object visit(ws.bpel.Catch host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Catch ---
		//--- Property faultName ---
		DefaultMutableTreeNode faultNameNode = getNode(this, "faultName", host.getFaultName(), data);
		root.add(faultNameNode);
		//--- Association faultVariable ---
		DefaultMutableTreeNode faultVariableNode = getNode(this, "faultVariable", host.getFaultVariable(), data);
		root.add(faultVariableNode);
		//--- Association faultHandler ---
		DefaultMutableTreeNode faultHandlerNode = getNode(this, "faultHandler", host.getFaultHandler(), data);
		root.add(faultHandlerNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.OnMessage' */
	public Object visit(ws.bpel.OnMessageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.OnMessage' */
	public Object visit(ws.bpel.OnMessage host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OnMessage ---
		//--- Association pick ---
		DefaultMutableTreeNode pickNode = getNode(this, "pick", host.getPick(), data);
		root.add(pickNode);
		//--- Association eventHandler ---
		DefaultMutableTreeNode eventHandlerNode = getNode(this, "eventHandler", host.getEventHandler(), data);
		root.add(eventHandlerNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for PartnerActivity ---
		//--- Association correlations ---
		DefaultMutableTreeNode correlationsNode = getNode(this, "correlations", host.getCorrelations(), data);
		root.add(correlationsNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.OnAlarm' */
	public Object visit(ws.bpel.OnAlarmFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.OnAlarm' */
	public Object visit(ws.bpel.OnAlarm host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OnAlarm ---
		//--- Property durationKind ---
		DefaultMutableTreeNode durationKindNode = getNode(this, "durationKind", host.getDurationKind(), data);
		root.add(durationKindNode);
		//--- Association pick ---
		DefaultMutableTreeNode pickNode = getNode(this, "pick", host.getPick(), data);
		root.add(pickNode);
		//--- Association booleanExpression ---
		DefaultMutableTreeNode booleanExpressionNode = getNode(this, "booleanExpression", host.getBooleanExpression(), data);
		root.add(booleanExpressionNode);
		//--- Association eventHandler ---
		DefaultMutableTreeNode eventHandlerNode = getNode(this, "eventHandler", host.getEventHandler(), data);
		root.add(eventHandlerNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Association son ---
		DefaultMutableTreeNode sonNode = getNode(this, "son", host.getSon(), data);
		root.add(sonNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Receive' */
	public Object visit(ws.bpel.ReceiveFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Receive' */
	public Object visit(ws.bpel.Receive host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Receive ---
		//--- Property createInstance ---
		DefaultMutableTreeNode createInstanceNode = getNode(this, "createInstance", host.getCreateInstance(), data);
		root.add(createInstanceNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Properties for PartnerActivity ---
		//--- Association correlations ---
		DefaultMutableTreeNode correlationsNode = getNode(this, "correlations", host.getCorrelations(), data);
		root.add(correlationsNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Reply' */
	public Object visit(ws.bpel.ReplyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Reply' */
	public Object visit(ws.bpel.Reply host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Reply ---
		//--- Property faultName ---
		DefaultMutableTreeNode faultNameNode = getNode(this, "faultName", host.getFaultName(), data);
		root.add(faultNameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Properties for PartnerActivity ---
		//--- Association correlations ---
		DefaultMutableTreeNode correlationsNode = getNode(this, "correlations", host.getCorrelations(), data);
		root.add(correlationsNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Invoke' */
	public Object visit(ws.bpel.InvokeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Invoke' */
	public Object visit(ws.bpel.Invoke host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Invoke ---
		//--- Association inputVariable ---
		DefaultMutableTreeNode inputVariableNode = getNode(this, "inputVariable", host.getInputVariable(), data);
		root.add(inputVariableNode);
		//--- Association outputVariable ---
		DefaultMutableTreeNode outputVariableNode = getNode(this, "outputVariable", host.getOutputVariable(), data);
		root.add(outputVariableNode);
		//--- Association invokeFaultHandler ---
		DefaultMutableTreeNode invokeFaultHandlerNode = getNode(this, "invokeFaultHandler", host.getInvokeFaultHandler(), data);
		root.add(invokeFaultHandlerNode);
		//--- Association compensationHandler ---
		DefaultMutableTreeNode compensationHandlerNode = getNode(this, "compensationHandler", host.getCompensationHandler(), data);
		root.add(compensationHandlerNode);
		//--- Properties for PartnerActivity ---
		//--- Association correlations ---
		DefaultMutableTreeNode correlationsNode = getNode(this, "correlations", host.getCorrelations(), data);
		root.add(correlationsNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Assign' */
	public Object visit(ws.bpel.AssignFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Assign' */
	public Object visit(ws.bpel.Assign host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Assign ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Throw' */
	public Object visit(ws.bpel.ThrowFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Throw' */
	public Object visit(ws.bpel.Throw host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Throw ---
		//--- Property faultName ---
		DefaultMutableTreeNode faultNameNode = getNode(this, "faultName", host.getFaultName(), data);
		root.add(faultNameNode);
		//--- Association faultVariable ---
		DefaultMutableTreeNode faultVariableNode = getNode(this, "faultVariable", host.getFaultVariable(), data);
		root.add(faultVariableNode);
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Terminate' */
	public Object visit(ws.bpel.TerminateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Terminate' */
	public Object visit(ws.bpel.Terminate host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Terminate ---
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Wait' */
	public Object visit(ws.bpel.WaitFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Wait' */
	public Object visit(ws.bpel.Wait host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Wait ---
		//--- Property durationKind ---
		DefaultMutableTreeNode durationKindNode = getNode(this, "durationKind", host.getDurationKind(), data);
		root.add(durationKindNode);
		//--- Association expression ---
		DefaultMutableTreeNode expressionNode = getNode(this, "expression", host.getExpression(), data);
		root.add(expressionNode);
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Empty' */
	public Object visit(ws.bpel.EmptyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Empty' */
	public Object visit(ws.bpel.Empty host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Empty ---
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.ActivitySequence' */
	public Object visit(ws.bpel.ActivitySequenceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.ActivitySequence' */
	public Object visit(ws.bpel.ActivitySequence host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ActivitySequence ---
		//--- Association body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Switch' */
	public Object visit(ws.bpel.SwitchFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Switch' */
	public Object visit(ws.bpel.Switch host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Switch ---
		//--- Association otherwise ---
		DefaultMutableTreeNode otherwiseNode = getNode(this, "otherwise", host.getOtherwise(), data);
		root.add(otherwiseNode);
		//--- Association cases ---
		DefaultMutableTreeNode casesNode = getNode(this, "cases", host.getCases(), data);
		root.add(casesNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.While' */
	public Object visit(ws.bpel.WhileFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.While' */
	public Object visit(ws.bpel.While host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for While ---
		//--- Association body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Association condition ---
		DefaultMutableTreeNode conditionNode = getNode(this, "condition", host.getCondition(), data);
		root.add(conditionNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Pick' */
	public Object visit(ws.bpel.PickFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Pick' */
	public Object visit(ws.bpel.Pick host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Pick ---
		//--- Property createInstance ---
		DefaultMutableTreeNode createInstanceNode = getNode(this, "createInstance", host.getCreateInstance(), data);
		root.add(createInstanceNode);
		//--- Association onMessages ---
		DefaultMutableTreeNode onMessagesNode = getNode(this, "onMessages", host.getOnMessages(), data);
		root.add(onMessagesNode);
		//--- Association onAlarms ---
		DefaultMutableTreeNode onAlarmsNode = getNode(this, "onAlarms", host.getOnAlarms(), data);
		root.add(onAlarmsNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Flow' */
	public Object visit(ws.bpel.FlowFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Flow' */
	public Object visit(ws.bpel.Flow host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Flow ---
		//--- Association activities ---
		DefaultMutableTreeNode activitiesNode = getNode(this, "activities", host.getActivities(), data);
		root.add(activitiesNode);
		//--- Association link ---
		DefaultMutableTreeNode linkNode = getNode(this, "link", host.getLink(), data);
		root.add(linkNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Scope' */
	public Object visit(ws.bpel.ScopeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Scope' */
	public Object visit(ws.bpel.Scope host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Scope ---
		//--- Property variableAccessSerializable ---
		DefaultMutableTreeNode variableAccessSerializableNode = getNode(this, "variableAccessSerializable", host.getVariableAccessSerializable(), data);
		root.add(variableAccessSerializableNode);
		//--- Association scopeFaultHandler ---
		DefaultMutableTreeNode scopeFaultHandlerNode = getNode(this, "scopeFaultHandler", host.getScopeFaultHandler(), data);
		root.add(scopeFaultHandlerNode);
		//--- Association scopeActivity ---
		DefaultMutableTreeNode scopeActivityNode = getNode(this, "scopeActivity", host.getScopeActivity(), data);
		root.add(scopeActivityNode);
		//--- Association compensationActivity ---
		DefaultMutableTreeNode compensationActivityNode = getNode(this, "compensationActivity", host.getCompensationActivity(), data);
		root.add(compensationActivityNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association correlationSet ---
		DefaultMutableTreeNode correlationSetNode = getNode(this, "correlationSet", host.getCorrelationSet(), data);
		root.add(correlationSetNode);
		//--- Association scopeEventHandler ---
		DefaultMutableTreeNode scopeEventHandlerNode = getNode(this, "scopeEventHandler", host.getScopeEventHandler(), data);
		root.add(scopeEventHandlerNode);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Compensate' */
	public Object visit(ws.bpel.CompensateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Compensate' */
	public Object visit(ws.bpel.Compensate host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Compensate ---
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Source' */
	public Object visit(ws.bpel.SourceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Source' */
	public Object visit(ws.bpel.Source host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Source ---
		//--- Property transitionCondition ---
		DefaultMutableTreeNode transitionConditionNode = getNode(this, "transitionCondition", host.getTransitionCondition(), data);
		root.add(transitionConditionNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Association link ---
		DefaultMutableTreeNode linkNode = getNode(this, "link", host.getLink(), data);
		root.add(linkNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Correlation' */
	public Object visit(ws.bpel.CorrelationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Correlation' */
	public Object visit(ws.bpel.Correlation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Correlation ---
		//--- Property initiate ---
		DefaultMutableTreeNode initiateNode = getNode(this, "initiate", host.getInitiate(), data);
		root.add(initiateNode);
		//--- Property pattern ---
		DefaultMutableTreeNode patternNode = getNode(this, "pattern", host.getPattern(), data);
		root.add(patternNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association set ---
		DefaultMutableTreeNode setNode = getNode(this, "set", host.getSet(), data);
		root.add(setNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Link' */
	public Object visit(ws.bpel.LinkFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Link' */
	public Object visit(ws.bpel.Link host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Link ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit class for 'ws.bpel.StructuredActivity' */
	public Object visit(ws.bpel.StructuredActivity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StructuredActivity ---
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.PartnerLink' */
	public Object visit(ws.bpel.PartnerLinkFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.PartnerLink' */
	public Object visit(ws.bpel.PartnerLink host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PartnerLink ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association businessProcess ---
		DefaultMutableTreeNode businessProcessNode = getNode(this, "businessProcess", host.getBusinessProcess(), data);
		root.add(businessProcessNode);
		//--- Association partnerRole ---
		DefaultMutableTreeNode partnerRoleNode = getNode(this, "partnerRole", host.getPartnerRole(), data);
		root.add(partnerRoleNode);
		//--- Association partner ---
		DefaultMutableTreeNode partnerNode = getNode(this, "partner", host.getPartner(), data);
		root.add(partnerNode);
		//--- Association fromPartnerLink ---
		DefaultMutableTreeNode fromPartnerLinkNode = getNode(this, "fromPartnerLink", host.getFromPartnerLink(), data);
		root.add(fromPartnerLinkNode);
		//--- Association toPartnerLink ---
		DefaultMutableTreeNode toPartnerLinkNode = getNode(this, "toPartnerLink", host.getToPartnerLink(), data);
		root.add(toPartnerLinkNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association partnerLinkType ---
		DefaultMutableTreeNode partnerLinkTypeNode = getNode(this, "partnerLinkType", host.getPartnerLinkType(), data);
		root.add(partnerLinkTypeNode);
		//--- Association linkRole ---
		DefaultMutableTreeNode linkRoleNode = getNode(this, "linkRole", host.getLinkRole(), data);
		root.add(linkRoleNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.PartnerLinkType' */
	public Object visit(ws.bpel.PartnerLinkTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.PartnerLinkType' */
	public Object visit(ws.bpel.PartnerLinkType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PartnerLinkType ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association role ---
		DefaultMutableTreeNode roleNode = getNode(this, "role", host.getRole(), data);
		root.add(roleNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Role' */
	public Object visit(ws.bpel.RoleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Role' */
	public Object visit(ws.bpel.Role host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Role ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association partnerLinkType ---
		DefaultMutableTreeNode partnerLinkTypeNode = getNode(this, "partnerLinkType", host.getPartnerLinkType(), data);
		root.add(partnerLinkTypeNode);
		//--- Association partner ---
		DefaultMutableTreeNode partnerNode = getNode(this, "partner", host.getPartner(), data);
		root.add(partnerNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Copy' */
	public Object visit(ws.bpel.CopyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Copy' */
	public Object visit(ws.bpel.Copy host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Copy ---
		//--- Association assign ---
		DefaultMutableTreeNode assignNode = getNode(this, "assign", host.getAssign(), data);
		root.add(assignNode);
		//--- Association fromSpec ---
		DefaultMutableTreeNode fromSpecNode = getNode(this, "fromSpec", host.getFromSpec(), data);
		root.add(fromSpecNode);
		//--- Association toSpec ---
		DefaultMutableTreeNode toSpecNode = getNode(this, "toSpec", host.getToSpec(), data);
		root.add(toSpecNode);
		return root;
	}
	/** Visit class for 'ws.bpel.FromSpec' */
	public Object visit(ws.bpel.FromSpec host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FromSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit class for 'ws.bpel.ToSpec' */
	public Object visit(ws.bpel.ToSpec host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ToSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit class for 'ws.bpel.VariableSpec' */
	public Object visit(ws.bpel.VariableSpec host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for VariableSpec ---
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association part ---
		DefaultMutableTreeNode partNode = getNode(this, "part", host.getPart(), data);
		root.add(partNode);
		//--- Association property ---
		DefaultMutableTreeNode propertyNode = getNode(this, "property", host.getProperty(), data);
		root.add(propertyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.FromPartnerLink' */
	public Object visit(ws.bpel.FromPartnerLinkFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.FromPartnerLink' */
	public Object visit(ws.bpel.FromPartnerLink host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FromPartnerLink ---
		//--- Property endPointReference ---
		DefaultMutableTreeNode endPointReferenceNode = getNode(this, "endPointReference", host.getEndPointReference(), data);
		root.add(endPointReferenceNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Properties for FromSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.FromExpression' */
	public Object visit(ws.bpel.FromExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.FromExpression' */
	public Object visit(ws.bpel.FromExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FromExpression ---
		//--- Property expression ---
		DefaultMutableTreeNode expressionNode = getNode(this, "expression", host.getExpression(), data);
		root.add(expressionNode);
		//--- Properties for FromSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.ToVariable' */
	public Object visit(ws.bpel.ToVariableFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.ToVariable' */
	public Object visit(ws.bpel.ToVariable host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ToVariable ---
		//--- Properties for ToSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		//--- Properties for VariableSpec ---
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association part ---
		DefaultMutableTreeNode partNode = getNode(this, "part", host.getPart(), data);
		root.add(partNode);
		//--- Association property ---
		DefaultMutableTreeNode propertyNode = getNode(this, "property", host.getProperty(), data);
		root.add(propertyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Property' */
	public Object visit(ws.bpel.PropertyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Property' */
	public Object visit(ws.bpel.Property host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Property ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variableSpec ---
		DefaultMutableTreeNode variableSpecNode = getNode(this, "variableSpec", host.getVariableSpec(), data);
		root.add(variableSpecNode);
		//--- Association correlationSet ---
		DefaultMutableTreeNode correlationSetNode = getNode(this, "correlationSet", host.getCorrelationSet(), data);
		root.add(correlationSetNode);
		//--- Association propertyAlias ---
		DefaultMutableTreeNode propertyAliasNode = getNode(this, "propertyAlias", host.getPropertyAlias(), data);
		root.add(propertyAliasNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Part' */
	public Object visit(ws.bpel.PartFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Part' */
	public Object visit(ws.bpel.Part host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Part ---
		//--- Association variableSpec ---
		DefaultMutableTreeNode variableSpecNode = getNode(this, "variableSpec", host.getVariableSpec(), data);
		root.add(variableSpecNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.FromLiteral' */
	public Object visit(ws.bpel.FromLiteralFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.FromLiteral' */
	public Object visit(ws.bpel.FromLiteral host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FromLiteral ---
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Property type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for FromSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.ToPartnerLink' */
	public Object visit(ws.bpel.ToPartnerLinkFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.ToPartnerLink' */
	public Object visit(ws.bpel.ToPartnerLink host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ToPartnerLink ---
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Properties for ToSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.FromVariable' */
	public Object visit(ws.bpel.FromVariableFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.FromVariable' */
	public Object visit(ws.bpel.FromVariable host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FromVariable ---
		//--- Properties for FromSpec ---
		//--- Association copy ---
		DefaultMutableTreeNode copyNode = getNode(this, "copy", host.getCopy(), data);
		root.add(copyNode);
		//--- Properties for VariableSpec ---
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association part ---
		DefaultMutableTreeNode partNode = getNode(this, "part", host.getPart(), data);
		root.add(partNode);
		//--- Association property ---
		DefaultMutableTreeNode propertyNode = getNode(this, "property", host.getProperty(), data);
		root.add(propertyNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.BooleanExpression' */
	public Object visit(ws.bpel.BooleanExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.BooleanExpression' */
	public Object visit(ws.bpel.BooleanExpression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BooleanExpression ---
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association onAlarm ---
		DefaultMutableTreeNode onAlarmNode = getNode(this, "onAlarm", host.getOnAlarm(), data);
		root.add(onAlarmNode);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Properties for Expression ---
		//--- Association wait ---
		DefaultMutableTreeNode waitNode = getNode(this, "wait", host.getWait(), data);
		root.add(waitNode);
		return root;
	}
	/** Visit class for 'ws.bpel.PartnerActivity' */
	public Object visit(ws.bpel.PartnerActivity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PartnerActivity ---
		//--- Association correlations ---
		DefaultMutableTreeNode correlationsNode = getNode(this, "correlations", host.getCorrelations(), data);
		root.add(correlationsNode);
		//--- Association partnerLink ---
		DefaultMutableTreeNode partnerLinkNode = getNode(this, "partnerLink", host.getPartnerLink(), data);
		root.add(partnerLinkNode);
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.Expression' */
	public Object visit(ws.bpel.ExpressionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Expression' */
	public Object visit(ws.bpel.Expression host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Expression ---
		//--- Association wait ---
		DefaultMutableTreeNode waitNode = getNode(this, "wait", host.getWait(), data);
		root.add(waitNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Case' */
	public Object visit(ws.bpel.CaseFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Case' */
	public Object visit(ws.bpel.Case host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Case ---
		//--- Association body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Association condition ---
		DefaultMutableTreeNode conditionNode = getNode(this, "condition", host.getCondition(), data);
		root.add(conditionNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.PropertyAlias' */
	public Object visit(ws.bpel.PropertyAliasFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.PropertyAlias' */
	public Object visit(ws.bpel.PropertyAlias host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PropertyAlias ---
		//--- Property query ---
		DefaultMutableTreeNode queryNode = getNode(this, "query", host.getQuery(), data);
		root.add(queryNode);
		//--- Association property ---
		DefaultMutableTreeNode propertyNode = getNode(this, "property", host.getProperty(), data);
		root.add(propertyNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.bpel.Target' */
	public Object visit(ws.bpel.TargetFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.Target' */
	public Object visit(ws.bpel.Target host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Target ---
		//--- Association link ---
		DefaultMutableTreeNode linkNode = getNode(this, "link", host.getLink(), data);
		root.add(linkNode);
		//--- Association activity ---
		DefaultMutableTreeNode activityNode = getNode(this, "activity", host.getActivity(), data);
		root.add(activityNode);
		return root;
	}
	/** Visit class for 'ws.bpel.BasicActivity' */
	public Object visit(ws.bpel.BasicActivity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BasicActivity ---
		//--- Properties for Activity ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property joinCondition ---
		DefaultMutableTreeNode joinConditionNode = getNode(this, "joinCondition", host.getJoinCondition(), data);
		root.add(joinConditionNode);
		//--- Property suppressJoinFailure ---
		DefaultMutableTreeNode suppressJoinFailureNode = getNode(this, "suppressJoinFailure", host.getSuppressJoinFailure(), data);
		root.add(suppressJoinFailureNode);
		//--- Association flow ---
		DefaultMutableTreeNode flowNode = getNode(this, "flow", host.getFlow(), data);
		root.add(flowNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association activitySequence ---
		DefaultMutableTreeNode activitySequenceNode = getNode(this, "activitySequence", host.getActivitySequence(), data);
		root.add(activitySequenceNode);
		//--- Association switch_ ---
		DefaultMutableTreeNode switch_Node = getNode(this, "switch_", host.getSwitch_(), data);
		root.add(switch_Node);
		//--- Association case_ ---
		DefaultMutableTreeNode case_Node = getNode(this, "case_", host.getCase_(), data);
		root.add(case_Node);
		//--- Association while_ ---
		DefaultMutableTreeNode while_Node = getNode(this, "while_", host.getWhile_(), data);
		root.add(while_Node);
		//--- Association scope ---
		DefaultMutableTreeNode scopeNode = getNode(this, "scope", host.getScope(), data);
		root.add(scopeNode);
		//--- Association compensationScope ---
		DefaultMutableTreeNode compensationScopeNode = getNode(this, "compensationScope", host.getCompensationScope(), data);
		root.add(compensationScopeNode);
		//--- Association activityFaultHandler ---
		DefaultMutableTreeNode activityFaultHandlerNode = getNode(this, "activityFaultHandler", host.getActivityFaultHandler(), data);
		root.add(activityFaultHandlerNode);
		//--- Association targetOf ---
		DefaultMutableTreeNode targetOfNode = getNode(this, "targetOf", host.getTargetOf(), data);
		root.add(targetOfNode);
		//--- Association sourceOf ---
		DefaultMutableTreeNode sourceOfNode = getNode(this, "sourceOf", host.getSourceOf(), data);
		root.add(sourceOfNode);
		//--- Association activityEventHandler ---
		DefaultMutableTreeNode activityEventHandlerNode = getNode(this, "activityEventHandler", host.getActivityEventHandler(), data);
		root.add(activityEventHandlerNode);
		//--- Association activityAlarm ---
		DefaultMutableTreeNode activityAlarmNode = getNode(this, "activityAlarm", host.getActivityAlarm(), data);
		root.add(activityAlarmNode);
		//--- Association activityOnMessage ---
		DefaultMutableTreeNode activityOnMessageNode = getNode(this, "activityOnMessage", host.getActivityOnMessage(), data);
		root.add(activityOnMessageNode);
		//--- Association invoke ---
		DefaultMutableTreeNode invokeNode = getNode(this, "invoke", host.getInvoke(), data);
		root.add(invokeNode);
		//--- Association catch_ ---
		DefaultMutableTreeNode catch_Node = getNode(this, "catch_", host.getCatch_(), data);
		root.add(catch_Node);
		return root;
	}
	/** Visit factory for 'ws.bpel.CorrelationPattern' */
	public Object visit(ws.bpel.CorrelationPatternFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.CorrelationPattern' */
	public Object visit(ws.bpel.CorrelationPattern host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CorrelationPattern ---
		return root;
	}
	/** Visit factory for 'ws.bpel.DurationKind' */
	public Object visit(ws.bpel.DurationKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.DurationKind' */
	public Object visit(ws.bpel.DurationKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DurationKind ---
		return root;
	}
	/** Visit factory for 'ws.bpel.EndPointReference' */
	public Object visit(ws.bpel.EndPointReferenceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.bpel.EndPointReference' */
	public Object visit(ws.bpel.EndPointReference host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EndPointReference ---
		return root;
	}
	/** Visit factory for 'ws.wsdl.Message' */
	public Object visit(ws.wsdl.MessageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Message' */
	public Object visit(ws.wsdl.Message host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Message ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association parts ---
		DefaultMutableTreeNode partsNode = getNode(this, "parts", host.getParts(), data);
		root.add(partsNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.PortType' */
	public Object visit(ws.wsdl.PortTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.PortType' */
	public Object visit(ws.wsdl.PortType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortType ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association operations ---
		DefaultMutableTreeNode operationsNode = getNode(this, "operations", host.getOperations(), data);
		root.add(operationsNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Operation' */
	public Object visit(ws.wsdl.OperationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Operation' */
	public Object visit(ws.wsdl.Operation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Operation ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association input ---
		DefaultMutableTreeNode inputNode = getNode(this, "input", host.getInput(), data);
		root.add(inputNode);
		//--- Association output ---
		DefaultMutableTreeNode outputNode = getNode(this, "output", host.getOutput(), data);
		root.add(outputNode);
		//--- Association faults ---
		DefaultMutableTreeNode faultsNode = getNode(this, "faults", host.getFaults(), data);
		root.add(faultsNode);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.ExtensibleElement' */
	public Object visit(ws.wsdl.ExtensibleElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.ExtensibleElement' */
	public Object visit(ws.wsdl.ExtensibleElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Definition' */
	public Object visit(ws.wsdl.DefinitionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Definition' */
	public Object visit(ws.wsdl.Definition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Definition ---
		//--- Association imports ---
		DefaultMutableTreeNode importsNode = getNode(this, "imports", host.getImports(), data);
		root.add(importsNode);
		//--- Association types ---
		DefaultMutableTreeNode typesNode = getNode(this, "types", host.getTypes(), data);
		root.add(typesNode);
		//--- Association messages ---
		DefaultMutableTreeNode messagesNode = getNode(this, "messages", host.getMessages(), data);
		root.add(messagesNode);
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association services ---
		DefaultMutableTreeNode servicesNode = getNode(this, "services", host.getServices(), data);
		root.add(servicesNode);
		//--- Association portTypes ---
		DefaultMutableTreeNode portTypesNode = getNode(this, "portTypes", host.getPortTypes(), data);
		root.add(portTypesNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Import' */
	public Object visit(ws.wsdl.ImportFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Import' */
	public Object visit(ws.wsdl.Import host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Import ---
		//--- Property namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Property location ---
		DefaultMutableTreeNode locationNode = getNode(this, "location", host.getLocation(), data);
		root.add(locationNode);
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Binding' */
	public Object visit(ws.wsdl.BindingFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Binding' */
	public Object visit(ws.wsdl.Binding host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Binding ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association operations ---
		DefaultMutableTreeNode operationsNode = getNode(this, "operations", host.getOperations(), data);
		root.add(operationsNode);
		//--- Association port ---
		DefaultMutableTreeNode portNode = getNode(this, "port", host.getPort(), data);
		root.add(portNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Service' */
	public Object visit(ws.wsdl.ServiceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Service' */
	public Object visit(ws.wsdl.Service host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Service ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for ExtensibleElement ---
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Part' */
	public Object visit(ws.wsdl.PartFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Part' */
	public Object visit(ws.wsdl.Part host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Part ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property element ---
		DefaultMutableTreeNode elementNode = getNode(this, "element", host.getElement(), data);
		root.add(elementNode);
		//--- Property type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association message ---
		DefaultMutableTreeNode messageNode = getNode(this, "message", host.getMessage(), data);
		root.add(messageNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.PortTypeOperation' */
	public Object visit(ws.wsdl.PortTypeOperationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.PortTypeOperation' */
	public Object visit(ws.wsdl.PortTypeOperation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortTypeOperation ---
		//--- Association portType ---
		DefaultMutableTreeNode portTypeNode = getNode(this, "portType", host.getPortType(), data);
		root.add(portTypeNode);
		//--- Properties for Operation ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association input ---
		DefaultMutableTreeNode inputNode = getNode(this, "input", host.getInput(), data);
		root.add(inputNode);
		//--- Association output ---
		DefaultMutableTreeNode outputNode = getNode(this, "output", host.getOutput(), data);
		root.add(outputNode);
		//--- Association faults ---
		DefaultMutableTreeNode faultsNode = getNode(this, "faults", host.getFaults(), data);
		root.add(faultsNode);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.BindingOperation' */
	public Object visit(ws.wsdl.BindingOperationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.BindingOperation' */
	public Object visit(ws.wsdl.BindingOperation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BindingOperation ---
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Properties for Operation ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association partnerActivity ---
		DefaultMutableTreeNode partnerActivityNode = getNode(this, "partnerActivity", host.getPartnerActivity(), data);
		root.add(partnerActivityNode);
		//--- Association input ---
		DefaultMutableTreeNode inputNode = getNode(this, "input", host.getInput(), data);
		root.add(inputNode);
		//--- Association output ---
		DefaultMutableTreeNode outputNode = getNode(this, "output", host.getOutput(), data);
		root.add(outputNode);
		//--- Association faults ---
		DefaultMutableTreeNode faultsNode = getNode(this, "faults", host.getFaults(), data);
		root.add(faultsNode);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Port' */
	public Object visit(ws.wsdl.PortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Port' */
	public Object visit(ws.wsdl.Port host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association service ---
		DefaultMutableTreeNode serviceNode = getNode(this, "service", host.getService(), data);
		root.add(serviceNode);
		//--- Association binding ---
		DefaultMutableTreeNode bindingNode = getNode(this, "binding", host.getBinding(), data);
		root.add(bindingNode);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Input' */
	public Object visit(ws.wsdl.InputFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Input' */
	public Object visit(ws.wsdl.Input host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Input ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property message ---
		DefaultMutableTreeNode messageNode = getNode(this, "message", host.getMessage(), data);
		root.add(messageNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Output' */
	public Object visit(ws.wsdl.OutputFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Output' */
	public Object visit(ws.wsdl.Output host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Output ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property message ---
		DefaultMutableTreeNode messageNode = getNode(this, "message", host.getMessage(), data);
		root.add(messageNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Fault' */
	public Object visit(ws.wsdl.FaultFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Fault' */
	public Object visit(ws.wsdl.Fault host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Fault ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property message ---
		DefaultMutableTreeNode messageNode = getNode(this, "message", host.getMessage(), data);
		root.add(messageNode);
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.WSDLElement' */
	public Object visit(ws.wsdl.WSDLElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.WSDLElement' */
	public Object visit(ws.wsdl.WSDLElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for WSDLElement ---
		//--- Association documentation ---
		DefaultMutableTreeNode documentationNode = getNode(this, "documentation", host.getDocumentation(), data);
		root.add(documentationNode);
		return root;
	}
	/** Visit factory for 'ws.wsdl.Documentation' */
	public Object visit(ws.wsdl.DocumentationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.wsdl.Documentation' */
	public Object visit(ws.wsdl.Documentation host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Documentation ---
		//--- Property text ---
		DefaultMutableTreeNode textNode = getNode(this, "text", host.getText(), data);
		root.add(textNode);
		//--- Association wSDLElement ---
		DefaultMutableTreeNode wSDLElementNode = getNode(this, "wSDLElement", host.getWSDLElement(), data);
		root.add(wSDLElementNode);
		return root;
	}
	/** Visit factory for 'ws.xsd.SimpleType' */
	public Object visit(ws.xsd.SimpleTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.xsd.SimpleType' */
	public Object visit(ws.xsd.SimpleType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SimpleType ---
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		//--- Properties for Type ---
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association attribute ---
		DefaultMutableTreeNode attributeNode = getNode(this, "attribute", host.getAttribute(), data);
		root.add(attributeNode);
		//--- Properties for Element ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'ws.xsd.Element' */
	public Object visit(ws.xsd.ElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.xsd.Element' */
	public Object visit(ws.xsd.Element host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Element ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		return root;
	}
	/** Visit class for 'ws.xsd.Type' */
	public Object visit(ws.xsd.Type host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Type ---
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association attribute ---
		DefaultMutableTreeNode attributeNode = getNode(this, "attribute", host.getAttribute(), data);
		root.add(attributeNode);
		//--- Properties for Element ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		return root;
	}
	/** Visit factory for 'ws.xsd.ComplexType' */
	public Object visit(ws.xsd.ComplexTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.xsd.ComplexType' */
	public Object visit(ws.xsd.ComplexType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ComplexType ---
		//--- Association sequence ---
		DefaultMutableTreeNode sequenceNode = getNode(this, "sequence", host.getSequence(), data);
		root.add(sequenceNode);
		//--- Properties for Type ---
		//--- Association definition ---
		DefaultMutableTreeNode definitionNode = getNode(this, "definition", host.getDefinition(), data);
		root.add(definitionNode);
		//--- Association attribute ---
		DefaultMutableTreeNode attributeNode = getNode(this, "attribute", host.getAttribute(), data);
		root.add(attributeNode);
		//--- Properties for Element ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		return root;
	}
	/** Visit factory for 'ws.xsd.Attribute' */
	public Object visit(ws.xsd.AttributeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ws.xsd.Attribute' */
	public Object visit(ws.xsd.Attribute host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Attribute ---
		//--- Association complexType ---
		DefaultMutableTreeNode complexTypeNode = getNode(this, "complexType", host.getComplexType(), data);
		root.add(complexTypeNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for Element ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association variable ---
		DefaultMutableTreeNode variableNode = getNode(this, "variable", host.getVariable(), data);
		root.add(variableNode);
		return root;
	}
	/** Auxiliary function used by the vistors */
	DefaultMutableTreeNode getNode(WsJTreeVisitor visitor, String name, Object obj, Object data) {
		//--- Elements visited on this branch ---
		Set visitedElements = (Set)data;
		//--- Create node ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(name);
		//--- Construct the value ---
		//--- Primitive types ---
		if (obj == null) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("null");
			root.add(objNode);
			return root;
		}
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofPrimitiveType(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj.toString());
			root.add(objNode);
			return root;
		}
		//--- Collection types ---
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				DefaultMutableTreeNode objNode = getNode(this, "Element", i.next(), data);
				root.add((DefaultMutableTreeNode)objNode.getChildAt(0));
			}
			return root;
		}
		//--- Enumerations types ---
		String fullClassName = obj.getClass().getName();
		if (fullClassName.endsWith("Enum") || fullClassName.endsWith("Kind")) {
			//--- Get class ---
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("Error");
			try {
				Class objClass = obj.getClass();
				Class visitorClass = Class.forName("ws.WsVisitor");
				Class dataClass = data.getClass();
				Method accept = objClass.getMethod("accept", new Class[] {visitorClass, dataClass});
				objNode = (DefaultMutableTreeNode)accept.invoke(obj, new Object[] {visitor, data});
			} catch (Exception e) {
			}
			root.add(objNode);
			return root;
		}
		//--- User types ---
		//--- Already added on the current branch: make a toSring node ---
		if (visitedElements.contains(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj, false);
			root.add(objNode);
		//--- Was not visited previously on the current branch ---
		} else {
			// Add it
			visitedElements.add(obj);
			// Visit it
			DefaultMutableTreeNode objNode = (DefaultMutableTreeNode)((ws.WsElement)obj).accept(visitor, visitedElements);
			root.add(objNode);
		}
		return root;
	}
}
