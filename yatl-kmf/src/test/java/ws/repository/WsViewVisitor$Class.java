/**
 *
 *  Class WsViewVisitor$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 13:29:41
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ws.repository;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.OclProcessor;

public class WsViewVisitor$Class
	implements WsViewVisitor
{
	/** Constructor */
	public WsViewVisitor$Class(OclProcessor oclProcessor) {
		this.oclProcessor = oclProcessor;
	}

	/** OclProcessor */
	protected OclProcessor oclProcessor;
	public OclProcessor getOclProcessor() { return oclProcessor; }
	public void setOclProcessor(OclProcessor processor) { oclProcessor = processor;	}

	/** Visit factory for 'WsFactory' */
	public Object visit(ws.WsFactory host, Object data) {
		JFrame frame = new JFrame("ws.WsFactory");
		return frame;
	}
	/** Visit factory for 'ws.bpel.BusinessProcess' */
	public Object visit(ws.bpel.BusinessProcessFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.BusinessProcessFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.BusinessProcess' */
	public Object visit(ws.bpel.BusinessProcess host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.BusinessProcess finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add attribute 'variableAccessSerializable' ---
		//--- Add labels ---
		addLabels("variableAccessSerializable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "variableAccessSerializable", host.getVariableAccessSerializable(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'scopeFaultHandler' ---
		//--- Add labels ---
		addLabels("scopeFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeFaultHandler", host.getScopeFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'scopeActivity' ---
		//--- Add labels ---
		addLabels("scopeActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeActivity", host.getScopeActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'compensationActivity' ---
		//--- Add labels ---
		addLabels("compensationActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationActivity", host.getCompensationActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'correlationSet' ---
		//--- Add labels ---
		addLabels("correlationSet", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlationSet", host.getCorrelationSet(), rep, "ws.bpel.CorrelationSet", editPanel, c, line, frame);
		//--- Add association 'scopeEventHandler' ---
		//--- Add labels ---
		addLabels("scopeEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeEventHandler", host.getScopeEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add attribute 'targetNamespace' ---
		//--- Add labels ---
		addLabels("targetNamespace", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "targetNamespace", host.getTargetNamespace(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'queryLanguage' ---
		//--- Add labels ---
		addLabels("queryLanguage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "queryLanguage", host.getQueryLanguage(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'expressionLanguage' ---
		//--- Add labels ---
		addLabels("expressionLanguage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "expressionLanguage", host.getExpressionLanguage(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'partner' ---
		//--- Add labels ---
		addLabels("partner", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partner", host.getPartner(), rep, "ws.bpel.Partner", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.BusinessProcess", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Partner' */
	public Object visit(ws.bpel.PartnerFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PartnerFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Partner' */
	public Object visit(ws.bpel.Partner host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Partner finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'serviceLinkType' ---
		//--- Add labels ---
		addLabels("serviceLinkType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "serviceLinkType", host.getServiceLinkType(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'myRole' ---
		//--- Add labels ---
		addLabels("myRole", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "myRole", host.getMyRole(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'partnerRole' ---
		//--- Add labels ---
		addLabels("partnerRole", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "partnerRole", host.getPartnerRole(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'businessProcess' ---
		//--- Add labels ---
		addLabels("businessProcess", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "businessProcess", host.getBusinessProcess(), rep, "ws.bpel.BusinessProcess", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Partner", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Variable' */
	public Object visit(ws.bpel.VariableFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.VariableFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Variable' */
	public Object visit(ws.bpel.Variable host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Variable finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variableSpec' ---
		//--- Add labels ---
		addLabels("variableSpec", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variableSpec", host.getVariableSpec(), rep, "ws.bpel.VariableSpec", editPanel, c, line, frame);
		//--- Add association 'type' ---
		//--- Add labels ---
		addLabels("type", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "type", host.getType(), rep, "ws.xsd.SimpleType", editPanel, c, line, frame);
		//--- Add association 'element' ---
		//--- Add labels ---
		addLabels("element", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "element", host.getElement(), rep, "ws.xsd.Element", editPanel, c, line, frame);
		//--- Add association 'inputInvoke' ---
		//--- Add labels ---
		addLabels("inputInvoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "inputInvoke", host.getInputInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'outputInvoke' ---
		//--- Add labels ---
		addLabels("outputInvoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "outputInvoke", host.getOutputInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'reply' ---
		//--- Add labels ---
		addLabels("reply", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "reply", host.getReply(), rep, "ws.bpel.Reply", editPanel, c, line, frame);
		//--- Add association 'receive' ---
		//--- Add labels ---
		addLabels("receive", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "receive", host.getReceive(), rep, "ws.bpel.Receive", editPanel, c, line, frame);
		//--- Add association 'throw_' ---
		//--- Add labels ---
		addLabels("throw_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "throw_", host.getThrow_(), rep, "ws.bpel.Throw", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'onMessage' ---
		//--- Add labels ---
		addLabels("onMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onMessage", host.getOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'messageType' ---
		//--- Add labels ---
		addLabels("messageType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "messageType", host.getMessageType(), rep, "ws.wsdl.Message", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Variable", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.CorrelationSet' */
	public Object visit(ws.bpel.CorrelationSetFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CorrelationSetFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.CorrelationSet' */
	public Object visit(ws.bpel.CorrelationSet host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.CorrelationSet finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'correlation' ---
		//--- Add labels ---
		addLabels("correlation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlation", host.getCorrelation(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'property' ---
		//--- Add labels ---
		addLabels("property", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "property", host.getProperty(), rep, "ws.bpel.Property", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.CorrelationSet", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.FaultHandler' */
	public Object visit(ws.bpel.FaultHandlerFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FaultHandlerFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.FaultHandler' */
	public Object visit(ws.bpel.FaultHandler host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FaultHandler finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'catchAll' ---
		//--- Add labels ---
		addLabels("catchAll", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catchAll", host.getCatchAll(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FaultHandler", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.Activity' */
	public Object visit(ws.bpel.Activity host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Activity finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Activity", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.EventHandler' */
	public Object visit(ws.bpel.EventHandlerFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.EventHandlerFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.EventHandler' */
	public Object visit(ws.bpel.EventHandler host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.EventHandler finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'onAlarm' ---
		//--- Add labels ---
		addLabels("onAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onAlarm", host.getOnAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'onMessage' ---
		//--- Add labels ---
		addLabels("onMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onMessage", host.getOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.EventHandler", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Catch' */
	public Object visit(ws.bpel.CatchFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CatchFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Catch' */
	public Object visit(ws.bpel.Catch host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Catch finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'faultName' ---
		//--- Add labels ---
		addLabels("faultName", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "faultName", host.getFaultName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'faultVariable' ---
		//--- Add labels ---
		addLabels("faultVariable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faultVariable", host.getFaultVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'faultHandler' ---
		//--- Add labels ---
		addLabels("faultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faultHandler", host.getFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Catch", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.OnMessage' */
	public Object visit(ws.bpel.OnMessageFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.OnMessageFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.OnMessage' */
	public Object visit(ws.bpel.OnMessage host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.OnMessage finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'correlations' ---
		//--- Add labels ---
		addLabels("correlations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlations", host.getCorrelations(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);
		//--- Add association 'pick' ---
		//--- Add labels ---
		addLabels("pick", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "pick", host.getPick(), rep, "ws.bpel.Pick", editPanel, c, line, frame);
		//--- Add association 'eventHandler' ---
		//--- Add labels ---
		addLabels("eventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "eventHandler", host.getEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.OnMessage", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.OnAlarm' */
	public Object visit(ws.bpel.OnAlarmFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.OnAlarmFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.OnAlarm' */
	public Object visit(ws.bpel.OnAlarm host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.OnAlarm finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'durationKind' ---
		//--- Add labels ---
		addLabels("durationKind", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "durationKind", host.getDurationKind(), rep, "ws.bpel.DurationKind", editPanel, c, line, frame);
		//--- Add association 'pick' ---
		//--- Add labels ---
		addLabels("pick", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "pick", host.getPick(), rep, "ws.bpel.Pick", editPanel, c, line, frame);
		//--- Add association 'booleanExpression' ---
		//--- Add labels ---
		addLabels("booleanExpression", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "booleanExpression", host.getBooleanExpression(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add association 'eventHandler' ---
		//--- Add labels ---
		addLabels("eventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "eventHandler", host.getEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'son' ---
		//--- Add labels ---
		addLabels("son", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "son", host.getSon(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.OnAlarm", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Receive' */
	public Object visit(ws.bpel.ReceiveFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ReceiveFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Receive' */
	public Object visit(ws.bpel.Receive host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Receive finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'correlations' ---
		//--- Add labels ---
		addLabels("correlations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlations", host.getCorrelations(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);
		//--- Add attribute 'createInstance' ---
		//--- Add labels ---
		addLabels("createInstance", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "createInstance", host.getCreateInstance(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Receive", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Reply' */
	public Object visit(ws.bpel.ReplyFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ReplyFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Reply' */
	public Object visit(ws.bpel.Reply host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Reply finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'correlations' ---
		//--- Add labels ---
		addLabels("correlations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlations", host.getCorrelations(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);
		//--- Add attribute 'faultName' ---
		//--- Add labels ---
		addLabels("faultName", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "faultName", host.getFaultName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Reply", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Invoke' */
	public Object visit(ws.bpel.InvokeFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.InvokeFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Invoke' */
	public Object visit(ws.bpel.Invoke host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Invoke finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'correlations' ---
		//--- Add labels ---
		addLabels("correlations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlations", host.getCorrelations(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);
		//--- Add association 'inputVariable' ---
		//--- Add labels ---
		addLabels("inputVariable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "inputVariable", host.getInputVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'outputVariable' ---
		//--- Add labels ---
		addLabels("outputVariable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "outputVariable", host.getOutputVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'invokeFaultHandler' ---
		//--- Add labels ---
		addLabels("invokeFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invokeFaultHandler", host.getInvokeFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'compensationHandler' ---
		//--- Add labels ---
		addLabels("compensationHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationHandler", host.getCompensationHandler(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Invoke", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Assign' */
	public Object visit(ws.bpel.AssignFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.AssignFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Assign' */
	public Object visit(ws.bpel.Assign host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Assign finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Assign", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Throw' */
	public Object visit(ws.bpel.ThrowFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ThrowFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Throw' */
	public Object visit(ws.bpel.Throw host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Throw finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add attribute 'faultName' ---
		//--- Add labels ---
		addLabels("faultName", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "faultName", host.getFaultName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'faultVariable' ---
		//--- Add labels ---
		addLabels("faultVariable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faultVariable", host.getFaultVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Throw", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Terminate' */
	public Object visit(ws.bpel.TerminateFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.TerminateFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Terminate' */
	public Object visit(ws.bpel.Terminate host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Terminate finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Terminate", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Wait' */
	public Object visit(ws.bpel.WaitFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.WaitFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Wait' */
	public Object visit(ws.bpel.Wait host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Wait finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add attribute 'durationKind' ---
		//--- Add labels ---
		addLabels("durationKind", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "durationKind", host.getDurationKind(), rep, "ws.bpel.DurationKind", editPanel, c, line, frame);
		//--- Add association 'expression' ---
		//--- Add labels ---
		addLabels("expression", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "expression", host.getExpression(), rep, "ws.bpel.Expression", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Wait", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Empty' */
	public Object visit(ws.bpel.EmptyFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.EmptyFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Empty' */
	public Object visit(ws.bpel.Empty host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Empty finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Empty", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.ActivitySequence' */
	public Object visit(ws.bpel.ActivitySequenceFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ActivitySequenceFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.ActivitySequence' */
	public Object visit(ws.bpel.ActivitySequence host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.ActivitySequence finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'body' ---
		//--- Add labels ---
		addLabels("body", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "body", host.getBody(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.ActivitySequence", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Switch' */
	public Object visit(ws.bpel.SwitchFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.SwitchFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Switch' */
	public Object visit(ws.bpel.Switch host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Switch finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'otherwise' ---
		//--- Add labels ---
		addLabels("otherwise", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "otherwise", host.getOtherwise(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'cases' ---
		//--- Add labels ---
		addLabels("cases", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "cases", host.getCases(), rep, "ws.bpel.Case", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Switch", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.While' */
	public Object visit(ws.bpel.WhileFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.WhileFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.While' */
	public Object visit(ws.bpel.While host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.While finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'body' ---
		//--- Add labels ---
		addLabels("body", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "body", host.getBody(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'condition' ---
		//--- Add labels ---
		addLabels("condition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "condition", host.getCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.While", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Pick' */
	public Object visit(ws.bpel.PickFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PickFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Pick' */
	public Object visit(ws.bpel.Pick host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Pick finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add attribute 'createInstance' ---
		//--- Add labels ---
		addLabels("createInstance", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "createInstance", host.getCreateInstance(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'onMessages' ---
		//--- Add labels ---
		addLabels("onMessages", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onMessages", host.getOnMessages(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'onAlarms' ---
		//--- Add labels ---
		addLabels("onAlarms", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onAlarms", host.getOnAlarms(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Pick", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Flow' */
	public Object visit(ws.bpel.FlowFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FlowFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Flow' */
	public Object visit(ws.bpel.Flow host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Flow finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'activities' ---
		//--- Add labels ---
		addLabels("activities", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activities", host.getActivities(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'link' ---
		//--- Add labels ---
		addLabels("link", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "link", host.getLink(), rep, "ws.bpel.Link", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Flow", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Scope' */
	public Object visit(ws.bpel.ScopeFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ScopeFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Scope' */
	public Object visit(ws.bpel.Scope host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Scope finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add attribute 'variableAccessSerializable' ---
		//--- Add labels ---
		addLabels("variableAccessSerializable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "variableAccessSerializable", host.getVariableAccessSerializable(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'scopeFaultHandler' ---
		//--- Add labels ---
		addLabels("scopeFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeFaultHandler", host.getScopeFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'scopeActivity' ---
		//--- Add labels ---
		addLabels("scopeActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeActivity", host.getScopeActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'compensationActivity' ---
		//--- Add labels ---
		addLabels("compensationActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationActivity", host.getCompensationActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'correlationSet' ---
		//--- Add labels ---
		addLabels("correlationSet", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlationSet", host.getCorrelationSet(), rep, "ws.bpel.CorrelationSet", editPanel, c, line, frame);
		//--- Add association 'scopeEventHandler' ---
		//--- Add labels ---
		addLabels("scopeEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scopeEventHandler", host.getScopeEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Scope", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Compensate' */
	public Object visit(ws.bpel.CompensateFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CompensateFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Compensate' */
	public Object visit(ws.bpel.Compensate host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Compensate finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Compensate", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Source' */
	public Object visit(ws.bpel.SourceFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.SourceFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Source' */
	public Object visit(ws.bpel.Source host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Source finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'transitionCondition' ---
		//--- Add labels ---
		addLabels("transitionCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "transitionCondition", host.getTransitionCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'link' ---
		//--- Add labels ---
		addLabels("link", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "link", host.getLink(), rep, "ws.bpel.Link", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Source", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Correlation' */
	public Object visit(ws.bpel.CorrelationFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CorrelationFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Correlation' */
	public Object visit(ws.bpel.Correlation host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Correlation finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'initiate' ---
		//--- Add labels ---
		addLabels("initiate", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "initiate", host.getInitiate(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'pattern' ---
		//--- Add labels ---
		addLabels("pattern", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "pattern", host.getPattern(), rep, "ws.bpel.CorrelationPattern", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'set' ---
		//--- Add labels ---
		addLabels("set", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "set", host.getSet(), rep, "ws.bpel.CorrelationSet", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Correlation", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Link' */
	public Object visit(ws.bpel.LinkFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.LinkFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Link' */
	public Object visit(ws.bpel.Link host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Link finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'target' ---
		//--- Add labels ---
		addLabels("target", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "target", host.getTarget(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'source' ---
		//--- Add labels ---
		addLabels("source", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "source", host.getSource(), rep, "ws.bpel.Source", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Link", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.StructuredActivity' */
	public Object visit(ws.bpel.StructuredActivity host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.StructuredActivity finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.StructuredActivity", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.PartnerLink' */
	public Object visit(ws.bpel.PartnerLinkFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PartnerLinkFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.PartnerLink' */
	public Object visit(ws.bpel.PartnerLink host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.PartnerLink finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'businessProcess' ---
		//--- Add labels ---
		addLabels("businessProcess", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "businessProcess", host.getBusinessProcess(), rep, "ws.bpel.BusinessProcess", editPanel, c, line, frame);
		//--- Add association 'partnerRole' ---
		//--- Add labels ---
		addLabels("partnerRole", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerRole", host.getPartnerRole(), rep, "ws.bpel.Role", editPanel, c, line, frame);
		//--- Add association 'partner' ---
		//--- Add labels ---
		addLabels("partner", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partner", host.getPartner(), rep, "ws.bpel.Partner", editPanel, c, line, frame);
		//--- Add association 'fromPartnerLink' ---
		//--- Add labels ---
		addLabels("fromPartnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "fromPartnerLink", host.getFromPartnerLink(), rep, "ws.bpel.FromPartnerLink", editPanel, c, line, frame);
		//--- Add association 'toPartnerLink' ---
		//--- Add labels ---
		addLabels("toPartnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "toPartnerLink", host.getToPartnerLink(), rep, "ws.bpel.ToPartnerLink", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'partnerLinkType' ---
		//--- Add labels ---
		addLabels("partnerLinkType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLinkType", host.getPartnerLinkType(), rep, "ws.bpel.PartnerLinkType", editPanel, c, line, frame);
		//--- Add association 'linkRole' ---
		//--- Add labels ---
		addLabels("linkRole", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "linkRole", host.getLinkRole(), rep, "ws.bpel.Role", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.PartnerLink", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.PartnerLinkType' */
	public Object visit(ws.bpel.PartnerLinkTypeFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PartnerLinkTypeFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.PartnerLinkType' */
	public Object visit(ws.bpel.PartnerLinkType host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.PartnerLinkType finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'role' ---
		//--- Add labels ---
		addLabels("role", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "role", host.getRole(), rep, "ws.bpel.Role", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.PartnerLinkType", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Role' */
	public Object visit(ws.bpel.RoleFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.RoleFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Role' */
	public Object visit(ws.bpel.Role host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Role finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerLinkType' ---
		//--- Add labels ---
		addLabels("partnerLinkType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLinkType", host.getPartnerLinkType(), rep, "ws.bpel.PartnerLinkType", editPanel, c, line, frame);
		//--- Add association 'partner' ---
		//--- Add labels ---
		addLabels("partner", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partner", host.getPartner(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Role", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Copy' */
	public Object visit(ws.bpel.CopyFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CopyFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Copy' */
	public Object visit(ws.bpel.Copy host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Copy finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'assign' ---
		//--- Add labels ---
		addLabels("assign", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "assign", host.getAssign(), rep, "ws.bpel.Assign", editPanel, c, line, frame);
		//--- Add association 'fromSpec' ---
		//--- Add labels ---
		addLabels("fromSpec", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "fromSpec", host.getFromSpec(), rep, "ws.bpel.FromSpec", editPanel, c, line, frame);
		//--- Add association 'toSpec' ---
		//--- Add labels ---
		addLabels("toSpec", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "toSpec", host.getToSpec(), rep, "ws.bpel.ToSpec", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Copy", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.FromSpec' */
	public Object visit(ws.bpel.FromSpec host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FromSpec finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FromSpec", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.ToSpec' */
	public Object visit(ws.bpel.ToSpec host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.ToSpec finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.ToSpec", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.VariableSpec' */
	public Object visit(ws.bpel.VariableSpec host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.VariableSpec finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'part' ---
		//--- Add labels ---
		addLabels("part", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "part", host.getPart(), rep, "ws.bpel.Part", editPanel, c, line, frame);
		//--- Add association 'property' ---
		//--- Add labels ---
		addLabels("property", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "property", host.getProperty(), rep, "ws.bpel.Property", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.VariableSpec", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.FromPartnerLink' */
	public Object visit(ws.bpel.FromPartnerLinkFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FromPartnerLinkFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.FromPartnerLink' */
	public Object visit(ws.bpel.FromPartnerLink host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FromPartnerLink finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);
		//--- Add attribute 'endPointReference' ---
		//--- Add labels ---
		addLabels("endPointReference", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "endPointReference", host.getEndPointReference(), rep, "ws.bpel.EndPointReference", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FromPartnerLink", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.FromExpression' */
	public Object visit(ws.bpel.FromExpressionFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FromExpressionFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.FromExpression' */
	public Object visit(ws.bpel.FromExpression host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FromExpression finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);
		//--- Add attribute 'expression' ---
		//--- Add labels ---
		addLabels("expression", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "expression", host.getExpression(), rep, "String", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FromExpression", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.ToVariable' */
	public Object visit(ws.bpel.ToVariableFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ToVariableFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.ToVariable' */
	public Object visit(ws.bpel.ToVariable host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.ToVariable finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'part' ---
		//--- Add labels ---
		addLabels("part", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "part", host.getPart(), rep, "ws.bpel.Part", editPanel, c, line, frame);
		//--- Add association 'property' ---
		//--- Add labels ---
		addLabels("property", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "property", host.getProperty(), rep, "ws.bpel.Property", editPanel, c, line, frame);
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.ToVariable", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Property' */
	public Object visit(ws.bpel.PropertyFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PropertyFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Property' */
	public Object visit(ws.bpel.Property host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Property finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variableSpec' ---
		//--- Add labels ---
		addLabels("variableSpec", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variableSpec", host.getVariableSpec(), rep, "ws.bpel.VariableSpec", editPanel, c, line, frame);
		//--- Add association 'correlationSet' ---
		//--- Add labels ---
		addLabels("correlationSet", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlationSet", host.getCorrelationSet(), rep, "ws.bpel.CorrelationSet", editPanel, c, line, frame);
		//--- Add association 'propertyAlias' ---
		//--- Add labels ---
		addLabels("propertyAlias", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "propertyAlias", host.getPropertyAlias(), rep, "ws.bpel.PropertyAlias", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Property", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Part' */
	public Object visit(ws.bpel.PartFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PartFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Part' */
	public Object visit(ws.bpel.Part host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Part finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'variableSpec' ---
		//--- Add labels ---
		addLabels("variableSpec", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variableSpec", host.getVariableSpec(), rep, "ws.bpel.VariableSpec", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Part", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.FromLiteral' */
	public Object visit(ws.bpel.FromLiteralFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FromLiteralFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.FromLiteral' */
	public Object visit(ws.bpel.FromLiteral host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FromLiteral finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);
		//--- Add attribute 'value' ---
		//--- Add labels ---
		addLabels("value", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "value", host.getValue(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'type' ---
		//--- Add labels ---
		addLabels("type", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "type", host.getType(), rep, "String", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FromLiteral", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.ToPartnerLink' */
	public Object visit(ws.bpel.ToPartnerLinkFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ToPartnerLinkFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.ToPartnerLink' */
	public Object visit(ws.bpel.ToPartnerLink host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.ToPartnerLink finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.ToPartnerLink", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.FromVariable' */
	public Object visit(ws.bpel.FromVariableFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.FromVariableFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.FromVariable' */
	public Object visit(ws.bpel.FromVariable host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.FromVariable finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'part' ---
		//--- Add labels ---
		addLabels("part", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "part", host.getPart(), rep, "ws.bpel.Part", editPanel, c, line, frame);
		//--- Add association 'property' ---
		//--- Add labels ---
		addLabels("property", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "property", host.getProperty(), rep, "ws.bpel.Property", editPanel, c, line, frame);
		//--- Add association 'copy' ---
		//--- Add labels ---
		addLabels("copy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "copy", host.getCopy(), rep, "ws.bpel.Copy", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.FromVariable", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.BooleanExpression' */
	public Object visit(ws.bpel.BooleanExpressionFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.BooleanExpressionFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.BooleanExpression' */
	public Object visit(ws.bpel.BooleanExpression host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.BooleanExpression finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'wait' ---
		//--- Add labels ---
		addLabels("wait", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "wait", host.getWait(), rep, "ws.bpel.Wait", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'onAlarm' ---
		//--- Add labels ---
		addLabels("onAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "onAlarm", host.getOnAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.BooleanExpression", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.PartnerActivity' */
	public Object visit(ws.bpel.PartnerActivity host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.PartnerActivity finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);
		//--- Add association 'correlations' ---
		//--- Add labels ---
		addLabels("correlations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "correlations", host.getCorrelations(), rep, "ws.bpel.Correlation", editPanel, c, line, frame);
		//--- Add association 'partnerLink' ---
		//--- Add labels ---
		addLabels("partnerLink", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerLink", host.getPartnerLink(), rep, "ws.bpel.PartnerLink", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.PartnerActivity", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Expression' */
	public Object visit(ws.bpel.ExpressionFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.ExpressionFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Expression' */
	public Object visit(ws.bpel.Expression host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Expression finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'wait' ---
		//--- Add labels ---
		addLabels("wait", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "wait", host.getWait(), rep, "ws.bpel.Wait", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Expression", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Case' */
	public Object visit(ws.bpel.CaseFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CaseFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Case' */
	public Object visit(ws.bpel.Case host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Case finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'body' ---
		//--- Add labels ---
		addLabels("body", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "body", host.getBody(), rep, "ws.bpel.Activity", editPanel, c, line, frame);
		//--- Add association 'condition' ---
		//--- Add labels ---
		addLabels("condition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "condition", host.getCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Case", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.PropertyAlias' */
	public Object visit(ws.bpel.PropertyAliasFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.PropertyAliasFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.PropertyAlias' */
	public Object visit(ws.bpel.PropertyAlias host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.PropertyAlias finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'query' ---
		//--- Add labels ---
		addLabels("query", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "query", host.getQuery(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'property' ---
		//--- Add labels ---
		addLabels("property", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "property", host.getProperty(), rep, "ws.bpel.Property", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.PropertyAlias", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.Target' */
	public Object visit(ws.bpel.TargetFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.TargetFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.Target' */
	public Object visit(ws.bpel.Target host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.Target finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'link' ---
		//--- Add labels ---
		addLabels("link", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "link", host.getLink(), rep, "ws.bpel.Link", editPanel, c, line, frame);
		//--- Add association 'activity' ---
		//--- Add labels ---
		addLabels("activity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activity", host.getActivity(), rep, "ws.bpel.Activity", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.Target", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.bpel.BasicActivity' */
	public Object visit(ws.bpel.BasicActivity host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.BasicActivity finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'joinCondition' ---
		//--- Add labels ---
		addLabels("joinCondition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "joinCondition", host.getJoinCondition(), rep, "ws.bpel.BooleanExpression", editPanel, c, line, frame);
		//--- Add attribute 'suppressJoinFailure' ---
		//--- Add labels ---
		addLabels("suppressJoinFailure", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "suppressJoinFailure", host.getSuppressJoinFailure(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'flow' ---
		//--- Add labels ---
		addLabels("flow", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "flow", host.getFlow(), rep, "ws.bpel.Flow", editPanel, c, line, frame);
		//--- Add association 'parent' ---
		//--- Add labels ---
		addLabels("parent", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parent", host.getParent(), rep, "ws.bpel.StructuredActivity", editPanel, c, line, frame);
		//--- Add association 'activitySequence' ---
		//--- Add labels ---
		addLabels("activitySequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activitySequence", host.getActivitySequence(), rep, "ws.bpel.ActivitySequence", editPanel, c, line, frame);
		//--- Add association 'switch_' ---
		//--- Add labels ---
		addLabels("switch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "switch_", host.getSwitch_(), rep, "ws.bpel.Switch", editPanel, c, line, frame);
		//--- Add association 'case_' ---
		//--- Add labels ---
		addLabels("case_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "case_", host.getCase_(), rep, "ws.bpel.Case", editPanel, c, line, frame);
		//--- Add association 'while_' ---
		//--- Add labels ---
		addLabels("while_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "while_", host.getWhile_(), rep, "ws.bpel.While", editPanel, c, line, frame);
		//--- Add association 'scope' ---
		//--- Add labels ---
		addLabels("scope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "scope", host.getScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'compensationScope' ---
		//--- Add labels ---
		addLabels("compensationScope", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compensationScope", host.getCompensationScope(), rep, "ws.bpel.Scope", editPanel, c, line, frame);
		//--- Add association 'activityFaultHandler' ---
		//--- Add labels ---
		addLabels("activityFaultHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityFaultHandler", host.getActivityFaultHandler(), rep, "ws.bpel.FaultHandler", editPanel, c, line, frame);
		//--- Add association 'targetOf' ---
		//--- Add labels ---
		addLabels("targetOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "targetOf", host.getTargetOf(), rep, "ws.bpel.Target", editPanel, c, line, frame);
		//--- Add association 'sourceOf' ---
		//--- Add labels ---
		addLabels("sourceOf", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sourceOf", host.getSourceOf(), rep, "ws.bpel.Source", editPanel, c, line, frame);
		//--- Add association 'activityEventHandler' ---
		//--- Add labels ---
		addLabels("activityEventHandler", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityEventHandler", host.getActivityEventHandler(), rep, "ws.bpel.EventHandler", editPanel, c, line, frame);
		//--- Add association 'activityAlarm' ---
		//--- Add labels ---
		addLabels("activityAlarm", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityAlarm", host.getActivityAlarm(), rep, "ws.bpel.OnAlarm", editPanel, c, line, frame);
		//--- Add association 'activityOnMessage' ---
		//--- Add labels ---
		addLabels("activityOnMessage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "activityOnMessage", host.getActivityOnMessage(), rep, "ws.bpel.OnMessage", editPanel, c, line, frame);
		//--- Add association 'invoke' ---
		//--- Add labels ---
		addLabels("invoke", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "invoke", host.getInvoke(), rep, "ws.bpel.Invoke", editPanel, c, line, frame);
		//--- Add association 'catch_' ---
		//--- Add labels ---
		addLabels("catch_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "catch_", host.getCatch_(), rep, "ws.bpel.Catch", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.BasicActivity", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.CorrelationPattern' */
	public Object visit(ws.bpel.CorrelationPatternFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.CorrelationPatternFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.CorrelationPattern' */
	public Object visit(ws.bpel.CorrelationPattern host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.CorrelationPattern finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.CorrelationPattern", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.DurationKind' */
	public Object visit(ws.bpel.DurationKindFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.DurationKindFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.DurationKind' */
	public Object visit(ws.bpel.DurationKind host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.DurationKind finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.DurationKind", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.bpel.EndPointReference' */
	public Object visit(ws.bpel.EndPointReferenceFactory host, Object data) {
		JFrame frame = new JFrame("ws.bpel.EndPointReferenceFactory");
		return frame;
	}
	/** Visit class for 'ws.bpel.EndPointReference' */
	public Object visit(ws.bpel.EndPointReference host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.bpel.EndPointReference finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.bpel.EndPointReference", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Message' */
	public Object visit(ws.wsdl.MessageFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.MessageFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Message' */
	public Object visit(ws.wsdl.Message host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Message finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'parts' ---
		//--- Add labels ---
		addLabels("parts", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parts", host.getParts(), rep, "ws.wsdl.Part", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Message", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.PortType' */
	public Object visit(ws.wsdl.PortTypeFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.PortTypeFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.PortType' */
	public Object visit(ws.wsdl.PortType host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.PortType finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'operations' ---
		//--- Add labels ---
		addLabels("operations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operations", host.getOperations(), rep, "ws.wsdl.PortTypeOperation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.PortType", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Operation' */
	public Object visit(ws.wsdl.OperationFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.OperationFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Operation' */
	public Object visit(ws.wsdl.Operation host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Operation finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'input' ---
		//--- Add labels ---
		addLabels("input", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "input", host.getInput(), rep, "ws.wsdl.Input", editPanel, c, line, frame);
		//--- Add association 'output' ---
		//--- Add labels ---
		addLabels("output", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "output", host.getOutput(), rep, "ws.wsdl.Output", editPanel, c, line, frame);
		//--- Add association 'faults' ---
		//--- Add labels ---
		addLabels("faults", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faults", host.getFaults(), rep, "ws.wsdl.Fault", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Operation", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.ExtensibleElement' */
	public Object visit(ws.wsdl.ExtensibleElementFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.ExtensibleElementFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.ExtensibleElement' */
	public Object visit(ws.wsdl.ExtensibleElement host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.ExtensibleElement finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.ExtensibleElement", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Definition' */
	public Object visit(ws.wsdl.DefinitionFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.DefinitionFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Definition' */
	public Object visit(ws.wsdl.Definition host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Definition finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add association 'imports' ---
		//--- Add labels ---
		addLabels("imports", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "imports", host.getImports(), rep, "ws.wsdl.Import", editPanel, c, line, frame);
		//--- Add association 'types' ---
		//--- Add labels ---
		addLabels("types", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "types", host.getTypes(), rep, "ws.xsd.Type", editPanel, c, line, frame);
		//--- Add association 'messages' ---
		//--- Add labels ---
		addLabels("messages", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "messages", host.getMessages(), rep, "ws.wsdl.Message", editPanel, c, line, frame);
		//--- Add association 'bindings' ---
		//--- Add labels ---
		addLabels("bindings", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "bindings", host.getBindings(), rep, "ws.wsdl.Binding", editPanel, c, line, frame);
		//--- Add association 'services' ---
		//--- Add labels ---
		addLabels("services", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "services", host.getServices(), rep, "ws.wsdl.Service", editPanel, c, line, frame);
		//--- Add association 'portTypes' ---
		//--- Add labels ---
		addLabels("portTypes", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portTypes", host.getPortTypes(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Definition", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Import' */
	public Object visit(ws.wsdl.ImportFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.ImportFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Import' */
	public Object visit(ws.wsdl.Import host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Import finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'namespace_' ---
		//--- Add labels ---
		addLabels("namespace_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "namespace_", host.getNamespace_(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'location' ---
		//--- Add labels ---
		addLabels("location", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "location", host.getLocation(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Import", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Binding' */
	public Object visit(ws.wsdl.BindingFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.BindingFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Binding' */
	public Object visit(ws.wsdl.Binding host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Binding finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'operations' ---
		//--- Add labels ---
		addLabels("operations", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operations", host.getOperations(), rep, "ws.wsdl.BindingOperation", editPanel, c, line, frame);
		//--- Add association 'port' ---
		//--- Add labels ---
		addLabels("port", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "port", host.getPort(), rep, "ws.wsdl.Port", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Binding", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Service' */
	public Object visit(ws.wsdl.ServiceFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.ServiceFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Service' */
	public Object visit(ws.wsdl.Service host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Service finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'ports' ---
		//--- Add labels ---
		addLabels("ports", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "ports", host.getPorts(), rep, "ws.wsdl.Port", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Service", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Part' */
	public Object visit(ws.wsdl.PartFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.PartFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Part' */
	public Object visit(ws.wsdl.Part host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Part finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'element' ---
		//--- Add labels ---
		addLabels("element", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "element", host.getElement(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'type' ---
		//--- Add labels ---
		addLabels("type", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "type", host.getType(), rep, "ws.xsd.Type", editPanel, c, line, frame);
		//--- Add association 'message' ---
		//--- Add labels ---
		addLabels("message", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "message", host.getMessage(), rep, "ws.wsdl.Message", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Part", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.PortTypeOperation' */
	public Object visit(ws.wsdl.PortTypeOperationFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.PortTypeOperationFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.PortTypeOperation' */
	public Object visit(ws.wsdl.PortTypeOperation host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.PortTypeOperation finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'input' ---
		//--- Add labels ---
		addLabels("input", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "input", host.getInput(), rep, "ws.wsdl.Input", editPanel, c, line, frame);
		//--- Add association 'output' ---
		//--- Add labels ---
		addLabels("output", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "output", host.getOutput(), rep, "ws.wsdl.Output", editPanel, c, line, frame);
		//--- Add association 'faults' ---
		//--- Add labels ---
		addLabels("faults", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faults", host.getFaults(), rep, "ws.wsdl.Fault", editPanel, c, line, frame);
		//--- Add association 'portType' ---
		//--- Add labels ---
		addLabels("portType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "portType", host.getPortType(), rep, "ws.wsdl.PortType", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.PortTypeOperation", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.BindingOperation' */
	public Object visit(ws.wsdl.BindingOperationFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.BindingOperationFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.BindingOperation' */
	public Object visit(ws.wsdl.BindingOperation host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.BindingOperation finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'partnerActivity' ---
		//--- Add labels ---
		addLabels("partnerActivity", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "partnerActivity", host.getPartnerActivity(), rep, "ws.bpel.PartnerActivity", editPanel, c, line, frame);
		//--- Add association 'input' ---
		//--- Add labels ---
		addLabels("input", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "input", host.getInput(), rep, "ws.wsdl.Input", editPanel, c, line, frame);
		//--- Add association 'output' ---
		//--- Add labels ---
		addLabels("output", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "output", host.getOutput(), rep, "ws.wsdl.Output", editPanel, c, line, frame);
		//--- Add association 'faults' ---
		//--- Add labels ---
		addLabels("faults", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "faults", host.getFaults(), rep, "ws.wsdl.Fault", editPanel, c, line, frame);
		//--- Add association 'binding' ---
		//--- Add labels ---
		addLabels("binding", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "binding", host.getBinding(), rep, "ws.wsdl.Binding", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.BindingOperation", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Port' */
	public Object visit(ws.wsdl.PortFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.PortFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Port' */
	public Object visit(ws.wsdl.Port host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Port finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'service' ---
		//--- Add labels ---
		addLabels("service", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "service", host.getService(), rep, "ws.wsdl.Service", editPanel, c, line, frame);
		//--- Add association 'binding' ---
		//--- Add labels ---
		addLabels("binding", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "binding", host.getBinding(), rep, "ws.wsdl.Binding", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Port", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Input' */
	public Object visit(ws.wsdl.InputFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.InputFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Input' */
	public Object visit(ws.wsdl.Input host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Input finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'message' ---
		//--- Add labels ---
		addLabels("message", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "message", host.getMessage(), rep, "ws.wsdl.Message", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Input", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Output' */
	public Object visit(ws.wsdl.OutputFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.OutputFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Output' */
	public Object visit(ws.wsdl.Output host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Output finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'message' ---
		//--- Add labels ---
		addLabels("message", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "message", host.getMessage(), rep, "ws.wsdl.Message", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Output", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Fault' */
	public Object visit(ws.wsdl.FaultFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.FaultFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Fault' */
	public Object visit(ws.wsdl.Fault host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Fault finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'message' ---
		//--- Add labels ---
		addLabels("message", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "message", host.getMessage(), rep, "ws.wsdl.Message", editPanel, c, line, frame);
		//--- Add association 'operation' ---
		//--- Add labels ---
		addLabels("operation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "operation", host.getOperation(), rep, "ws.wsdl.Operation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Fault", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.WSDLElement' */
	public Object visit(ws.wsdl.WSDLElementFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.WSDLElementFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.WSDLElement' */
	public Object visit(ws.wsdl.WSDLElement host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.WSDLElement finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'documentation' ---
		//--- Add labels ---
		addLabels("documentation", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "documentation", host.getDocumentation(), rep, "ws.wsdl.Documentation", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.WSDLElement", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.wsdl.Documentation' */
	public Object visit(ws.wsdl.DocumentationFactory host, Object data) {
		JFrame frame = new JFrame("ws.wsdl.DocumentationFactory");
		return frame;
	}
	/** Visit class for 'ws.wsdl.Documentation' */
	public Object visit(ws.wsdl.Documentation host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.wsdl.Documentation finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'text' ---
		//--- Add labels ---
		addLabels("text", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "text", host.getText(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'wSDLElement' ---
		//--- Add labels ---
		addLabels("wSDLElement", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "wSDLElement", host.getWSDLElement(), rep, "ws.wsdl.WSDLElement", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.wsdl.Documentation", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.xsd.SimpleType' */
	public Object visit(ws.xsd.SimpleTypeFactory host, Object data) {
		JFrame frame = new JFrame("ws.xsd.SimpleTypeFactory");
		return frame;
	}
	/** Visit class for 'ws.xsd.SimpleType' */
	public Object visit(ws.xsd.SimpleType host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.xsd.SimpleType finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'attribute' ---
		//--- Add labels ---
		addLabels("attribute", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "attribute", host.getAttribute(), rep, "ws.xsd.Attribute", editPanel, c, line, frame);
		//--- Add association 'variable' ---

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.xsd.SimpleType", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.xsd.Element' */
	public Object visit(ws.xsd.ElementFactory host, Object data) {
		JFrame frame = new JFrame("ws.xsd.ElementFactory");
		return frame;
	}
	/** Visit class for 'ws.xsd.Element' */
	public Object visit(ws.xsd.Element host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.xsd.Element finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.xsd.Element", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'ws.xsd.Type' */
	public Object visit(ws.xsd.Type host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.xsd.Type finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'attribute' ---
		//--- Add labels ---
		addLabels("attribute", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "attribute", host.getAttribute(), rep, "ws.xsd.Attribute", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.xsd.Type", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.xsd.ComplexType' */
	public Object visit(ws.xsd.ComplexTypeFactory host, Object data) {
		JFrame frame = new JFrame("ws.xsd.ComplexTypeFactory");
		return frame;
	}
	/** Visit class for 'ws.xsd.ComplexType' */
	public Object visit(ws.xsd.ComplexType host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.xsd.ComplexType finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'definition' ---
		//--- Add labels ---
		addLabels("definition", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "definition", host.getDefinition(), rep, "ws.wsdl.Definition", editPanel, c, line, frame);
		//--- Add association 'attribute' ---
		//--- Add labels ---
		addLabels("attribute", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "attribute", host.getAttribute(), rep, "ws.xsd.Attribute", editPanel, c, line, frame);
		//--- Add association 'sequence' ---
		//--- Add labels ---
		addLabels("sequence", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sequence", host.getSequence(), rep, "ws.xsd.Attribute", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.xsd.ComplexType", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'ws.xsd.Attribute' */
	public Object visit(ws.xsd.AttributeFactory host, Object data) {
		JFrame frame = new JFrame("ws.xsd.AttributeFactory");
		return frame;
	}
	/** Visit class for 'ws.xsd.Attribute' */
	public Object visit(ws.xsd.Attribute host, Object data) {
		//--- Get the repository ---
		final ws.repository.WsRepository rep = (ws.repository.WsRepository)data;

		//--- Make a final copy of host ---
		final ws.xsd.Attribute finalHost = host;

		//--- Frame settings ---
		final WsViewEditFrame$Class frame = new WsViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'variable' ---
		//--- Add labels ---
		addLabels("variable", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "variable", host.getVariable(), rep, "ws.bpel.Variable", editPanel, c, line, frame);
		//--- Add association 'complexType' ---
		//--- Add labels ---
		addLabels("complexType", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "complexType", host.getComplexType(), rep, "ws.xsd.ComplexType", editPanel, c, line, frame);
		//--- Add association 'type' ---
		//--- Add labels ---
		addLabels("type", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "type", host.getType(), rep, "ws.xsd.Type", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("ws.xsd.Attribute", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}

	//--- Create EVALUATE panel ---
	protected JPanel createEvalPanel(final String classPathName, final Object finalHost) {
		JPanel evalPanel = new JPanel();
		evalPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		evalPanel.setLayout(new BoxLayout(evalPanel, BoxLayout.Y_AXIS) );
		//--- Create INPUT ---
		final JTextArea expressionText = new JTextArea();
		expressionText.setRows(5);
		expressionText.setLineWrap(true);
		//--- Create OUTPUT ---
		final ILog evaluationText = new ConsoleLog();
		((JTextArea)evaluationText).setRows(5);
		((JTextArea)evaluationText).setLineWrap(true);
		//--- Create EVALUATE BUTTON ---
		JButton evaluateButton = new JButton(new AbstractAction("Evaluate") {
			public void actionPerformed(ActionEvent e) {
				try {
					String constraint = expressionText.getText();
					if (!constraint.startsWith("context ")) constraint = "context "+classPathName.replaceAll("[.]", "::")+" inv: "+ constraint;
					java.util.List result = oclProcessor.evaluate(constraint, finalHost, evaluationText);
					evaluationText.reportMessage(result.get(0).toString());
				} catch(Exception e1) {
					evaluationText.reportMessage("undefined");
				}
			}
		});
		evaluateButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add INPUT, EVALUATE BUTTON, and OUTPUT ---
		evalPanel.add(new JScrollPane(expressionText, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		evalPanel.add(evaluateButton);
		evalPanel.add(new JScrollPane(((JTextArea)evaluationText), JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		return evalPanel;
	}

	//--- Create REFRESH panel ---
	protected JPanel createRefreshPanel(final WsViewEditFrame$Class frame) {
		JPanel refreshPanel = new JPanel();
		refreshPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		refreshPanel.setLayout(new BoxLayout(refreshPanel, BoxLayout.Y_AXIS) );
		//--- Create REFRESH BUTTON ---
		JButton refreshButton = new JButton(new AbstractAction("Refresh") {
			public void actionPerformed(ActionEvent e) {
				frame.refreshAction();
			}
		});
		refreshButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add REFRESH BUTTON ---
		refreshPanel.add(refreshButton);
		return refreshPanel;
	}
		//--- Add EDIT, EVALUATE, and REFRESH panels ---
	protected void addPanels(final WsViewEditFrame$Class frame, JPanel refreshPanel, JPanel editPanel, JPanel evalPanel) {
		frame.getContentPane().add(new JScrollPane(refreshPanel), BorderLayout.NORTH);
		frame.getContentPane().add(new JScrollPane(editPanel), BorderLayout.CENTER);
		frame.getContentPane().add(new JScrollPane(evalPanel), BorderLayout.SOUTH);
		frame.pack();
	}
	//--- Set the grid ---
	void setGrid() {
	}

	//--- Add labels name and = ---
	protected void addLabels(String name, JPanel editPanel, GridBagConstraints c, int line) {
		//--- Add property name to panel ---
		JLabel label = new JLabel(name);
		label.setBorder(border);
		c.gridx = 0;
		c.gridy = line;
		c.ipadx = 5;
		c.ipady = 5;
		c.weightx = 0.0;
		c.weighty = 0.0;
		editPanel.add(label, c);
		//--- Add = to panel---
		label = new JLabel(" = ");
		c.gridx = 1;
		label.setBorder(border);
		editPanel.add(label, c);
	}
	//--- Add SWING components for a primitive field ---
	protected void addJs4Primitive(final Object finalHost, final String name, final Object value, ws.repository.WsRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, WsViewEditFrame$Class refreshFrame) {
		//--- Add VALUE to panel ---
		final JTextField textField = new JTextField(value == null ? "null" : value.toString(), 20);
		textField.setFont(font);
		textField.setPreferredSize(fieldSize);
		textField.setEditable(false);
		c.gridx = 2;
		editPanel.add(textField, c);
		//--- Store refresh info ---
		refreshFrame.getPrimitiveContainers().add(textField);
		refreshFrame.getPrimitiveNames().add(name);
	}
		//--- Add SWING components for a collection field ---
	protected void addJs4Collection(String name, final Object value, ws.repository.WsRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, WsViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		Collection col = (java.util.Collection)value;
		Iterator it = col.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			objects1.add(obj);
		}
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(listSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getCollectionContainers().add(list1);
		frame.getCollectionNames().add(name);
	}
		//--- Add SWING components for a user field ---
	protected void addJs4User(final Object finalHost, final String name, final Object value, ws.repository.WsRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, WsViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		objects1.add(value);
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		list1.setVisibleRowCount(1);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(fieldSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getUserContainers().add(list1);
		frame.getUserNames().add(name);
}
	//--- Look settings ---
	final EmptyBorder border = new EmptyBorder(new Insets(0, 0, 0, 10));
	final Font font = ws.repository.WsBrowser$Class.font;
	final Dimension listSize = ws.repository.WsBrowser$Class.listSize;
	final Dimension fieldSize = ws.repository.WsBrowser$Class.fieldSize;;
}
