/**
 *
 *  Class WsRepository$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 13:29:40
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ws.repository;

import java.io.*;
import java.util.*;
import javax.swing.tree.*;
import uk.ac.kent.cs.kmf.xmi.*;

import ws.*;

public class WsRepository$Class
	extends uk.ac.kent.cs.kmf.common.RepositoryImpl
	implements WsRepository
{
	/** Default repository constructor */
	public WsRepository$Class() {
		setLog(new uk.ac.kent.cs.kmf.util.FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public WsRepository$Class(uk.ac.kent.cs.kmf.util.ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init ws repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.BusinessProcess'");
		factories.put("ws.bpel.BusinessProcess", new ws.bpel.BusinessProcessFactory$Class(this));
		population.put("ws.bpel.BusinessProcess", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Partner'");
		factories.put("ws.bpel.Partner", new ws.bpel.PartnerFactory$Class(this));
		population.put("ws.bpel.Partner", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Variable'");
		factories.put("ws.bpel.Variable", new ws.bpel.VariableFactory$Class(this));
		population.put("ws.bpel.Variable", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.CorrelationSet'");
		factories.put("ws.bpel.CorrelationSet", new ws.bpel.CorrelationSetFactory$Class(this));
		population.put("ws.bpel.CorrelationSet", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FaultHandler'");
		factories.put("ws.bpel.FaultHandler", new ws.bpel.FaultHandlerFactory$Class(this));
		population.put("ws.bpel.FaultHandler", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Activity'");
		population.put("ws.bpel.Activity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.EventHandler'");
		factories.put("ws.bpel.EventHandler", new ws.bpel.EventHandlerFactory$Class(this));
		population.put("ws.bpel.EventHandler", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Catch'");
		factories.put("ws.bpel.Catch", new ws.bpel.CatchFactory$Class(this));
		population.put("ws.bpel.Catch", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.OnMessage'");
		factories.put("ws.bpel.OnMessage", new ws.bpel.OnMessageFactory$Class(this));
		population.put("ws.bpel.OnMessage", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.OnAlarm'");
		factories.put("ws.bpel.OnAlarm", new ws.bpel.OnAlarmFactory$Class(this));
		population.put("ws.bpel.OnAlarm", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Receive'");
		factories.put("ws.bpel.Receive", new ws.bpel.ReceiveFactory$Class(this));
		population.put("ws.bpel.Receive", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Reply'");
		factories.put("ws.bpel.Reply", new ws.bpel.ReplyFactory$Class(this));
		population.put("ws.bpel.Reply", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Invoke'");
		factories.put("ws.bpel.Invoke", new ws.bpel.InvokeFactory$Class(this));
		population.put("ws.bpel.Invoke", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Assign'");
		factories.put("ws.bpel.Assign", new ws.bpel.AssignFactory$Class(this));
		population.put("ws.bpel.Assign", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Throw'");
		factories.put("ws.bpel.Throw", new ws.bpel.ThrowFactory$Class(this));
		population.put("ws.bpel.Throw", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Terminate'");
		factories.put("ws.bpel.Terminate", new ws.bpel.TerminateFactory$Class(this));
		population.put("ws.bpel.Terminate", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Wait'");
		factories.put("ws.bpel.Wait", new ws.bpel.WaitFactory$Class(this));
		population.put("ws.bpel.Wait", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Empty'");
		factories.put("ws.bpel.Empty", new ws.bpel.EmptyFactory$Class(this));
		population.put("ws.bpel.Empty", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.ActivitySequence'");
		factories.put("ws.bpel.ActivitySequence", new ws.bpel.ActivitySequenceFactory$Class(this));
		population.put("ws.bpel.ActivitySequence", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Switch'");
		factories.put("ws.bpel.Switch", new ws.bpel.SwitchFactory$Class(this));
		population.put("ws.bpel.Switch", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.While'");
		factories.put("ws.bpel.While", new ws.bpel.WhileFactory$Class(this));
		population.put("ws.bpel.While", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Pick'");
		factories.put("ws.bpel.Pick", new ws.bpel.PickFactory$Class(this));
		population.put("ws.bpel.Pick", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Flow'");
		factories.put("ws.bpel.Flow", new ws.bpel.FlowFactory$Class(this));
		population.put("ws.bpel.Flow", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Scope'");
		factories.put("ws.bpel.Scope", new ws.bpel.ScopeFactory$Class(this));
		population.put("ws.bpel.Scope", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Compensate'");
		factories.put("ws.bpel.Compensate", new ws.bpel.CompensateFactory$Class(this));
		population.put("ws.bpel.Compensate", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Source'");
		factories.put("ws.bpel.Source", new ws.bpel.SourceFactory$Class(this));
		population.put("ws.bpel.Source", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Correlation'");
		factories.put("ws.bpel.Correlation", new ws.bpel.CorrelationFactory$Class(this));
		population.put("ws.bpel.Correlation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Link'");
		factories.put("ws.bpel.Link", new ws.bpel.LinkFactory$Class(this));
		population.put("ws.bpel.Link", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.StructuredActivity'");
		population.put("ws.bpel.StructuredActivity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.PartnerLink'");
		factories.put("ws.bpel.PartnerLink", new ws.bpel.PartnerLinkFactory$Class(this));
		population.put("ws.bpel.PartnerLink", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.PartnerLinkType'");
		factories.put("ws.bpel.PartnerLinkType", new ws.bpel.PartnerLinkTypeFactory$Class(this));
		population.put("ws.bpel.PartnerLinkType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Role'");
		factories.put("ws.bpel.Role", new ws.bpel.RoleFactory$Class(this));
		population.put("ws.bpel.Role", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Copy'");
		factories.put("ws.bpel.Copy", new ws.bpel.CopyFactory$Class(this));
		population.put("ws.bpel.Copy", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FromSpec'");
		population.put("ws.bpel.FromSpec", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.ToSpec'");
		population.put("ws.bpel.ToSpec", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.VariableSpec'");
		population.put("ws.bpel.VariableSpec", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FromPartnerLink'");
		factories.put("ws.bpel.FromPartnerLink", new ws.bpel.FromPartnerLinkFactory$Class(this));
		population.put("ws.bpel.FromPartnerLink", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FromExpression'");
		factories.put("ws.bpel.FromExpression", new ws.bpel.FromExpressionFactory$Class(this));
		population.put("ws.bpel.FromExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.ToVariable'");
		factories.put("ws.bpel.ToVariable", new ws.bpel.ToVariableFactory$Class(this));
		population.put("ws.bpel.ToVariable", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Property'");
		factories.put("ws.bpel.Property", new ws.bpel.PropertyFactory$Class(this));
		population.put("ws.bpel.Property", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Part'");
		factories.put("ws.bpel.Part", new ws.bpel.PartFactory$Class(this));
		population.put("ws.bpel.Part", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FromLiteral'");
		factories.put("ws.bpel.FromLiteral", new ws.bpel.FromLiteralFactory$Class(this));
		population.put("ws.bpel.FromLiteral", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.ToPartnerLink'");
		factories.put("ws.bpel.ToPartnerLink", new ws.bpel.ToPartnerLinkFactory$Class(this));
		population.put("ws.bpel.ToPartnerLink", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.FromVariable'");
		factories.put("ws.bpel.FromVariable", new ws.bpel.FromVariableFactory$Class(this));
		population.put("ws.bpel.FromVariable", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.BooleanExpression'");
		factories.put("ws.bpel.BooleanExpression", new ws.bpel.BooleanExpressionFactory$Class(this));
		population.put("ws.bpel.BooleanExpression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.PartnerActivity'");
		population.put("ws.bpel.PartnerActivity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Expression'");
		factories.put("ws.bpel.Expression", new ws.bpel.ExpressionFactory$Class(this));
		population.put("ws.bpel.Expression", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Case'");
		factories.put("ws.bpel.Case", new ws.bpel.CaseFactory$Class(this));
		population.put("ws.bpel.Case", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.PropertyAlias'");
		factories.put("ws.bpel.PropertyAlias", new ws.bpel.PropertyAliasFactory$Class(this));
		population.put("ws.bpel.PropertyAlias", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.Target'");
		factories.put("ws.bpel.Target", new ws.bpel.TargetFactory$Class(this));
		population.put("ws.bpel.Target", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.BasicActivity'");
		population.put("ws.bpel.BasicActivity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.CorrelationPattern'");
		factories.put("ws.bpel.CorrelationPattern", new ws.bpel.CorrelationPatternFactory$Class(this));
		population.put("ws.bpel.CorrelationPattern", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.DurationKind'");
		factories.put("ws.bpel.DurationKind", new ws.bpel.DurationKindFactory$Class(this));
		population.put("ws.bpel.DurationKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.bpel.EndPointReference'");
		factories.put("ws.bpel.EndPointReference", new ws.bpel.EndPointReferenceFactory$Class(this));
		population.put("ws.bpel.EndPointReference", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Message'");
		factories.put("ws.wsdl.Message", new ws.wsdl.MessageFactory$Class(this));
		population.put("ws.wsdl.Message", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.PortType'");
		factories.put("ws.wsdl.PortType", new ws.wsdl.PortTypeFactory$Class(this));
		population.put("ws.wsdl.PortType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Operation'");
		factories.put("ws.wsdl.Operation", new ws.wsdl.OperationFactory$Class(this));
		population.put("ws.wsdl.Operation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.ExtensibleElement'");
		factories.put("ws.wsdl.ExtensibleElement", new ws.wsdl.ExtensibleElementFactory$Class(this));
		population.put("ws.wsdl.ExtensibleElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Definition'");
		factories.put("ws.wsdl.Definition", new ws.wsdl.DefinitionFactory$Class(this));
		population.put("ws.wsdl.Definition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Import'");
		factories.put("ws.wsdl.Import", new ws.wsdl.ImportFactory$Class(this));
		population.put("ws.wsdl.Import", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Binding'");
		factories.put("ws.wsdl.Binding", new ws.wsdl.BindingFactory$Class(this));
		population.put("ws.wsdl.Binding", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Service'");
		factories.put("ws.wsdl.Service", new ws.wsdl.ServiceFactory$Class(this));
		population.put("ws.wsdl.Service", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Part'");
		factories.put("ws.wsdl.Part", new ws.wsdl.PartFactory$Class(this));
		population.put("ws.wsdl.Part", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.PortTypeOperation'");
		factories.put("ws.wsdl.PortTypeOperation", new ws.wsdl.PortTypeOperationFactory$Class(this));
		population.put("ws.wsdl.PortTypeOperation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.BindingOperation'");
		factories.put("ws.wsdl.BindingOperation", new ws.wsdl.BindingOperationFactory$Class(this));
		population.put("ws.wsdl.BindingOperation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Port'");
		factories.put("ws.wsdl.Port", new ws.wsdl.PortFactory$Class(this));
		population.put("ws.wsdl.Port", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Input'");
		factories.put("ws.wsdl.Input", new ws.wsdl.InputFactory$Class(this));
		population.put("ws.wsdl.Input", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Output'");
		factories.put("ws.wsdl.Output", new ws.wsdl.OutputFactory$Class(this));
		population.put("ws.wsdl.Output", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Fault'");
		factories.put("ws.wsdl.Fault", new ws.wsdl.FaultFactory$Class(this));
		population.put("ws.wsdl.Fault", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.WSDLElement'");
		factories.put("ws.wsdl.WSDLElement", new ws.wsdl.WSDLElementFactory$Class(this));
		population.put("ws.wsdl.WSDLElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.wsdl.Documentation'");
		factories.put("ws.wsdl.Documentation", new ws.wsdl.DocumentationFactory$Class(this));
		population.put("ws.wsdl.Documentation", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.xsd.SimpleType'");
		factories.put("ws.xsd.SimpleType", new ws.xsd.SimpleTypeFactory$Class(this));
		population.put("ws.xsd.SimpleType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.xsd.Element'");
		factories.put("ws.xsd.Element", new ws.xsd.ElementFactory$Class(this));
		population.put("ws.xsd.Element", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.xsd.Type'");
		population.put("ws.xsd.Type", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.xsd.ComplexType'");
		factories.put("ws.xsd.ComplexType", new ws.xsd.ComplexTypeFactory$Class(this));
		population.put("ws.xsd.ComplexType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'ws.xsd.Attribute'");
		factories.put("ws.xsd.Attribute", new ws.xsd.AttributeFactory$Class(this));
		population.put("ws.xsd.Attribute", new Vector());
	}

	//--- MODEL NAME ---
	protected String modelName = "ws";
	public String getModelName() {
		return modelName;
	}

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			WsFactory factory = (WsFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}
	/** Get all instances from population */
	public List getAllElements() {
		List res = new ArrayList();
		Iterator i = population.keySet().iterator();
		while (i.hasNext()) {
			String key = (String)i.next();
			res.addAll((Collection)population.get(key));
		}
		return res;
	}
	/** Get the entire population */
	public Map getPopulation() {
		return population;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public ws.WsFactory getFactory(String fullClassName) {
		ws.WsFactory factory = null;
		try {
			factory = (ws.WsFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Get the all factories */
	public Map getFactories() {
		return factories;
	}

	//--- BROWSER ---
	/** Get a description using a JTree */
	public DefaultMutableTreeNode toJTree() {
		//--- Creat the JTree visitor ---
		WsJTreeVisitor jtreeVisitor = new WsJTreeVisitor$Class();
		//--- Init root ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Repository", true);
		DefaultMutableTreeNode factoriesNode = new DefaultMutableTreeNode("Lifecycle", true);
		DefaultMutableTreeNode elementsNode = new DefaultMutableTreeNode("Elements", true);
		root.add(factoriesNode);
		root.add(elementsNode);
		//--- Add every factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String factoryName = (String)i.next();
			WsFactory factory = (WsFactory)factories.get(factoryName);
			DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)factory.accept(jtreeVisitor, new Object());
			factoriesNode.add(factoryNode);
		}
		//--- Add every element ---
		Set elemNames = population.keySet();
		Iterator j = elemNames.iterator();
		while (j.hasNext()) {
			String elemName = (String)j.next();
			//--- Add a node for each class ---
			List elements = (List)population.get(elemName);
			if (elements.size() != 0) {
				DefaultMutableTreeNode elemNode = new DefaultMutableTreeNode("Instances of "+elemName, true);
				Iterator elementIt = elements.iterator();
				while (elementIt.hasNext()) {
					WsElement element = (WsElement)elementIt.next();
					//--- Add a node for each instance ---
					Set visitedElements = new LinkedHashSet();
					visitedElements.add(element);
					DefaultMutableTreeNode instanceNode = (DefaultMutableTreeNode)element.accept(jtreeVisitor, visitedElements);
					elemNode.add(instanceNode);
				}
				elementsNode.add(elemNode);
			}
		}
		return root;
	}

	/** Save the content into an XMI file */
	public void saveXMI(String fileName) {
		//--- Create an XMI file ---
		if (!fileName.toLowerCase().endsWith(".xml")) fileName += ".xml";
		XMIFile xmiFile = new XMIFile(fileName);
		//--- Create an XMI vistor ---
		WsXMIVisitor xmiVisitor = new WsXMIVisitor$Class();
		//--- Create an empty (reference, xmiObject) table  ---
		Map mapRefToXMI = new IdentityHashMap();
		//--- Create the top objects container ---
		Collection topObjs = xmiFile.getTopObjects();
		//--- For each factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String elemName = (String)i.next();
			WsFactory factory = (WsFactory)factories.get(elemName);
			//--- Create the factory ---
			XMIObject xmifactory = (XMIObject)factory.accept(xmiVisitor, mapRefToXMI);
			//--- Add factory to top objects ---
			//--- Compute all the instances created by the factory ---
			List elements = (List)population.get(elemName);
			if (elements == null) continue;
			Iterator j = elements.iterator();
			while (j.hasNext()) {
				WsElement element = (WsElement)j.next();
				//--- Create the XMI element ---
				XMIObject xmiElement = (XMIObject)element.accept(xmiVisitor, mapRefToXMI);
				//--- Add the element to top objects ---
				topObjs.add(xmiElement);
			}
		}
		try {
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new WsFactoryAdapter$Class(this, log));
			//--- Save the elements ---
			IXMIWriter writer = new XMIWriter();
			writer.write(xmiFile, fileName, log);
		} catch (Exception e) {
			log.reportMessage(""+e);
		}
	}
	/** Create a new repository from an XMI file */
	public uk.ac.kent.cs.kmf.common.Repository loadXMI(String fileName) {
		try {
			//--- Create a repository ---
			WsRepository rep = new WsRepository$Class();
			rep.setLog(log);
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new WsFactoryAdapter$Class(rep, log));
			//--- Build the elements ---
			XMIFile xmiFile = (new XMIReader()).read(fileName, log);
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}

	/** Get a HUTN description of the repository */
	public String toHUTN() {
		//--- Create the HUTN visitor ---
		WsHUTNVisitor hutnVisitor = new WsHUTNVisitor$Class();
		//--- Add every factory ---
		String buffer = new String();
		buffer += "WsRepository {\n";
		buffer += "factories\n";
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			buffer += "  "+factoryName+"\n";
		}
		buffer += "\n";
		//--- Add every element ---
		buffer += "Elements\n";
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			buffer += "Instances of "+elemName+"\n";
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				WsElement element = (WsElement)elementIt.next();
				buffer += element.accept(hutnVisitor, new Object());
			}
		}
		buffer += "}\n";
		log.reportMessage(buffer);
		return buffer;
	}
	/** Save the content into a HUTN file */
	public void saveHUTN(String fileName) {
		//--- Open the HUTN file ---
		if (!fileName.toLowerCase().endsWith(".hutn")) fileName += ".hutn";
		PrintWriter out;
		try {
			out = new PrintWriter(new FileWriter(new File(fileName)), true);
		} catch (Exception e) {
			log.reportMessage(""+e);
			return;
		}
		//--- Create the HUTN visitor ---
		WsHUTNVisitor hutnVisitor = new WsHUTNVisitor$Class();
		//--- Add every factory ---
		out.println("WsRepository {");
		out.println("factories");
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			out.println("  "+factoryName);
		}
		out.println();
		//--- Add every element ---
		out.println("Elements");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			out.println("Instances of "+elemName);
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				WsElement element = (WsElement)elementIt.next();
				out.println(element.accept(hutnVisitor, new Object()));
			}
		}
		out.println("}");
		out.close();
	}
	/** Create a new repository from an HUTN file */
	public WsRepository loadHUTN(String fileName) {
		try {
			//--- Create a repository ---
			WsRepository rep = new WsRepository$Class();
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, WsFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}
	/** The factories */
	protected Hashtable factories = new Hashtable();

}
