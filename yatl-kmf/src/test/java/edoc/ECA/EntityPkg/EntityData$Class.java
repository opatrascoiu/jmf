/**
 *
 *  Class EntityData$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.EntityPkg;

public class EntityData$Class
extends
	edoc.ECA.DocumentModel.CompositeData$Class
implements
	EntityData,
    edoc.EdocVisitable
{
	/** Default constructor */
	public EntityData$Class() {
		//--- Set property 'name' from 'PackageContent' ---
		this.name = null;
		//--- Set property 'namespace_' from 'PackageContent' ---
		this.namespace_ = null;
		//--- Set property 'elementImport' from 'PackageContent' ---
		this.elementImport = new java.util.LinkedHashSet();
		//--- Set property 'constraints' from 'DataElement' ---
		this.constraints = new java.util.LinkedHashSet();
		//--- Set property 'attrs' from 'DataElement' ---
		this.attrs = new java.util.Vector();
		//--- Set property 'flowTypeOf' from 'DataElement' ---
		this.flowTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'propertyTypeOf' from 'DataElement' ---
		this.propertyTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'features' from 'CompositeData' ---
		this.features = new java.util.Vector();
		//--- Set property 'superTypes' from 'CompositeData' ---
		this.superTypes = new java.util.Vector();
		//--- Set property 'subTypes' from 'CompositeData' ---
		this.subTypes = new java.util.Vector();
		//--- Set property 'managedBy' from 'CompositeData' ---
		this.managedBy = new java.util.LinkedHashSet();
		//--- Set property 'keys' from 'EntityData' ---
		this.keys = new java.util.LinkedHashSet();
		//--- Set property 'foreignKeys' from 'EntityData' ---
		this.foreignKeys = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public EntityData$Class(String name) {
		//--- Set property 'name' from 'PackageContent' ---
		this.name = name;
		//--- Set property 'namespace_' from 'PackageContent' ---
		this.namespace_ = null;
		//--- Set property 'elementImport' from 'PackageContent' ---
		this.elementImport = new java.util.LinkedHashSet();
		//--- Set property 'constraints' from 'DataElement' ---
		this.constraints = new java.util.LinkedHashSet();
		//--- Set property 'attrs' from 'DataElement' ---
		this.attrs = new java.util.Vector();
		//--- Set property 'flowTypeOf' from 'DataElement' ---
		this.flowTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'propertyTypeOf' from 'DataElement' ---
		this.propertyTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'features' from 'CompositeData' ---
		this.features = new java.util.Vector();
		//--- Set property 'superTypes' from 'CompositeData' ---
		this.superTypes = new java.util.Vector();
		//--- Set property 'subTypes' from 'CompositeData' ---
		this.subTypes = new java.util.Vector();
		//--- Set property 'managedBy' from 'CompositeData' ---
		this.managedBy = new java.util.LinkedHashSet();
		//--- Set property 'keys' from 'EntityData' ---
		this.keys = new java.util.LinkedHashSet();
		//--- Set property 'foreignKeys' from 'EntityData' ---
		this.foreignKeys = new java.util.LinkedHashSet();
	}


	/** Property 'keys' from 'EntityData' */
	protected java.util.Set keys;
	/** Get property 'keys' from 'EntityData' */
	public java.util.Set getKeys() {
		return keys;
	}
	/** Set property 'keys' from 'EntityData' */
	public void setKeys(java.util.Set keys) { 
		this.keys = keys;
	}

	/** Property 'foreignKeys' from 'EntityData' */
	protected java.util.Set foreignKeys;
	/** Get property 'foreignKeys' from 'EntityData' */
	public java.util.Set getForeignKeys() {
		return foreignKeys;
	}
	/** Set property 'foreignKeys' from 'EntityData' */
	public void setForeignKeys(java.util.Set foreignKeys) { 
		this.foreignKeys = foreignKeys;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.EntityPkg.EntityData";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (namespace_ != null)
			this.namespace_.getOwnedElement().remove(this);
		java.util.Iterator elementImportIt = this.elementImport.iterator();
		while (elementImportIt.hasNext()) {
			edoc.ECA.ModelManagement.ElementImport elementImportObj = (edoc.ECA.ModelManagement.ElementImport)elementImportIt.next();
			if (elementImportObj != null)
				elementImportObj.setModelElement(null);
		}
		java.util.Iterator constraintsIt = this.constraints.iterator();
		while (constraintsIt.hasNext()) {
			edoc.ECA.DocumentModel.DataInvariant constraintsObj = (edoc.ECA.DocumentModel.DataInvariant)constraintsIt.next();
			if (constraintsObj != null)
				constraintsObj.setConstrainedElement(null);
		}
		java.util.Iterator attrsIt = this.attrs.iterator();
		while (attrsIt.hasNext()) {
			edoc.ECA.DocumentModel.Attribute attrsObj = (edoc.ECA.DocumentModel.Attribute)attrsIt.next();
			if (attrsObj != null)
				attrsObj.setType(null);
		}
		java.util.Iterator flowTypeOfIt = this.flowTypeOf.iterator();
		while (flowTypeOfIt.hasNext()) {
			edoc.ECA.CCA.FlowPort flowTypeOfObj = (edoc.ECA.CCA.FlowPort)flowTypeOfIt.next();
			if (flowTypeOfObj != null)
				flowTypeOfObj.setType(null);
		}
		java.util.Iterator propertyTypeOfIt = this.propertyTypeOf.iterator();
		while (propertyTypeOfIt.hasNext()) {
			edoc.ECA.CCA.PropertyDefinition propertyTypeOfObj = (edoc.ECA.CCA.PropertyDefinition)propertyTypeOfIt.next();
			if (propertyTypeOfObj != null)
				propertyTypeOfObj.setType(null);
		}
		java.util.Iterator featuresIt = this.features.iterator();
		while (featuresIt.hasNext()) {
			edoc.ECA.DocumentModel.Attribute featuresObj = (edoc.ECA.DocumentModel.Attribute)featuresIt.next();
			if (featuresObj != null)
				featuresObj.setOwner(null);
		}
		java.util.Iterator superTypesIt = this.superTypes.iterator();
		while (superTypesIt.hasNext()) {
			edoc.ECA.DocumentModel.CompositeData superTypesObj = (edoc.ECA.DocumentModel.CompositeData)superTypesIt.next();
			superTypesObj.getSubTypes().remove(this);
			superTypesObj.getSubTypes().remove(this);
		}
		java.util.Iterator subTypesIt = this.subTypes.iterator();
		while (subTypesIt.hasNext()) {
			edoc.ECA.DocumentModel.CompositeData subTypesObj = (edoc.ECA.DocumentModel.CompositeData)subTypesIt.next();
			subTypesObj.getSuperTypes().remove(this);
			subTypesObj.getSuperTypes().remove(this);
		}
		java.util.Iterator managedByIt = this.managedBy.iterator();
		while (managedByIt.hasNext()) {
			edoc.ECA.EntityPkg.DataManager managedByObj = (edoc.ECA.EntityPkg.DataManager)managedByIt.next();
			if (managedByObj != null)
				managedByObj.setManages(null);
		}
		java.util.Iterator keysIt = this.keys.iterator();
		while (keysIt.hasNext()) {
			edoc.ECA.EntityPkg.Key keysObj = (edoc.ECA.EntityPkg.Key)keysIt.next();
			if (keysObj != null)
				keysObj.setOwner(null);
		}
		java.util.Iterator foreignKeysIt = this.foreignKeys.iterator();
		while (foreignKeysIt.hasNext()) {
			edoc.ECA.EntityPkg.ForeignKey foreignKeysObj = (edoc.ECA.EntityPkg.ForeignKey)foreignKeysIt.next();
			if (foreignKeysObj != null)
				foreignKeysObj.setOwner(null);
		}
	}

	/** Clone the object */
	public Object clone() {
		EntityData$Class obj = new EntityData$Class();
		obj.name = name==null ? null : this.name;
		obj.namespace_ = namespace_==null ? null : this.namespace_;
		obj.elementImport = elementImport==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.elementImport).clone();
		obj.constraints = constraints==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.constraints).clone();
		obj.attrs = attrs==null ? null : (java.util.List)((java.util.Vector)this.attrs).clone();
		obj.flowTypeOf = flowTypeOf==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.flowTypeOf).clone();
		obj.propertyTypeOf = propertyTypeOf==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.propertyTypeOf).clone();
		obj.features = features==null ? null : (java.util.List)((java.util.Vector)this.features).clone();
		obj.superTypes = superTypes==null ? null : (java.util.List)((java.util.Vector)this.superTypes).clone();
		obj.subTypes = subTypes==null ? null : (java.util.List)((java.util.Vector)this.subTypes).clone();
		obj.managedBy = managedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.managedBy).clone();
		obj.keys = keys==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.keys).clone();
		obj.foreignKeys = foreignKeys==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.foreignKeys).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.EntityPkg.EntityDataVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
