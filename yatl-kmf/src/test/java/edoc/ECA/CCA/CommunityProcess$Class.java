/**
 *
 *  Class CommunityProcess$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.CCA;

public class CommunityProcess$Class
implements
	CommunityProcess,
    edoc.EdocVisitable
{
	/** Default constructor */
	public CommunityProcess$Class() {
		//--- Set property 'nodes' from 'Choreography' ---
		this.nodes = new java.util.LinkedHashSet();
		//--- Set property 'connections' from 'Choreography' ---
		this.connections = new java.util.LinkedHashSet();
		//--- Set property 'supertype' from 'Choreography' ---
		this.supertype = null;
		//--- Set property 'subtypes' from 'Choreography' ---
		this.subtypes = new java.util.LinkedHashSet();
		//--- Set property 'bindings' from 'Composition' ---
		this.bindings = new java.util.LinkedHashSet();
		//--- Set property 'uses' from 'Composition' ---
		this.uses = new java.util.LinkedHashSet();
	}


	/** Property 'nodes' from 'Choreography' */
	protected java.util.Set nodes;
	/** Get property 'nodes' from 'Choreography' */
	public java.util.Set getNodes() {
		return nodes;
	}
	/** Set property 'nodes' from 'Choreography' */
	public void setNodes(java.util.Set nodes) { 
		this.nodes = nodes;
	}

	/** Property 'connections' from 'Choreography' */
	protected java.util.Set connections;
	/** Get property 'connections' from 'Choreography' */
	public java.util.Set getConnections() {
		return connections;
	}
	/** Set property 'connections' from 'Choreography' */
	public void setConnections(java.util.Set connections) { 
		this.connections = connections;
	}

	/** Property 'supertype' from 'Choreography' */
	protected Choreography supertype;
	/** Get property 'supertype' from 'Choreography' */
	public Choreography getSupertype() {
		return supertype;
	}
	/** Set property 'supertype' from 'Choreography' */
	public void setSupertype(Choreography supertype) { 
		this.supertype = supertype;
	}

	/** Property 'subtypes' from 'Choreography' */
	protected java.util.Set subtypes;
	/** Get property 'subtypes' from 'Choreography' */
	public java.util.Set getSubtypes() {
		return subtypes;
	}
	/** Set property 'subtypes' from 'Choreography' */
	public void setSubtypes(java.util.Set subtypes) { 
		this.subtypes = subtypes;
	}

	/** Property 'bindings' from 'Composition' */
	protected java.util.Set bindings;
	/** Get property 'bindings' from 'Composition' */
	public java.util.Set getBindings() {
		return bindings;
	}
	/** Set property 'bindings' from 'Composition' */
	public void setBindings(java.util.Set bindings) { 
		this.bindings = bindings;
	}

	/** Property 'uses' from 'Composition' */
	protected java.util.Set uses;
	/** Get property 'uses' from 'Composition' */
	public java.util.Set getUses() {
		return uses;
	}
	/** Set property 'uses' from 'Composition' */
	public void setUses(java.util.Set uses) { 
		this.uses = uses;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.CCA.CommunityProcess";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator nodesIt = this.nodes.iterator();
		while (nodesIt.hasNext()) {
			edoc.ECA.CCA.Node nodesObj = (edoc.ECA.CCA.Node)nodesIt.next();
			if (nodesObj != null)
				nodesObj.setOwner(null);
		}
		java.util.Iterator connectionsIt = this.connections.iterator();
		while (connectionsIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition connectionsObj = (edoc.ECA.CCA.AbstractTransition)connectionsIt.next();
			if (connectionsObj != null)
				connectionsObj.setOwner(null);
		}
		if (supertype != null)
			this.supertype.getSubtypes().remove(this);
		java.util.Iterator subtypesIt = this.subtypes.iterator();
		while (subtypesIt.hasNext()) {
			edoc.ECA.CCA.Choreography subtypesObj = (edoc.ECA.CCA.Choreography)subtypesIt.next();
			if (subtypesObj != null)
				subtypesObj.setSupertype(null);
		}
		java.util.Iterator bindingsIt = this.bindings.iterator();
		while (bindingsIt.hasNext()) {
			edoc.ECA.CCA.ContextualBinding bindingsObj = (edoc.ECA.CCA.ContextualBinding)bindingsIt.next();
			if (bindingsObj != null)
				bindingsObj.setOwner(null);
		}
		java.util.Iterator usesIt = this.uses.iterator();
		while (usesIt.hasNext()) {
			edoc.ECA.CCA.ComponentUsage usesObj = (edoc.ECA.CCA.ComponentUsage)usesIt.next();
			if (usesObj != null)
				usesObj.setOwner(null);
		}
	}

	/** Clone the object */
	public Object clone() {
		CommunityProcess$Class obj = new CommunityProcess$Class();
		obj.nodes = nodes==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.nodes).clone();
		obj.connections = connections==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.connections).clone();
		obj.supertype = supertype==null ? null : this.supertype;
		obj.subtypes = subtypes==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.subtypes).clone();
		obj.bindings = bindings==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.bindings).clone();
		obj.uses = uses==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.uses).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.CCA.CommunityProcessVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
