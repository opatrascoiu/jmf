/**
 *
 *  Class PortActivity$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.CCA;

public class PortActivity$Class
implements
	PortActivity,
    edoc.EdocVisitable
{
	/** Default constructor */
	public PortActivity$Class() {
		//--- Set property 'name' from 'Node' ---
		this.name = null;
		//--- Set property 'owner' from 'Node' ---
		this.owner = null;
		//--- Set property 'incoming' from 'Node' ---
		this.incoming = new java.util.LinkedHashSet();
		//--- Set property 'outgoing' from 'Node' ---
		this.outgoing = new java.util.LinkedHashSet();
		//--- Set property 'governedBy' from 'Node' ---
		this.governedBy = new java.util.LinkedHashSet();
		//--- Set property 'reflectedIn' from 'Node' ---
		this.reflectedIn = new java.util.LinkedHashSet();
		//--- Set property 'portsUsed' from 'UsageContext' ---
		this.portsUsed = new java.util.LinkedHashSet();
		//--- Set property 'extent' from 'PortUseage' ---
		this.extent = null;
		//--- Set property 'represents' from 'PortUseage' ---
		this.represents = null;
	}
	/** Specialized constructor */
	public PortActivity$Class(String name) {
		//--- Set property 'name' from 'Node' ---
		this.name = name;
		//--- Set property 'owner' from 'Node' ---
		this.owner = null;
		//--- Set property 'incoming' from 'Node' ---
		this.incoming = new java.util.LinkedHashSet();
		//--- Set property 'outgoing' from 'Node' ---
		this.outgoing = new java.util.LinkedHashSet();
		//--- Set property 'governedBy' from 'Node' ---
		this.governedBy = new java.util.LinkedHashSet();
		//--- Set property 'reflectedIn' from 'Node' ---
		this.reflectedIn = new java.util.LinkedHashSet();
		//--- Set property 'portsUsed' from 'UsageContext' ---
		this.portsUsed = new java.util.LinkedHashSet();
		//--- Set property 'extent' from 'PortUseage' ---
		this.extent = null;
		//--- Set property 'represents' from 'PortUseage' ---
		this.represents = null;
	}


	/** Property 'name' from 'Node' */
	protected String name;
	/** Get property 'name' from 'Node' */
		public String getName() {
		return name;
	}
	/** Set property 'name' from 'Node' */
		public void setName(String name) {
		this.name = name;
	}

	/** Property 'owner' from 'Node' */
	protected Choreography owner;
	/** Get property 'owner' from 'Node' */
	public Choreography getOwner() {
		return owner;
	}
	/** Set property 'owner' from 'Node' */
	public void setOwner(Choreography owner) { 
		this.owner = owner;
	}

	/** Property 'incoming' from 'Node' */
	protected java.util.Set incoming;
	/** Get property 'incoming' from 'Node' */
	public java.util.Set getIncoming() {
		return incoming;
	}
	/** Set property 'incoming' from 'Node' */
	public void setIncoming(java.util.Set incoming) { 
		this.incoming = incoming;
	}

	/** Property 'outgoing' from 'Node' */
	protected java.util.Set outgoing;
	/** Get property 'outgoing' from 'Node' */
	public java.util.Set getOutgoing() {
		return outgoing;
	}
	/** Set property 'outgoing' from 'Node' */
	public void setOutgoing(java.util.Set outgoing) { 
		this.outgoing = outgoing;
	}

	/** Property 'governedBy' from 'Node' */
	protected java.util.Set governedBy;
	/** Get property 'governedBy' from 'Node' */
	public java.util.Set getGovernedBy() {
		return governedBy;
	}
	/** Set property 'governedBy' from 'Node' */
	public void setGovernedBy(java.util.Set governedBy) { 
		this.governedBy = governedBy;
	}

	/** Property 'reflectedIn' from 'Node' */
	protected java.util.Set reflectedIn;
	/** Get property 'reflectedIn' from 'Node' */
	public java.util.Set getReflectedIn() {
		return reflectedIn;
	}
	/** Set property 'reflectedIn' from 'Node' */
	public void setReflectedIn(java.util.Set reflectedIn) { 
		this.reflectedIn = reflectedIn;
	}

	/** Property 'portsUsed' from 'UsageContext' */
	protected java.util.Set portsUsed;
	/** Get property 'portsUsed' from 'UsageContext' */
	public java.util.Set getPortsUsed() {
		return portsUsed;
	}
	/** Set property 'portsUsed' from 'UsageContext' */
	public void setPortsUsed(java.util.Set portsUsed) { 
		this.portsUsed = portsUsed;
	}

	/** Property 'extent' from 'PortUseage' */
	protected UsageContext extent;
	/** Get property 'extent' from 'PortUseage' */
	public UsageContext getExtent() {
		return extent;
	}
	/** Set property 'extent' from 'PortUseage' */
	public void setExtent(UsageContext extent) { 
		this.extent = extent;
	}

	/** Property 'represents' from 'PortUseage' */
	protected Port represents;
	/** Get property 'represents' from 'PortUseage' */
	public Port getRepresents() {
		return represents;
	}
	/** Set property 'represents' from 'PortUseage' */
	public void setRepresents(Port represents) { 
		this.represents = represents;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.CCA.PortActivity";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (owner != null)
			this.owner.getNodes().remove(this);
		java.util.Iterator incomingIt = this.incoming.iterator();
		while (incomingIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition incomingObj = (edoc.ECA.CCA.AbstractTransition)incomingIt.next();
			if (incomingObj != null)
				incomingObj.setTarget(null);
		}
		java.util.Iterator outgoingIt = this.outgoing.iterator();
		while (outgoingIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition outgoingObj = (edoc.ECA.CCA.AbstractTransition)outgoingIt.next();
			if (outgoingObj != null)
				outgoingObj.setSource(null);
		}
		java.util.Iterator governedByIt = this.governedBy.iterator();
		while (governedByIt.hasNext()) {
			edoc.ECA.Event.NotificationRule governedByObj = (edoc.ECA.Event.NotificationRule)governedByIt.next();
			governedByObj.getGoverns().remove(this);
			governedByObj.getGoverns().remove(this);
		}
		java.util.Iterator reflectedInIt = this.reflectedIn.iterator();
		while (reflectedInIt.hasNext()) {
			edoc.ECA.Event.ProcessEvent reflectedInObj = (edoc.ECA.Event.ProcessEvent)reflectedInIt.next();
			reflectedInObj.getReflects().remove(this);
			reflectedInObj.getReflects().remove(this);
		}
		java.util.Iterator portsUsedIt = this.portsUsed.iterator();
		while (portsUsedIt.hasNext()) {
			edoc.ECA.CCA.PortUseage portsUsedObj = (edoc.ECA.CCA.PortUseage)portsUsedIt.next();
			if (portsUsedObj != null)
				portsUsedObj.setExtent(null);
		}
		if (extent != null)
			this.extent.getPortsUsed().remove(this);
		if (represents != null)
			this.represents.getRepresentedBy().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		PortActivity$Class obj = new PortActivity$Class();
		obj.name = name==null ? null : this.name;
		obj.owner = owner==null ? null : this.owner;
		obj.incoming = incoming==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.incoming).clone();
		obj.outgoing = outgoing==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.outgoing).clone();
		obj.governedBy = governedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.governedBy).clone();
		obj.reflectedIn = reflectedIn==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.reflectedIn).clone();
		obj.portsUsed = portsUsed==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.portsUsed).clone();
		obj.extent = extent==null ? null : this.extent;
		obj.represents = represents==null ? null : this.represents;
		return obj;
	}

	/** Accept 'edoc.ECA.CCA.PortActivityVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
