/**
 *
 *  Class Protocol$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.CCA;

public class Protocol$Class
implements
	Protocol,
    edoc.EdocVisitable
{
	/** Default constructor */
	public Protocol$Class() {
		//--- Set property 'nodes' from 'Choreography' ---
		this.nodes = new java.util.LinkedHashSet();
		//--- Set property 'connections' from 'Choreography' ---
		this.connections = new java.util.LinkedHashSet();
		//--- Set property 'supertype' from 'Choreography' ---
		this.supertype = null;
		//--- Set property 'subtypes' from 'Choreography' ---
		this.subtypes = new java.util.LinkedHashSet();
		//--- Set property 'name' from 'PortOwner' ---
		this.name = null;
		//--- Set property 'ports' from 'PortOwner' ---
		this.ports = new java.util.LinkedHashSet();
		//--- Set property 'initiator' from 'Protocol' ---
		this.initiator = null;
		//--- Set property 'responder' from 'Protocol' ---
		this.responder = null;
		//--- Set property 'usedBy' from 'Protocol' ---
		this.usedBy = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public Protocol$Class(String name) {
		//--- Set property 'nodes' from 'Choreography' ---
		this.nodes = new java.util.LinkedHashSet();
		//--- Set property 'connections' from 'Choreography' ---
		this.connections = new java.util.LinkedHashSet();
		//--- Set property 'supertype' from 'Choreography' ---
		this.supertype = null;
		//--- Set property 'subtypes' from 'Choreography' ---
		this.subtypes = new java.util.LinkedHashSet();
		//--- Set property 'name' from 'PortOwner' ---
		this.name = name;
		//--- Set property 'ports' from 'PortOwner' ---
		this.ports = new java.util.LinkedHashSet();
		//--- Set property 'initiator' from 'Protocol' ---
		this.initiator = null;
		//--- Set property 'responder' from 'Protocol' ---
		this.responder = null;
		//--- Set property 'usedBy' from 'Protocol' ---
		this.usedBy = new java.util.LinkedHashSet();
	}


	/** Property 'nodes' from 'Choreography' */
	protected java.util.Set nodes;
	/** Get property 'nodes' from 'Choreography' */
	public java.util.Set getNodes() {
		return nodes;
	}
	/** Set property 'nodes' from 'Choreography' */
	public void setNodes(java.util.Set nodes) { 
		this.nodes = nodes;
	}

	/** Property 'connections' from 'Choreography' */
	protected java.util.Set connections;
	/** Get property 'connections' from 'Choreography' */
	public java.util.Set getConnections() {
		return connections;
	}
	/** Set property 'connections' from 'Choreography' */
	public void setConnections(java.util.Set connections) { 
		this.connections = connections;
	}

	/** Property 'supertype' from 'Choreography' */
	protected Choreography supertype;
	/** Get property 'supertype' from 'Choreography' */
	public Choreography getSupertype() {
		return supertype;
	}
	/** Set property 'supertype' from 'Choreography' */
	public void setSupertype(Choreography supertype) { 
		this.supertype = supertype;
	}

	/** Property 'subtypes' from 'Choreography' */
	protected java.util.Set subtypes;
	/** Get property 'subtypes' from 'Choreography' */
	public java.util.Set getSubtypes() {
		return subtypes;
	}
	/** Set property 'subtypes' from 'Choreography' */
	public void setSubtypes(java.util.Set subtypes) { 
		this.subtypes = subtypes;
	}

	/** Property 'name' from 'PortOwner' */
	protected String name;
	/** Get property 'name' from 'PortOwner' */
		public String getName() {
		return name;
	}
	/** Set property 'name' from 'PortOwner' */
		public void setName(String name) {
		this.name = name;
	}

	/** Property 'ports' from 'PortOwner' */
	protected java.util.Set ports;
	/** Get property 'ports' from 'PortOwner' */
	public java.util.Set getPorts() {
		return ports;
	}
	/** Set property 'ports' from 'PortOwner' */
	public void setPorts(java.util.Set ports) { 
		this.ports = ports;
	}

	/** Property 'initiator' from 'Protocol' */
	protected InitiatingRole initiator;
	/** Get property 'initiator' from 'Protocol' */
	public InitiatingRole getInitiator() {
		return initiator;
	}
	/** Set property 'initiator' from 'Protocol' */
	public void setInitiator(InitiatingRole initiator) { 
		this.initiator = initiator;
	}

	/** Property 'responder' from 'Protocol' */
	protected RespondingRole responder;
	/** Get property 'responder' from 'Protocol' */
	public RespondingRole getResponder() {
		return responder;
	}
	/** Set property 'responder' from 'Protocol' */
	public void setResponder(RespondingRole responder) { 
		this.responder = responder;
	}

	/** Property 'usedBy' from 'Protocol' */
	protected java.util.Set usedBy;
	/** Get property 'usedBy' from 'Protocol' */
	public java.util.Set getUsedBy() {
		return usedBy;
	}
	/** Set property 'usedBy' from 'Protocol' */
	public void setUsedBy(java.util.Set usedBy) { 
		this.usedBy = usedBy;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.CCA.Protocol";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator nodesIt = this.nodes.iterator();
		while (nodesIt.hasNext()) {
			edoc.ECA.CCA.Node nodesObj = (edoc.ECA.CCA.Node)nodesIt.next();
			if (nodesObj != null)
				nodesObj.setOwner(null);
		}
		java.util.Iterator connectionsIt = this.connections.iterator();
		while (connectionsIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition connectionsObj = (edoc.ECA.CCA.AbstractTransition)connectionsIt.next();
			if (connectionsObj != null)
				connectionsObj.setOwner(null);
		}
		if (supertype != null)
			this.supertype.getSubtypes().remove(this);
		java.util.Iterator subtypesIt = this.subtypes.iterator();
		while (subtypesIt.hasNext()) {
			edoc.ECA.CCA.Choreography subtypesObj = (edoc.ECA.CCA.Choreography)subtypesIt.next();
			if (subtypesObj != null)
				subtypesObj.setSupertype(null);
		}
		java.util.Iterator portsIt = this.ports.iterator();
		while (portsIt.hasNext()) {
			edoc.ECA.CCA.Port portsObj = (edoc.ECA.CCA.Port)portsIt.next();
			if (portsObj != null)
				portsObj.setOwner(null);
		}
		if (initiator != null)
			this.initiator.setProtocol(null);
		if (responder != null)
			this.responder.setProtocol(null);
		java.util.Iterator usedByIt = this.usedBy.iterator();
		while (usedByIt.hasNext()) {
			edoc.ECA.CCA.ProtocolPort usedByObj = (edoc.ECA.CCA.ProtocolPort)usedByIt.next();
			if (usedByObj != null)
				usedByObj.setUses(null);
		}
	}

	/** Clone the object */
	public Object clone() {
		Protocol$Class obj = new Protocol$Class();
		obj.nodes = nodes==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.nodes).clone();
		obj.connections = connections==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.connections).clone();
		obj.supertype = supertype==null ? null : this.supertype;
		obj.subtypes = subtypes==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.subtypes).clone();
		obj.name = name==null ? null : this.name;
		obj.ports = ports==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.ports).clone();
		obj.initiator = initiator==null ? null : this.initiator;
		obj.responder = responder==null ? null : this.responder;
		obj.usedBy = usedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.usedBy).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.CCA.ProtocolVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
