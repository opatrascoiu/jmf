/**
 *
 *  Class CompositeData$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:35
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.DocumentModel;

public class CompositeData$Class
implements
	CompositeData,
    edoc.EdocVisitable
{
	/** Default constructor */
	public CompositeData$Class() {
		//--- Set property 'name' from 'PackageContent' ---
		this.name = null;
		//--- Set property 'namespace_' from 'PackageContent' ---
		this.namespace_ = null;
		//--- Set property 'elementImport' from 'PackageContent' ---
		this.elementImport = new java.util.LinkedHashSet();
		//--- Set property 'constraints' from 'DataElement' ---
		this.constraints = new java.util.LinkedHashSet();
		//--- Set property 'attrs' from 'DataElement' ---
		this.attrs = new java.util.Vector();
		//--- Set property 'flowTypeOf' from 'DataElement' ---
		this.flowTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'propertyTypeOf' from 'DataElement' ---
		this.propertyTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'features' from 'CompositeData' ---
		this.features = new java.util.Vector();
		//--- Set property 'superTypes' from 'CompositeData' ---
		this.superTypes = new java.util.Vector();
		//--- Set property 'subTypes' from 'CompositeData' ---
		this.subTypes = new java.util.Vector();
		//--- Set property 'managedBy' from 'CompositeData' ---
		this.managedBy = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public CompositeData$Class(String name) {
		//--- Set property 'name' from 'PackageContent' ---
		this.name = name;
		//--- Set property 'namespace_' from 'PackageContent' ---
		this.namespace_ = null;
		//--- Set property 'elementImport' from 'PackageContent' ---
		this.elementImport = new java.util.LinkedHashSet();
		//--- Set property 'constraints' from 'DataElement' ---
		this.constraints = new java.util.LinkedHashSet();
		//--- Set property 'attrs' from 'DataElement' ---
		this.attrs = new java.util.Vector();
		//--- Set property 'flowTypeOf' from 'DataElement' ---
		this.flowTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'propertyTypeOf' from 'DataElement' ---
		this.propertyTypeOf = new java.util.LinkedHashSet();
		//--- Set property 'features' from 'CompositeData' ---
		this.features = new java.util.Vector();
		//--- Set property 'superTypes' from 'CompositeData' ---
		this.superTypes = new java.util.Vector();
		//--- Set property 'subTypes' from 'CompositeData' ---
		this.subTypes = new java.util.Vector();
		//--- Set property 'managedBy' from 'CompositeData' ---
		this.managedBy = new java.util.LinkedHashSet();
	}


	/** Property 'name' from 'PackageContent' */
	protected String name;
	/** Get property 'name' from 'PackageContent' */
		public String getName() {
		return name;
	}
	/** Set property 'name' from 'PackageContent' */
		public void setName(String name) {
		this.name = name;
	}

	/** Property 'namespace_' from 'PackageContent' */
	protected edoc.ECA.ModelManagement.PackageECA namespace_;
	/** Get property 'namespace_' from 'PackageContent' */
	public edoc.ECA.ModelManagement.PackageECA getNamespace_() {
		return namespace_;
	}
	/** Set property 'namespace_' from 'PackageContent' */
	public void setNamespace_(edoc.ECA.ModelManagement.PackageECA namespace_) { 
		this.namespace_ = namespace_;
	}

	/** Property 'elementImport' from 'PackageContent' */
	protected java.util.Set elementImport;
	/** Get property 'elementImport' from 'PackageContent' */
	public java.util.Set getElementImport() {
		return elementImport;
	}
	/** Set property 'elementImport' from 'PackageContent' */
	public void setElementImport(java.util.Set elementImport) { 
		this.elementImport = elementImport;
	}

	/** Property 'constraints' from 'DataElement' */
	protected java.util.Set constraints;
	/** Get property 'constraints' from 'DataElement' */
	public java.util.Set getConstraints() {
		return constraints;
	}
	/** Set property 'constraints' from 'DataElement' */
	public void setConstraints(java.util.Set constraints) { 
		this.constraints = constraints;
	}

	/** Property 'attrs' from 'DataElement' */
	protected java.util.List attrs;
	/** Get property 'attrs' from 'DataElement' */
	public java.util.List getAttrs() {
		return attrs;
	}
	/** Set property 'attrs' from 'DataElement' */
	public void setAttrs(java.util.List attrs) { 
		this.attrs = attrs;
	}

	/** Property 'flowTypeOf' from 'DataElement' */
	protected java.util.Set flowTypeOf;
	/** Get property 'flowTypeOf' from 'DataElement' */
	public java.util.Set getFlowTypeOf() {
		return flowTypeOf;
	}
	/** Set property 'flowTypeOf' from 'DataElement' */
	public void setFlowTypeOf(java.util.Set flowTypeOf) { 
		this.flowTypeOf = flowTypeOf;
	}

	/** Property 'propertyTypeOf' from 'DataElement' */
	protected java.util.Set propertyTypeOf;
	/** Get property 'propertyTypeOf' from 'DataElement' */
	public java.util.Set getPropertyTypeOf() {
		return propertyTypeOf;
	}
	/** Set property 'propertyTypeOf' from 'DataElement' */
	public void setPropertyTypeOf(java.util.Set propertyTypeOf) { 
		this.propertyTypeOf = propertyTypeOf;
	}

	/** Property 'features' from 'CompositeData' */
	protected java.util.List features;
	/** Get property 'features' from 'CompositeData' */
	public java.util.List getFeatures() {
		return features;
	}
	/** Set property 'features' from 'CompositeData' */
	public void setFeatures(java.util.List features) { 
		this.features = features;
	}

	/** Property 'superTypes' from 'CompositeData' */
	protected java.util.List superTypes;
	/** Get property 'superTypes' from 'CompositeData' */
	public java.util.List getSuperTypes() {
		return superTypes;
	}
	/** Set property 'superTypes' from 'CompositeData' */
	public void setSuperTypes(java.util.List superTypes) { 
		this.superTypes = superTypes;
	}

	/** Property 'subTypes' from 'CompositeData' */
	protected java.util.List subTypes;
	/** Get property 'subTypes' from 'CompositeData' */
	public java.util.List getSubTypes() {
		return subTypes;
	}
	/** Set property 'subTypes' from 'CompositeData' */
	public void setSubTypes(java.util.List subTypes) { 
		this.subTypes = subTypes;
	}

	/** Property 'managedBy' from 'CompositeData' */
	protected java.util.Set managedBy;
	/** Get property 'managedBy' from 'CompositeData' */
	public java.util.Set getManagedBy() {
		return managedBy;
	}
	/** Set property 'managedBy' from 'CompositeData' */
	public void setManagedBy(java.util.Set managedBy) { 
		this.managedBy = managedBy;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.DocumentModel.CompositeData";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (namespace_ != null)
			this.namespace_.getOwnedElement().remove(this);
		java.util.Iterator elementImportIt = this.elementImport.iterator();
		while (elementImportIt.hasNext()) {
			edoc.ECA.ModelManagement.ElementImport elementImportObj = (edoc.ECA.ModelManagement.ElementImport)elementImportIt.next();
			if (elementImportObj != null)
				elementImportObj.setModelElement(null);
		}
		java.util.Iterator constraintsIt = this.constraints.iterator();
		while (constraintsIt.hasNext()) {
			edoc.ECA.DocumentModel.DataInvariant constraintsObj = (edoc.ECA.DocumentModel.DataInvariant)constraintsIt.next();
			if (constraintsObj != null)
				constraintsObj.setConstrainedElement(null);
		}
		java.util.Iterator attrsIt = this.attrs.iterator();
		while (attrsIt.hasNext()) {
			edoc.ECA.DocumentModel.Attribute attrsObj = (edoc.ECA.DocumentModel.Attribute)attrsIt.next();
			if (attrsObj != null)
				attrsObj.setType(null);
		}
		java.util.Iterator flowTypeOfIt = this.flowTypeOf.iterator();
		while (flowTypeOfIt.hasNext()) {
			edoc.ECA.CCA.FlowPort flowTypeOfObj = (edoc.ECA.CCA.FlowPort)flowTypeOfIt.next();
			if (flowTypeOfObj != null)
				flowTypeOfObj.setType(null);
		}
		java.util.Iterator propertyTypeOfIt = this.propertyTypeOf.iterator();
		while (propertyTypeOfIt.hasNext()) {
			edoc.ECA.CCA.PropertyDefinition propertyTypeOfObj = (edoc.ECA.CCA.PropertyDefinition)propertyTypeOfIt.next();
			if (propertyTypeOfObj != null)
				propertyTypeOfObj.setType(null);
		}
		java.util.Iterator featuresIt = this.features.iterator();
		while (featuresIt.hasNext()) {
			edoc.ECA.DocumentModel.Attribute featuresObj = (edoc.ECA.DocumentModel.Attribute)featuresIt.next();
			if (featuresObj != null)
				featuresObj.setOwner(null);
		}
		java.util.Iterator superTypesIt = this.superTypes.iterator();
		while (superTypesIt.hasNext()) {
			edoc.ECA.DocumentModel.CompositeData superTypesObj = (edoc.ECA.DocumentModel.CompositeData)superTypesIt.next();
			superTypesObj.getSubTypes().remove(this);
			superTypesObj.getSubTypes().remove(this);
		}
		java.util.Iterator subTypesIt = this.subTypes.iterator();
		while (subTypesIt.hasNext()) {
			edoc.ECA.DocumentModel.CompositeData subTypesObj = (edoc.ECA.DocumentModel.CompositeData)subTypesIt.next();
			subTypesObj.getSuperTypes().remove(this);
			subTypesObj.getSuperTypes().remove(this);
		}
		java.util.Iterator managedByIt = this.managedBy.iterator();
		while (managedByIt.hasNext()) {
			edoc.ECA.EntityPkg.DataManager managedByObj = (edoc.ECA.EntityPkg.DataManager)managedByIt.next();
			if (managedByObj != null)
				managedByObj.setManages(null);
		}
	}

	/** Clone the object */
	public Object clone() {
		CompositeData$Class obj = new CompositeData$Class();
		obj.name = name==null ? null : this.name;
		obj.namespace_ = namespace_==null ? null : this.namespace_;
		obj.elementImport = elementImport==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.elementImport).clone();
		obj.constraints = constraints==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.constraints).clone();
		obj.attrs = attrs==null ? null : (java.util.List)((java.util.Vector)this.attrs).clone();
		obj.flowTypeOf = flowTypeOf==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.flowTypeOf).clone();
		obj.propertyTypeOf = propertyTypeOf==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.propertyTypeOf).clone();
		obj.features = features==null ? null : (java.util.List)((java.util.Vector)this.features).clone();
		obj.superTypes = superTypes==null ? null : (java.util.List)((java.util.Vector)this.superTypes).clone();
		obj.subTypes = subTypes==null ? null : (java.util.List)((java.util.Vector)this.subTypes).clone();
		obj.managedBy = managedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.managedBy).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.DocumentModel.CompositeDataVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
