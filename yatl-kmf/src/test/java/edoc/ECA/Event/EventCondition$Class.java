/**
 *
 *  Class EventCondition$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.Event;

public class EventCondition$Class
implements
	EventCondition,
    edoc.EdocVisitable
{
	/** Default constructor */
	public EventCondition$Class() {
		//--- Set property 'condition' from 'EventCondition' ---
		this.condition = null;
		//--- Set property 'guardedBy' from 'EventCondition' ---
		this.guardedBy = new java.util.LinkedHashSet();
		//--- Set property 'requires' from 'EventCondition' ---
		this.requires = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public EventCondition$Class(String condition) {
		//--- Set property 'condition' from 'EventCondition' ---
		this.condition = condition;
		//--- Set property 'guardedBy' from 'EventCondition' ---
		this.guardedBy = new java.util.LinkedHashSet();
		//--- Set property 'requires' from 'EventCondition' ---
		this.requires = new java.util.LinkedHashSet();
	}


	/** Property 'condition' from 'EventCondition' */
	protected String condition;
	/** Get property 'condition' from 'EventCondition' */
		public String getCondition() {
		return condition;
	}
	/** Set property 'condition' from 'EventCondition' */
		public void setCondition(String condition) {
		this.condition = condition;
	}

	/** Property 'guardedBy' from 'EventCondition' */
	protected java.util.Set guardedBy;
	/** Get property 'guardedBy' from 'EventCondition' */
	public java.util.Set getGuardedBy() {
		return guardedBy;
	}
	/** Set property 'guardedBy' from 'EventCondition' */
	public void setGuardedBy(java.util.Set guardedBy) { 
		this.guardedBy = guardedBy;
	}

	/** Property 'requires' from 'EventCondition' */
	protected java.util.Set requires;
	/** Get property 'requires' from 'EventCondition' */
	public java.util.Set getRequires() {
		return requires;
	}
	/** Set property 'requires' from 'EventCondition' */
	public void setRequires(java.util.Set requires) { 
		this.requires = requires;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.Event.EventCondition";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator guardedByIt = this.guardedBy.iterator();
		while (guardedByIt.hasNext()) {
			edoc.ECA.Event.NotificationRule guardedByObj = (edoc.ECA.Event.NotificationRule)guardedByIt.next();
			guardedByObj.getGuards().remove(this);
			guardedByObj.getGuards().remove(this);
		}
		java.util.Iterator requiresIt = this.requires.iterator();
		while (requiresIt.hasNext()) {
			edoc.ECA.Event.Subscription requiresObj = (edoc.ECA.Event.Subscription)requiresIt.next();
			requiresObj.getRequiredBy().remove(this);
			requiresObj.getRequiredBy().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		EventCondition$Class obj = new EventCondition$Class();
		obj.condition = condition==null ? null : this.condition;
		obj.guardedBy = guardedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.guardedBy).clone();
		obj.requires = requires==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.requires).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.Event.EventConditionVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
