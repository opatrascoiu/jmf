/**
 *
 *  Class NotificationRule$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.Event;

public class NotificationRule$Class
implements
	NotificationRule,
    edoc.EdocVisitable
{
	/** Default constructor */
	public NotificationRule$Class() {
		//--- Set property 'condition' from 'NotificationRule' ---
		this.condition = null;
		//--- Set property 'guards' from 'NotificationRule' ---
		this.guards = new java.util.LinkedHashSet();
		//--- Set property 'governs' from 'NotificationRule' ---
		this.governs = new java.util.LinkedHashSet();
		//--- Set property 'ruleContext' from 'NotificationRule' ---
		this.ruleContext = null;
		//--- Set property 'subscription' from 'NotificationRule' ---
		this.subscription = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public NotificationRule$Class(String condition) {
		//--- Set property 'condition' from 'NotificationRule' ---
		this.condition = condition;
		//--- Set property 'guards' from 'NotificationRule' ---
		this.guards = new java.util.LinkedHashSet();
		//--- Set property 'governs' from 'NotificationRule' ---
		this.governs = new java.util.LinkedHashSet();
		//--- Set property 'ruleContext' from 'NotificationRule' ---
		this.ruleContext = null;
		//--- Set property 'subscription' from 'NotificationRule' ---
		this.subscription = new java.util.LinkedHashSet();
	}


	/** Property 'condition' from 'NotificationRule' */
	protected String condition;
	/** Get property 'condition' from 'NotificationRule' */
		public String getCondition() {
		return condition;
	}
	/** Set property 'condition' from 'NotificationRule' */
		public void setCondition(String condition) {
		this.condition = condition;
	}

	/** Property 'guards' from 'NotificationRule' */
	protected java.util.Set guards;
	/** Get property 'guards' from 'NotificationRule' */
	public java.util.Set getGuards() {
		return guards;
	}
	/** Set property 'guards' from 'NotificationRule' */
	public void setGuards(java.util.Set guards) { 
		this.guards = guards;
	}

	/** Property 'governs' from 'NotificationRule' */
	protected java.util.Set governs;
	/** Get property 'governs' from 'NotificationRule' */
	public java.util.Set getGoverns() {
		return governs;
	}
	/** Set property 'governs' from 'NotificationRule' */
	public void setGoverns(java.util.Set governs) { 
		this.governs = governs;
	}

	/** Property 'ruleContext' from 'NotificationRule' */
	protected EventBasedProcess ruleContext;
	/** Get property 'ruleContext' from 'NotificationRule' */
	public EventBasedProcess getRuleContext() {
		return ruleContext;
	}
	/** Set property 'ruleContext' from 'NotificationRule' */
	public void setRuleContext(EventBasedProcess ruleContext) { 
		this.ruleContext = ruleContext;
	}

	/** Property 'subscription' from 'NotificationRule' */
	protected java.util.Set subscription;
	/** Get property 'subscription' from 'NotificationRule' */
	public java.util.Set getSubscription() {
		return subscription;
	}
	/** Set property 'subscription' from 'NotificationRule' */
	public void setSubscription(java.util.Set subscription) { 
		this.subscription = subscription;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.Event.NotificationRule";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator guardsIt = this.guards.iterator();
		while (guardsIt.hasNext()) {
			edoc.ECA.Event.EventCondition guardsObj = (edoc.ECA.Event.EventCondition)guardsIt.next();
			guardsObj.getGuardedBy().remove(this);
			guardsObj.getGuardedBy().remove(this);
		}
		java.util.Iterator governsIt = this.governs.iterator();
		while (governsIt.hasNext()) {
			edoc.ECA.CCA.Node governsObj = (edoc.ECA.CCA.Node)governsIt.next();
			governsObj.getGovernedBy().remove(this);
			governsObj.getGovernedBy().remove(this);
		}
		if (ruleContext != null)
			this.ruleContext.getNotificationRules().remove(this);
		java.util.Iterator subscriptionIt = this.subscription.iterator();
		while (subscriptionIt.hasNext()) {
			edoc.ECA.Event.Subscription subscriptionObj = (edoc.ECA.Event.Subscription)subscriptionIt.next();
			subscriptionObj.getRules().remove(this);
			subscriptionObj.getRules().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		NotificationRule$Class obj = new NotificationRule$Class();
		obj.condition = condition==null ? null : this.condition;
		obj.guards = guards==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.guards).clone();
		obj.governs = governs==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.governs).clone();
		obj.ruleContext = ruleContext==null ? null : this.ruleContext;
		obj.subscription = subscription==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.subscription).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.Event.NotificationRuleVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
