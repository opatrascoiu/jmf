/**
 *
 *  Class Subscription$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:36
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.Event;

public class Subscription$Class
extends
	edoc.ECA.CCA.FlowPort$Class
implements
	Subscription,
    edoc.EdocVisitable
{
	/** Default constructor */
	public Subscription$Class() {
		//--- Set property 'name' from 'Port' ---
		this.name = null;
		//--- Set property 'isSynchronous' from 'Port' ---
		this.isSynchronous = null;
		//--- Set property 'isTransactional' from 'Port' ---
		this.isTransactional = null;
		//--- Set property 'direction' from 'Port' ---
		this.direction = null;
		//--- Set property 'postCondition' from 'Port' ---
		this.postCondition = null;
		//--- Set property 'representedBy' from 'Port' ---
		this.representedBy = new java.util.LinkedHashSet();
		//--- Set property 'owner' from 'Port' ---
		this.owner = null;
		//--- Set property 'type' from 'FlowPort' ---
		this.type = null;
		//--- Set property 'typeProperty' from 'FlowPort' ---
		this.typeProperty = null;
		//--- Set property 'subscriptionClause' from 'Subscription' ---
		this.subscriptionClause = null;
		//--- Set property 'domain' from 'Subscription' ---
		this.domain = null;
		//--- Set property 'requiredBy' from 'Subscription' ---
		this.requiredBy = new java.util.LinkedHashSet();
		//--- Set property 'rules' from 'Subscription' ---
		this.rules = new java.util.LinkedHashSet();
		//--- Set property 'heldBy' from 'Subscription' ---
		this.heldBy = null;
		//--- Set property 'subscribedBy' from 'Subscription' ---
		this.subscribedBy = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public Subscription$Class(String name, Boolean isSynchronous, Boolean isTransactional, edoc.ECA.CCA.DirectionType direction, edoc.ECA.CCA.Status postCondition, String subscriptionClause, String domain) {
		//--- Set property 'name' from 'Port' ---
		this.name = name;
		//--- Set property 'isSynchronous' from 'Port' ---
		this.isSynchronous = isSynchronous;
		//--- Set property 'isTransactional' from 'Port' ---
		this.isTransactional = isTransactional;
		//--- Set property 'direction' from 'Port' ---
		this.direction = direction;
		//--- Set property 'postCondition' from 'Port' ---
		this.postCondition = postCondition;
		//--- Set property 'representedBy' from 'Port' ---
		this.representedBy = new java.util.LinkedHashSet();
		//--- Set property 'owner' from 'Port' ---
		this.owner = null;
		//--- Set property 'type' from 'FlowPort' ---
		this.type = null;
		//--- Set property 'typeProperty' from 'FlowPort' ---
		this.typeProperty = null;
		//--- Set property 'subscriptionClause' from 'Subscription' ---
		this.subscriptionClause = subscriptionClause;
		//--- Set property 'domain' from 'Subscription' ---
		this.domain = domain;
		//--- Set property 'requiredBy' from 'Subscription' ---
		this.requiredBy = new java.util.LinkedHashSet();
		//--- Set property 'rules' from 'Subscription' ---
		this.rules = new java.util.LinkedHashSet();
		//--- Set property 'heldBy' from 'Subscription' ---
		this.heldBy = null;
		//--- Set property 'subscribedBy' from 'Subscription' ---
		this.subscribedBy = new java.util.LinkedHashSet();
	}


	/** Property 'subscriptionClause' from 'Subscription' */
	protected String subscriptionClause;
	/** Get property 'subscriptionClause' from 'Subscription' */
		public String getSubscriptionClause() {
		return subscriptionClause;
	}
	/** Set property 'subscriptionClause' from 'Subscription' */
		public void setSubscriptionClause(String subscriptionClause) {
		this.subscriptionClause = subscriptionClause;
	}

	/** Property 'domain' from 'Subscription' */
	protected String domain;
	/** Get property 'domain' from 'Subscription' */
		public String getDomain() {
		return domain;
	}
	/** Set property 'domain' from 'Subscription' */
		public void setDomain(String domain) {
		this.domain = domain;
	}

	/** Property 'requiredBy' from 'Subscription' */
	protected java.util.Set requiredBy;
	/** Get property 'requiredBy' from 'Subscription' */
	public java.util.Set getRequiredBy() {
		return requiredBy;
	}
	/** Set property 'requiredBy' from 'Subscription' */
	public void setRequiredBy(java.util.Set requiredBy) { 
		this.requiredBy = requiredBy;
	}

	/** Property 'rules' from 'Subscription' */
	protected java.util.Set rules;
	/** Get property 'rules' from 'Subscription' */
	public java.util.Set getRules() {
		return rules;
	}
	/** Set property 'rules' from 'Subscription' */
	public void setRules(java.util.Set rules) { 
		this.rules = rules;
	}

	/** Property 'heldBy' from 'Subscription' */
	protected Subscriber heldBy;
	/** Get property 'heldBy' from 'Subscription' */
	public Subscriber getHeldBy() {
		return heldBy;
	}
	/** Set property 'heldBy' from 'Subscription' */
	public void setHeldBy(Subscriber heldBy) { 
		this.heldBy = heldBy;
	}

	/** Property 'subscribedBy' from 'Subscription' */
	protected java.util.Set subscribedBy;
	/** Get property 'subscribedBy' from 'Subscription' */
	public java.util.Set getSubscribedBy() {
		return subscribedBy;
	}
	/** Set property 'subscribedBy' from 'Subscription' */
	public void setSubscribedBy(java.util.Set subscribedBy) { 
		this.subscribedBy = subscribedBy;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.Event.Subscription";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator representedByIt = this.representedBy.iterator();
		while (representedByIt.hasNext()) {
			edoc.ECA.CCA.PortUseage representedByObj = (edoc.ECA.CCA.PortUseage)representedByIt.next();
			if (representedByObj != null)
				representedByObj.setRepresents(null);
		}
		if (owner != null)
			this.owner.getPorts().remove(this);
		if (type != null)
			this.type.getFlowTypeOf().remove(this);
		if (typeProperty != null)
			this.typeProperty.getConstrains().remove(this);
		java.util.Iterator requiredByIt = this.requiredBy.iterator();
		while (requiredByIt.hasNext()) {
			edoc.ECA.Event.EventCondition requiredByObj = (edoc.ECA.Event.EventCondition)requiredByIt.next();
			requiredByObj.getRequires().remove(this);
			requiredByObj.getRequires().remove(this);
		}
		java.util.Iterator rulesIt = this.rules.iterator();
		while (rulesIt.hasNext()) {
			edoc.ECA.Event.NotificationRule rulesObj = (edoc.ECA.Event.NotificationRule)rulesIt.next();
			rulesObj.getSubscription().remove(this);
			rulesObj.getSubscription().remove(this);
		}
		if (heldBy != null)
			this.heldBy.getSubscriptions().remove(this);
		java.util.Iterator subscribedByIt = this.subscribedBy.iterator();
		while (subscribedByIt.hasNext()) {
			edoc.ECA.Event.PubSubNotice subscribedByObj = (edoc.ECA.Event.PubSubNotice)subscribedByIt.next();
			subscribedByObj.getSubscribesTo().remove(this);
			subscribedByObj.getSubscribesTo().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		Subscription$Class obj = new Subscription$Class();
		obj.name = name==null ? null : this.name;
		obj.isSynchronous = isSynchronous==null ? null : this.isSynchronous;
		obj.isTransactional = isTransactional==null ? null : this.isTransactional;
		obj.direction = direction==null ? null : (edoc.ECA.CCA.DirectionType)this.direction.clone();
		obj.postCondition = postCondition==null ? null : (edoc.ECA.CCA.Status)this.postCondition.clone();
		obj.representedBy = representedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.representedBy).clone();
		obj.owner = owner==null ? null : this.owner;
		obj.type = type==null ? null : this.type;
		obj.typeProperty = typeProperty==null ? null : this.typeProperty;
		obj.subscriptionClause = subscriptionClause==null ? null : this.subscriptionClause;
		obj.domain = domain==null ? null : this.domain;
		obj.requiredBy = requiredBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.requiredBy).clone();
		obj.rules = rules==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.rules).clone();
		obj.heldBy = heldBy==null ? null : this.heldBy;
		obj.subscribedBy = subscribedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.subscribedBy).clone();
		return obj;
	}

	/** Accept 'edoc.ECA.Event.SubscriptionVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
