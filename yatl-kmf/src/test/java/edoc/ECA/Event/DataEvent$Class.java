/**
 *
 *  Class DataEvent$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:37
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.Event;

public class DataEvent$Class
implements
	DataEvent,
    edoc.EdocVisitable
{
	/** Default constructor */
	public DataEvent$Class() {
		//--- Set property 'describedBy' from 'BusinessEvent' ---
		this.describedBy = new java.util.LinkedHashSet();
		//--- Set property 'triggers' from 'BusinessEvent' ---
		this.triggers = new java.util.LinkedHashSet();
		//--- Set property 'eventContext' from 'DataEvent' ---
		this.eventContext = null;
	}


	/** Property 'describedBy' from 'BusinessEvent' */
	protected java.util.Set describedBy;
	/** Get property 'describedBy' from 'BusinessEvent' */
	public java.util.Set getDescribedBy() {
		return describedBy;
	}
	/** Set property 'describedBy' from 'BusinessEvent' */
	public void setDescribedBy(java.util.Set describedBy) { 
		this.describedBy = describedBy;
	}

	/** Property 'triggers' from 'BusinessEvent' */
	protected java.util.Set triggers;
	/** Get property 'triggers' from 'BusinessEvent' */
	public java.util.Set getTriggers() {
		return triggers;
	}
	/** Set property 'triggers' from 'BusinessEvent' */
	public void setTriggers(java.util.Set triggers) { 
		this.triggers = triggers;
	}

	/** Property 'eventContext' from 'DataEvent' */
	protected EventBasedDataManager eventContext;
	/** Get property 'eventContext' from 'DataEvent' */
	public EventBasedDataManager getEventContext() {
		return eventContext;
	}
	/** Set property 'eventContext' from 'DataEvent' */
	public void setEventContext(EventBasedDataManager eventContext) { 
		this.eventContext = eventContext;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.Event.DataEvent";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator describedByIt = this.describedBy.iterator();
		while (describedByIt.hasNext()) {
			edoc.ECA.Event.EventNotice describedByObj = (edoc.ECA.Event.EventNotice)describedByIt.next();
			if (describedByObj != null)
				describedByObj.setDescribes(null);
		}
		java.util.Iterator triggersIt = this.triggers.iterator();
		while (triggersIt.hasNext()) {
			edoc.ECA.Event.EventNotice triggersObj = (edoc.ECA.Event.EventNotice)triggersIt.next();
			if (triggersObj != null)
				triggersObj.setTriggeredBy(null);
		}
		if (eventContext != null)
			this.eventContext.getDataEvents().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		DataEvent$Class obj = new DataEvent$Class();
		obj.describedBy = describedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.describedBy).clone();
		obj.triggers = triggers==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.triggers).clone();
		obj.eventContext = eventContext==null ? null : this.eventContext;
		return obj;
	}

	/** Accept 'edoc.ECA.Event.DataEventVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
