/**
 *
 *  Class ProcessPortConnector$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:37
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.ECA.BusinessProcessPkg;

public class ProcessPortConnector$Class
extends
	edoc.ECA.CCA.PortConnector$Class
implements
	ProcessPortConnector,
    edoc.EdocVisitable
{
	/** Default constructor */
	public ProcessPortConnector$Class() {
		//--- Set property 'name' from 'Node' ---
		this.name = null;
		//--- Set property 'owner' from 'Node' ---
		this.owner = null;
		//--- Set property 'incoming' from 'Node' ---
		this.incoming = new java.util.LinkedHashSet();
		//--- Set property 'outgoing' from 'Node' ---
		this.outgoing = new java.util.LinkedHashSet();
		//--- Set property 'governedBy' from 'Node' ---
		this.governedBy = new java.util.LinkedHashSet();
		//--- Set property 'reflectedIn' from 'Node' ---
		this.reflectedIn = new java.util.LinkedHashSet();
		//--- Set property 'portsUsed' from 'UsageContext' ---
		this.portsUsed = new java.util.LinkedHashSet();
		//--- Set property 'extent' from 'PortUseage' ---
		this.extent = null;
		//--- Set property 'represents' from 'PortUseage' ---
		this.represents = null;
	}
	/** Specialized constructor */
	public ProcessPortConnector$Class(String name) {
		//--- Set property 'name' from 'Node' ---
		this.name = name;
		//--- Set property 'owner' from 'Node' ---
		this.owner = null;
		//--- Set property 'incoming' from 'Node' ---
		this.incoming = new java.util.LinkedHashSet();
		//--- Set property 'outgoing' from 'Node' ---
		this.outgoing = new java.util.LinkedHashSet();
		//--- Set property 'governedBy' from 'Node' ---
		this.governedBy = new java.util.LinkedHashSet();
		//--- Set property 'reflectedIn' from 'Node' ---
		this.reflectedIn = new java.util.LinkedHashSet();
		//--- Set property 'portsUsed' from 'UsageContext' ---
		this.portsUsed = new java.util.LinkedHashSet();
		//--- Set property 'extent' from 'PortUseage' ---
		this.extent = null;
		//--- Set property 'represents' from 'PortUseage' ---
		this.represents = null;
	}


	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "edoc.ECA.BusinessProcessPkg.ProcessPortConnector";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (owner != null)
			this.owner.getNodes().remove(this);
		java.util.Iterator incomingIt = this.incoming.iterator();
		while (incomingIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition incomingObj = (edoc.ECA.CCA.AbstractTransition)incomingIt.next();
			if (incomingObj != null)
				incomingObj.setTarget(null);
		}
		java.util.Iterator outgoingIt = this.outgoing.iterator();
		while (outgoingIt.hasNext()) {
			edoc.ECA.CCA.AbstractTransition outgoingObj = (edoc.ECA.CCA.AbstractTransition)outgoingIt.next();
			if (outgoingObj != null)
				outgoingObj.setSource(null);
		}
		java.util.Iterator governedByIt = this.governedBy.iterator();
		while (governedByIt.hasNext()) {
			edoc.ECA.Event.NotificationRule governedByObj = (edoc.ECA.Event.NotificationRule)governedByIt.next();
			governedByObj.getGoverns().remove(this);
			governedByObj.getGoverns().remove(this);
		}
		java.util.Iterator reflectedInIt = this.reflectedIn.iterator();
		while (reflectedInIt.hasNext()) {
			edoc.ECA.Event.ProcessEvent reflectedInObj = (edoc.ECA.Event.ProcessEvent)reflectedInIt.next();
			reflectedInObj.getReflects().remove(this);
			reflectedInObj.getReflects().remove(this);
		}
		java.util.Iterator portsUsedIt = this.portsUsed.iterator();
		while (portsUsedIt.hasNext()) {
			edoc.ECA.CCA.PortUseage portsUsedObj = (edoc.ECA.CCA.PortUseage)portsUsedIt.next();
			if (portsUsedObj != null)
				portsUsedObj.setExtent(null);
		}
		if (extent != null)
			this.extent.getPortsUsed().remove(this);
		if (represents != null)
			this.represents.getRepresentedBy().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		ProcessPortConnector$Class obj = new ProcessPortConnector$Class();
		obj.name = name==null ? null : this.name;
		obj.owner = owner==null ? null : this.owner;
		obj.incoming = incoming==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.incoming).clone();
		obj.outgoing = outgoing==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.outgoing).clone();
		obj.governedBy = governedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.governedBy).clone();
		obj.reflectedIn = reflectedIn==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.reflectedIn).clone();
		obj.portsUsed = portsUsed==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.portsUsed).clone();
		obj.extent = extent==null ? null : this.extent;
		obj.represents = represents==null ? null : this.represents;
		return obj;
	}

	/** Accept 'edoc.ECA.BusinessProcessPkg.ProcessPortConnectorVisitor' */
	public Object accept(edoc.EdocVisitor v, Object data) {
		return v.visit(this, data);
	}
}
