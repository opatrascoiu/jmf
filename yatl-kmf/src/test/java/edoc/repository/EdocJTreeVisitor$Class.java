/**
 *
 *  Class EdocJTreeVisitor$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:37
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.repository;

import java.util.*;
import java.lang.reflect.*;
import javax.swing.tree.*;

import uk.ac.kent.cs.kmf.util.*;

public class EdocJTreeVisitor$Class
	implements EdocJTreeVisitor
{
	/** Visit factory for 'EdocFactory' */
	public Object visit(edoc.EdocFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		return root;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.PackageContent' */
	public Object visit(edoc.ECA.ModelManagement.PackageContent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.ModelManagement.PackageECA' */
	public Object visit(edoc.ECA.ModelManagement.PackageECAFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.PackageECA' */
	public Object visit(edoc.ECA.ModelManagement.PackageECA host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PackageECA ---
		//--- Association ownedElement ---
		DefaultMutableTreeNode ownedElementNode = getNode(this, "ownedElement", host.getOwnedElement(), data);
		root.add(ownedElementNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.ModelManagement.ElementImport' */
	public Object visit(edoc.ECA.ModelManagement.ElementImportFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.ElementImport' */
	public Object visit(edoc.ECA.ModelManagement.ElementImport host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ElementImport ---
		//--- Association modelElement ---
		DefaultMutableTreeNode modelElementNode = getNode(this, "modelElement", host.getModelElement(), data);
		root.add(modelElementNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.DataInvariant' */
	public Object visit(edoc.ECA.DocumentModel.DataInvariantFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataInvariant' */
	public Object visit(edoc.ECA.DocumentModel.DataInvariant host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataInvariant ---
		//--- Property expression ---
		DefaultMutableTreeNode expressionNode = getNode(this, "expression", host.getExpression(), data);
		root.add(expressionNode);
		//--- Property onCommit ---
		DefaultMutableTreeNode onCommitNode = getNode(this, "onCommit", host.getOnCommit(), data);
		root.add(onCommitNode);
		//--- Association constrainedElement ---
		DefaultMutableTreeNode constrainedElementNode = getNode(this, "constrainedElement", host.getConstrainedElement(), data);
		root.add(constrainedElementNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataElement' */
	public Object visit(edoc.ECA.DocumentModel.DataElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.DataType' */
	public Object visit(edoc.ECA.DocumentModel.DataTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataType' */
	public Object visit(edoc.ECA.DocumentModel.DataType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataType ---
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.Enumeration_' */
	public Object visit(edoc.ECA.DocumentModel.Enumeration_Factory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.Enumeration_' */
	public Object visit(edoc.ECA.DocumentModel.Enumeration_ host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Enumeration_ ---
		//--- Association values ---
		DefaultMutableTreeNode valuesNode = getNode(this, "values", host.getValues(), data);
		root.add(valuesNode);
		//--- Association initial ---
		DefaultMutableTreeNode initialNode = getNode(this, "initial", host.getInitial(), data);
		root.add(initialNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.CompositeData' */
	public Object visit(edoc.ECA.DocumentModel.CompositeDataFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.CompositeData' */
	public Object visit(edoc.ECA.DocumentModel.CompositeData host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CompositeData ---
		//--- Association features ---
		DefaultMutableTreeNode featuresNode = getNode(this, "features", host.getFeatures(), data);
		root.add(featuresNode);
		//--- Association superTypes ---
		DefaultMutableTreeNode superTypesNode = getNode(this, "superTypes", host.getSuperTypes(), data);
		root.add(superTypesNode);
		//--- Association subTypes ---
		DefaultMutableTreeNode subTypesNode = getNode(this, "subTypes", host.getSubTypes(), data);
		root.add(subTypesNode);
		//--- Association managedBy ---
		DefaultMutableTreeNode managedByNode = getNode(this, "managedBy", host.getManagedBy(), data);
		root.add(managedByNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.EnumerationValue' */
	public Object visit(edoc.ECA.DocumentModel.EnumerationValueFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.EnumerationValue' */
	public Object visit(edoc.ECA.DocumentModel.EnumerationValue host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EnumerationValue ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association enumeration ---
		DefaultMutableTreeNode enumerationNode = getNode(this, "enumeration", host.getEnumeration(), data);
		root.add(enumerationNode);
		//--- Association initialFor ---
		DefaultMutableTreeNode initialForNode = getNode(this, "initialFor", host.getInitialFor(), data);
		root.add(initialForNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.ExternalDocument' */
	public Object visit(edoc.ECA.DocumentModel.ExternalDocumentFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.ExternalDocument' */
	public Object visit(edoc.ECA.DocumentModel.ExternalDocument host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ExternalDocument ---
		//--- Properties for DataType ---
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.Attribute' */
	public Object visit(edoc.ECA.DocumentModel.AttributeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.Attribute' */
	public Object visit(edoc.ECA.DocumentModel.Attribute host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Attribute ---
		//--- Property byValue ---
		DefaultMutableTreeNode byValueNode = getNode(this, "byValue", host.getByValue(), data);
		root.add(byValueNode);
		//--- Property required ---
		DefaultMutableTreeNode requiredNode = getNode(this, "required", host.getRequired(), data);
		root.add(requiredNode);
		//--- Property many ---
		DefaultMutableTreeNode manyNode = getNode(this, "many", host.getMany(), data);
		root.add(manyNode);
		//--- Property initialValue ---
		DefaultMutableTreeNode initialValueNode = getNode(this, "initialValue", host.getInitialValue(), data);
		root.add(initialValueNode);
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association keyAttribute ---
		DefaultMutableTreeNode keyAttributeNode = getNode(this, "keyAttribute", host.getKeyAttribute(), data);
		root.add(keyAttributeNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Choreography' */
	public Object visit(edoc.ECA.CCA.Choreography host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Node' */
	public Object visit(edoc.ECA.CCA.Node host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PseudoState' */
	public Object visit(edoc.ECA.CCA.PseudoStateFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PseudoState' */
	public Object visit(edoc.ECA.CCA.PseudoState host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PseudoState ---
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.AbstractTransition' */
	public Object visit(edoc.ECA.CCA.AbstractTransition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Transition' */
	public Object visit(edoc.ECA.CCA.TransitionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Transition' */
	public Object visit(edoc.ECA.CCA.Transition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Transition ---
		//--- Property precondition ---
		DefaultMutableTreeNode preconditionNode = getNode(this, "precondition", host.getPrecondition(), data);
		root.add(preconditionNode);
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Connection' */
	public Object visit(edoc.ECA.CCA.ConnectionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Connection' */
	public Object visit(edoc.ECA.CCA.Connection host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.UsageContext' */
	public Object visit(edoc.ECA.CCA.UsageContext host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PortUseage' */
	public Object visit(edoc.ECA.CCA.PortUseage host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortUseage ---
		//--- Association extent ---
		DefaultMutableTreeNode extentNode = getNode(this, "extent", host.getExtent(), data);
		root.add(extentNode);
		//--- Association represents ---
		DefaultMutableTreeNode representsNode = getNode(this, "represents", host.getRepresents(), data);
		root.add(representsNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PortActivity' */
	public Object visit(edoc.ECA.CCA.PortActivityFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PortActivity' */
	public Object visit(edoc.ECA.CCA.PortActivity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortActivity ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		DefaultMutableTreeNode extentNode = getNode(this, "extent", host.getExtent(), data);
		root.add(extentNode);
		//--- Association represents ---
		DefaultMutableTreeNode representsNode = getNode(this, "represents", host.getRepresents(), data);
		root.add(representsNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Composition' */
	public Object visit(edoc.ECA.CCA.Composition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.CommunityProcess' */
	public Object visit(edoc.ECA.CCA.CommunityProcessFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.CommunityProcess' */
	public Object visit(edoc.ECA.CCA.CommunityProcess host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CommunityProcess ---
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.ContextualBinding' */
	public Object visit(edoc.ECA.CCA.ContextualBindingFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.ContextualBinding' */
	public Object visit(edoc.ECA.CCA.ContextualBinding host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ContextualBinding ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association fills ---
		DefaultMutableTreeNode fillsNode = getNode(this, "fills", host.getFills(), data);
		root.add(fillsNode);
		//--- Association bindsTo ---
		DefaultMutableTreeNode bindsToNode = getNode(this, "bindsTo", host.getBindsTo(), data);
		root.add(bindsToNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.ComponentUsage' */
	public Object visit(edoc.ECA.CCA.ComponentUsageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.ComponentUsage' */
	public Object visit(edoc.ECA.CCA.ComponentUsage host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PropertyValue' */
	public Object visit(edoc.ECA.CCA.PropertyValueFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PropertyValue' */
	public Object visit(edoc.ECA.CCA.PropertyValue host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PropertyValue ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association fills ---
		DefaultMutableTreeNode fillsNode = getNode(this, "fills", host.getFills(), data);
		root.add(fillsNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PortConnector' */
	public Object visit(edoc.ECA.CCA.PortConnectorFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PortConnector' */
	public Object visit(edoc.ECA.CCA.PortConnector host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortConnector ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		DefaultMutableTreeNode extentNode = getNode(this, "extent", host.getExtent(), data);
		root.add(extentNode);
		//--- Association represents ---
		DefaultMutableTreeNode representsNode = getNode(this, "represents", host.getRepresents(), data);
		root.add(representsNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PropertyDefinition' */
	public Object visit(edoc.ECA.CCA.PropertyDefinitionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PropertyDefinition' */
	public Object visit(edoc.ECA.CCA.PropertyDefinition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PropertyDefinition ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property initial ---
		DefaultMutableTreeNode initialNode = getNode(this, "initial", host.getInitial(), data);
		root.add(initialNode);
		//--- Property isLocked ---
		DefaultMutableTreeNode isLockedNode = getNode(this, "isLocked", host.getIsLocked(), data);
		root.add(isLockedNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association component ---
		DefaultMutableTreeNode componentNode = getNode(this, "component", host.getComponent(), data);
		root.add(componentNode);
		//--- Association constrains ---
		DefaultMutableTreeNode constrainsNode = getNode(this, "constrains", host.getConstrains(), data);
		root.add(constrainsNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Flow' */
	public Object visit(edoc.ECA.CCA.FlowFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Flow' */
	public Object visit(edoc.ECA.CCA.Flow host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Flow ---
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PortOwner' */
	public Object visit(edoc.ECA.CCA.PortOwner host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Protocol' */
	public Object visit(edoc.ECA.CCA.ProtocolFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Protocol' */
	public Object visit(edoc.ECA.CCA.Protocol host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Protocol ---
		//--- Association initiator ---
		DefaultMutableTreeNode initiatorNode = getNode(this, "initiator", host.getInitiator(), data);
		root.add(initiatorNode);
		//--- Association responder ---
		DefaultMutableTreeNode responderNode = getNode(this, "responder", host.getResponder(), data);
		root.add(responderNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.InitiatingRole' */
	public Object visit(edoc.ECA.CCA.InitiatingRoleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.InitiatingRole' */
	public Object visit(edoc.ECA.CCA.InitiatingRole host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for InitiatingRole ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association protocol ---
		DefaultMutableTreeNode protocolNode = getNode(this, "protocol", host.getProtocol(), data);
		root.add(protocolNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.RespondingRole' */
	public Object visit(edoc.ECA.CCA.RespondingRoleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.RespondingRole' */
	public Object visit(edoc.ECA.CCA.RespondingRole host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for RespondingRole ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association protocol ---
		DefaultMutableTreeNode protocolNode = getNode(this, "protocol", host.getProtocol(), data);
		root.add(protocolNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Interface' */
	public Object visit(edoc.ECA.CCA.InterfaceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Interface' */
	public Object visit(edoc.ECA.CCA.Interface host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Interface ---
		//--- Properties for Protocol ---
		//--- Association initiator ---
		DefaultMutableTreeNode initiatorNode = getNode(this, "initiator", host.getInitiator(), data);
		root.add(initiatorNode);
		//--- Association responder ---
		DefaultMutableTreeNode responderNode = getNode(this, "responder", host.getResponder(), data);
		root.add(responderNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Port' */
	public Object visit(edoc.ECA.CCA.Port host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.MultiPort' */
	public Object visit(edoc.ECA.CCA.MultiPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.MultiPort' */
	public Object visit(edoc.ECA.CCA.MultiPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.OperationPort' */
	public Object visit(edoc.ECA.CCA.OperationPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.OperationPort' */
	public Object visit(edoc.ECA.CCA.OperationPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OperationPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.FlowPort' */
	public Object visit(edoc.ECA.CCA.FlowPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.FlowPort' */
	public Object visit(edoc.ECA.CCA.FlowPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for FlowPort ---
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association typeProperty ---
		DefaultMutableTreeNode typePropertyNode = getNode(this, "typeProperty", host.getTypeProperty(), data);
		root.add(typePropertyNode);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.ProtocolPort' */
	public Object visit(edoc.ECA.CCA.ProtocolPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.ProtocolPort' */
	public Object visit(edoc.ECA.CCA.ProtocolPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProtocolPort ---
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.ProcessComponent' */
	public Object visit(edoc.ECA.CCA.ProcessComponentFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.ProcessComponent' */
	public Object visit(edoc.ECA.CCA.ProcessComponent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.DirectionType' */
	public Object visit(edoc.ECA.CCA.DirectionTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.DirectionType' */
	public Object visit(edoc.ECA.CCA.DirectionType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DirectionType ---
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.Status' */
	public Object visit(edoc.ECA.CCA.StatusFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.Status' */
	public Object visit(edoc.ECA.CCA.Status host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Status ---
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.GranularityKind' */
	public Object visit(edoc.ECA.CCA.GranularityKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.GranularityKind' */
	public Object visit(edoc.ECA.CCA.GranularityKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for GranularityKind ---
		return root;
	}
	/** Visit factory for 'edoc.ECA.CCA.PseudoStateKind' */
	public Object visit(edoc.ECA.CCA.PseudoStateKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.CCA.PseudoStateKind' */
	public Object visit(edoc.ECA.CCA.PseudoStateKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PseudoStateKind ---
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.DataProbe' */
	public Object visit(edoc.ECA.EntityPkg.DataProbeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.DataProbe' */
	public Object visit(edoc.ECA.EntityPkg.DataProbe host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataProbe ---
		//--- Property extentProbe ---
		DefaultMutableTreeNode extentProbeNode = getNode(this, "extentProbe", host.getExtentProbe(), data);
		root.add(extentProbeNode);
		//--- Association probes ---
		DefaultMutableTreeNode probesNode = getNode(this, "probes", host.getProbes(), data);
		root.add(probesNode);
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.DataManager' */
	public Object visit(edoc.ECA.EntityPkg.DataManagerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.DataManager' */
	public Object visit(edoc.ECA.EntityPkg.DataManager host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		DefaultMutableTreeNode networkAccessNode = getNode(this, "networkAccess", host.getNetworkAccess(), data);
		root.add(networkAccessNode);
		//--- Property shareable ---
		DefaultMutableTreeNode shareableNode = getNode(this, "shareable", host.getShareable(), data);
		root.add(shareableNode);
		//--- Association manages ---
		DefaultMutableTreeNode managesNode = getNode(this, "manages", host.getManages(), data);
		root.add(managesNode);
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.Entity' */
	public Object visit(edoc.ECA.EntityPkg.EntityFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.Entity' */
	public Object visit(edoc.ECA.EntityPkg.Entity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Entity ---
		//--- Property managed ---
		DefaultMutableTreeNode managedNode = getNode(this, "managed", host.getManaged(), data);
		root.add(managedNode);
		//--- Association probedBy ---
		DefaultMutableTreeNode probedByNode = getNode(this, "probedBy", host.getProbedBy(), data);
		root.add(probedByNode);
		//--- Association parentOf ---
		DefaultMutableTreeNode parentOfNode = getNode(this, "parentOf", host.getParentOf(), data);
		root.add(parentOfNode);
		//--- Association contextFor ---
		DefaultMutableTreeNode contextForNode = getNode(this, "contextFor", host.getContextFor(), data);
		root.add(contextForNode);
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		DefaultMutableTreeNode networkAccessNode = getNode(this, "networkAccess", host.getNetworkAccess(), data);
		root.add(networkAccessNode);
		//--- Property shareable ---
		DefaultMutableTreeNode shareableNode = getNode(this, "shareable", host.getShareable(), data);
		root.add(shareableNode);
		//--- Association manages ---
		DefaultMutableTreeNode managesNode = getNode(this, "manages", host.getManages(), data);
		root.add(managesNode);
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.EntityRole' */
	public Object visit(edoc.ECA.EntityPkg.EntityRoleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.EntityRole' */
	public Object visit(edoc.ECA.EntityPkg.EntityRole host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EntityRole ---
		//--- Property virtualEntity ---
		DefaultMutableTreeNode virtualEntityNode = getNode(this, "virtualEntity", host.getVirtualEntity(), data);
		root.add(virtualEntityNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association roleContext ---
		DefaultMutableTreeNode roleContextNode = getNode(this, "roleContext", host.getRoleContext(), data);
		root.add(roleContextNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.Key' */
	public Object visit(edoc.ECA.EntityPkg.KeyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.Key' */
	public Object visit(edoc.ECA.EntityPkg.Key host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Key ---
		//--- Property primaryKey ---
		DefaultMutableTreeNode primaryKeyNode = getNode(this, "primaryKey", host.getPrimaryKey(), data);
		root.add(primaryKeyNode);
		//--- Association keyElements ---
		DefaultMutableTreeNode keyElementsNode = getNode(this, "keyElements", host.getKeyElements(), data);
		root.add(keyElementsNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for CompositeData ---
		//--- Association features ---
		DefaultMutableTreeNode featuresNode = getNode(this, "features", host.getFeatures(), data);
		root.add(featuresNode);
		//--- Association superTypes ---
		DefaultMutableTreeNode superTypesNode = getNode(this, "superTypes", host.getSuperTypes(), data);
		root.add(superTypesNode);
		//--- Association subTypes ---
		DefaultMutableTreeNode subTypesNode = getNode(this, "subTypes", host.getSubTypes(), data);
		root.add(subTypesNode);
		//--- Association managedBy ---
		DefaultMutableTreeNode managedByNode = getNode(this, "managedBy", host.getManagedBy(), data);
		root.add(managedByNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.KeyElement' */
	public Object visit(edoc.ECA.EntityPkg.KeyElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.KeyElement' */
	public Object visit(edoc.ECA.EntityPkg.KeyElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		DefaultMutableTreeNode containingKeyNode = getNode(this, "containingKey", host.getContainingKey(), data);
		root.add(containingKeyNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.KeyAttribute' */
	public Object visit(edoc.ECA.EntityPkg.KeyAttributeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.KeyAttribute' */
	public Object visit(edoc.ECA.EntityPkg.KeyAttribute host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for KeyAttribute ---
		//--- Association attributeName ---
		DefaultMutableTreeNode attributeNameNode = getNode(this, "attributeName", host.getAttributeName(), data);
		root.add(attributeNameNode);
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		DefaultMutableTreeNode containingKeyNode = getNode(this, "containingKey", host.getContainingKey(), data);
		root.add(containingKeyNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.ForeignKey' */
	public Object visit(edoc.ECA.EntityPkg.ForeignKeyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.ForeignKey' */
	public Object visit(edoc.ECA.EntityPkg.ForeignKey host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ForeignKey ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		DefaultMutableTreeNode containingKeyNode = getNode(this, "containingKey", host.getContainingKey(), data);
		root.add(containingKeyNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.EntityData' */
	public Object visit(edoc.ECA.EntityPkg.EntityDataFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.EntityData' */
	public Object visit(edoc.ECA.EntityPkg.EntityData host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EntityData ---
		//--- Association keys ---
		DefaultMutableTreeNode keysNode = getNode(this, "keys", host.getKeys(), data);
		root.add(keysNode);
		//--- Association foreignKeys ---
		DefaultMutableTreeNode foreignKeysNode = getNode(this, "foreignKeys", host.getForeignKeys(), data);
		root.add(foreignKeysNode);
		//--- Properties for CompositeData ---
		//--- Association features ---
		DefaultMutableTreeNode featuresNode = getNode(this, "features", host.getFeatures(), data);
		root.add(featuresNode);
		//--- Association superTypes ---
		DefaultMutableTreeNode superTypesNode = getNode(this, "superTypes", host.getSuperTypes(), data);
		root.add(superTypesNode);
		//--- Association subTypes ---
		DefaultMutableTreeNode subTypesNode = getNode(this, "subTypes", host.getSubTypes(), data);
		root.add(subTypesNode);
		//--- Association managedBy ---
		DefaultMutableTreeNode managedByNode = getNode(this, "managedBy", host.getManagedBy(), data);
		root.add(managedByNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.EventCondition' */
	public Object visit(edoc.ECA.Event.EventConditionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.EventCondition' */
	public Object visit(edoc.ECA.Event.EventCondition host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EventCondition ---
		//--- Property condition ---
		DefaultMutableTreeNode conditionNode = getNode(this, "condition", host.getCondition(), data);
		root.add(conditionNode);
		//--- Association guardedBy ---
		DefaultMutableTreeNode guardedByNode = getNode(this, "guardedBy", host.getGuardedBy(), data);
		root.add(guardedByNode);
		//--- Association requires ---
		DefaultMutableTreeNode requiresNode = getNode(this, "requires", host.getRequires(), data);
		root.add(requiresNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.NotificationRule' */
	public Object visit(edoc.ECA.Event.NotificationRuleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.NotificationRule' */
	public Object visit(edoc.ECA.Event.NotificationRule host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for NotificationRule ---
		//--- Property condition ---
		DefaultMutableTreeNode conditionNode = getNode(this, "condition", host.getCondition(), data);
		root.add(conditionNode);
		//--- Association guards ---
		DefaultMutableTreeNode guardsNode = getNode(this, "guards", host.getGuards(), data);
		root.add(guardsNode);
		//--- Association governs ---
		DefaultMutableTreeNode governsNode = getNode(this, "governs", host.getGoverns(), data);
		root.add(governsNode);
		//--- Association ruleContext ---
		DefaultMutableTreeNode ruleContextNode = getNode(this, "ruleContext", host.getRuleContext(), data);
		root.add(ruleContextNode);
		//--- Association subscription ---
		DefaultMutableTreeNode subscriptionNode = getNode(this, "subscription", host.getSubscription(), data);
		root.add(subscriptionNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.Subscription' */
	public Object visit(edoc.ECA.Event.SubscriptionFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.Subscription' */
	public Object visit(edoc.ECA.Event.Subscription host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Subscription ---
		//--- Property subscriptionClause ---
		DefaultMutableTreeNode subscriptionClauseNode = getNode(this, "subscriptionClause", host.getSubscriptionClause(), data);
		root.add(subscriptionClauseNode);
		//--- Property domain ---
		DefaultMutableTreeNode domainNode = getNode(this, "domain", host.getDomain(), data);
		root.add(domainNode);
		//--- Association requiredBy ---
		DefaultMutableTreeNode requiredByNode = getNode(this, "requiredBy", host.getRequiredBy(), data);
		root.add(requiredByNode);
		//--- Association rules ---
		DefaultMutableTreeNode rulesNode = getNode(this, "rules", host.getRules(), data);
		root.add(rulesNode);
		//--- Association heldBy ---
		DefaultMutableTreeNode heldByNode = getNode(this, "heldBy", host.getHeldBy(), data);
		root.add(heldByNode);
		//--- Association subscribedBy ---
		DefaultMutableTreeNode subscribedByNode = getNode(this, "subscribedBy", host.getSubscribedBy(), data);
		root.add(subscribedByNode);
		//--- Properties for FlowPort ---
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association typeProperty ---
		DefaultMutableTreeNode typePropertyNode = getNode(this, "typeProperty", host.getTypeProperty(), data);
		root.add(typePropertyNode);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.Subscriber' */
	public Object visit(edoc.ECA.Event.Subscriber host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		DefaultMutableTreeNode subscriptionsNode = getNode(this, "subscriptions", host.getSubscriptions(), data);
		root.add(subscriptionsNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.Publication' */
	public Object visit(edoc.ECA.Event.PublicationFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.Publication' */
	public Object visit(edoc.ECA.Event.Publication host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Publication ---
		//--- Property publicationClause ---
		DefaultMutableTreeNode publicationClauseNode = getNode(this, "publicationClause", host.getPublicationClause(), data);
		root.add(publicationClauseNode);
		//--- Property domain ---
		DefaultMutableTreeNode domainNode = getNode(this, "domain", host.getDomain(), data);
		root.add(domainNode);
		//--- Association offeredBy ---
		DefaultMutableTreeNode offeredByNode = getNode(this, "offeredBy", host.getOfferedBy(), data);
		root.add(offeredByNode);
		//--- Association announcedBy ---
		DefaultMutableTreeNode announcedByNode = getNode(this, "announcedBy", host.getAnnouncedBy(), data);
		root.add(announcedByNode);
		//--- Properties for FlowPort ---
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association typeProperty ---
		DefaultMutableTreeNode typePropertyNode = getNode(this, "typeProperty", host.getTypeProperty(), data);
		root.add(typePropertyNode);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.Publisher' */
	public Object visit(edoc.ECA.Event.Publisher host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Publisher ---
		//--- Association offers ---
		DefaultMutableTreeNode offersNode = getNode(this, "offers", host.getOffers(), data);
		root.add(offersNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.PubSubNotice' */
	public Object visit(edoc.ECA.Event.PubSubNoticeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.PubSubNotice' */
	public Object visit(edoc.ECA.Event.PubSubNotice host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PubSubNotice ---
		//--- Association subscribesTo ---
		DefaultMutableTreeNode subscribesToNode = getNode(this, "subscribesTo", host.getSubscribesTo(), data);
		root.add(subscribesToNode);
		//--- Association announces ---
		DefaultMutableTreeNode announcesNode = getNode(this, "announces", host.getAnnounces(), data);
		root.add(announcesNode);
		//--- Properties for CompositeData ---
		//--- Association features ---
		DefaultMutableTreeNode featuresNode = getNode(this, "features", host.getFeatures(), data);
		root.add(featuresNode);
		//--- Association superTypes ---
		DefaultMutableTreeNode superTypesNode = getNode(this, "superTypes", host.getSuperTypes(), data);
		root.add(superTypesNode);
		//--- Association subTypes ---
		DefaultMutableTreeNode subTypesNode = getNode(this, "subTypes", host.getSubTypes(), data);
		root.add(subTypesNode);
		//--- Association managedBy ---
		DefaultMutableTreeNode managedByNode = getNode(this, "managedBy", host.getManagedBy(), data);
		root.add(managedByNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.EventBasedProcess' */
	public Object visit(edoc.ECA.Event.EventBasedProcessFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.EventBasedProcess' */
	public Object visit(edoc.ECA.Event.EventBasedProcess host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EventBasedProcess ---
		//--- Association notificationRules ---
		DefaultMutableTreeNode notificationRulesNode = getNode(this, "notificationRules", host.getNotificationRules(), data);
		root.add(notificationRulesNode);
		//--- Association processEvents ---
		DefaultMutableTreeNode processEventsNode = getNode(this, "processEvents", host.getProcessEvents(), data);
		root.add(processEventsNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		DefaultMutableTreeNode subscriptionsNode = getNode(this, "subscriptions", host.getSubscriptions(), data);
		root.add(subscriptionsNode);
		//--- Properties for Publisher ---
		//--- Association offers ---
		DefaultMutableTreeNode offersNode = getNode(this, "offers", host.getOffers(), data);
		root.add(offersNode);
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.BusinessEvent' */
	public Object visit(edoc.ECA.Event.BusinessEvent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		DefaultMutableTreeNode describedByNode = getNode(this, "describedBy", host.getDescribedBy(), data);
		root.add(describedByNode);
		//--- Association triggers ---
		DefaultMutableTreeNode triggersNode = getNode(this, "triggers", host.getTriggers(), data);
		root.add(triggersNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.EventNotice' */
	public Object visit(edoc.ECA.Event.EventNoticeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.EventNotice' */
	public Object visit(edoc.ECA.Event.EventNotice host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EventNotice ---
		//--- Association describes ---
		DefaultMutableTreeNode describesNode = getNode(this, "describes", host.getDescribes(), data);
		root.add(describesNode);
		//--- Association triggeredBy ---
		DefaultMutableTreeNode triggeredByNode = getNode(this, "triggeredBy", host.getTriggeredBy(), data);
		root.add(triggeredByNode);
		//--- Properties for PubSubNotice ---
		//--- Association subscribesTo ---
		DefaultMutableTreeNode subscribesToNode = getNode(this, "subscribesTo", host.getSubscribesTo(), data);
		root.add(subscribesToNode);
		//--- Association announces ---
		DefaultMutableTreeNode announcesNode = getNode(this, "announces", host.getAnnounces(), data);
		root.add(announcesNode);
		//--- Properties for CompositeData ---
		//--- Association features ---
		DefaultMutableTreeNode featuresNode = getNode(this, "features", host.getFeatures(), data);
		root.add(featuresNode);
		//--- Association superTypes ---
		DefaultMutableTreeNode superTypesNode = getNode(this, "superTypes", host.getSuperTypes(), data);
		root.add(superTypesNode);
		//--- Association subTypes ---
		DefaultMutableTreeNode subTypesNode = getNode(this, "subTypes", host.getSubTypes(), data);
		root.add(subTypesNode);
		//--- Association managedBy ---
		DefaultMutableTreeNode managedByNode = getNode(this, "managedBy", host.getManagedBy(), data);
		root.add(managedByNode);
		//--- Properties for DataElement ---
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		//--- Association attrs ---
		DefaultMutableTreeNode attrsNode = getNode(this, "attrs", host.getAttrs(), data);
		root.add(attrsNode);
		//--- Association flowTypeOf ---
		DefaultMutableTreeNode flowTypeOfNode = getNode(this, "flowTypeOf", host.getFlowTypeOf(), data);
		root.add(flowTypeOfNode);
		//--- Association propertyTypeOf ---
		DefaultMutableTreeNode propertyTypeOfNode = getNode(this, "propertyTypeOf", host.getPropertyTypeOf(), data);
		root.add(propertyTypeOfNode);
		//--- Properties for PackageContent ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association namespace_ ---
		DefaultMutableTreeNode namespace_Node = getNode(this, "namespace_", host.getNamespace_(), data);
		root.add(namespace_Node);
		//--- Association elementImport ---
		DefaultMutableTreeNode elementImportNode = getNode(this, "elementImport", host.getElementImport(), data);
		root.add(elementImportNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.ProcessEvent' */
	public Object visit(edoc.ECA.Event.ProcessEventFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.ProcessEvent' */
	public Object visit(edoc.ECA.Event.ProcessEvent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessEvent ---
		//--- Property entry ---
		DefaultMutableTreeNode entryNode = getNode(this, "entry", host.getEntry(), data);
		root.add(entryNode);
		//--- Property success ---
		DefaultMutableTreeNode successNode = getNode(this, "success", host.getSuccess(), data);
		root.add(successNode);
		//--- Association eventContext ---
		DefaultMutableTreeNode eventContextNode = getNode(this, "eventContext", host.getEventContext(), data);
		root.add(eventContextNode);
		//--- Association reflects ---
		DefaultMutableTreeNode reflectsNode = getNode(this, "reflects", host.getReflects(), data);
		root.add(reflectsNode);
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		DefaultMutableTreeNode describedByNode = getNode(this, "describedBy", host.getDescribedBy(), data);
		root.add(describedByNode);
		//--- Association triggers ---
		DefaultMutableTreeNode triggersNode = getNode(this, "triggers", host.getTriggers(), data);
		root.add(triggersNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.EventBasedDataManager' */
	public Object visit(edoc.ECA.Event.EventBasedDataManagerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.EventBasedDataManager' */
	public Object visit(edoc.ECA.Event.EventBasedDataManager host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EventBasedDataManager ---
		//--- Association dataEvents ---
		DefaultMutableTreeNode dataEventsNode = getNode(this, "dataEvents", host.getDataEvents(), data);
		root.add(dataEventsNode);
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		DefaultMutableTreeNode networkAccessNode = getNode(this, "networkAccess", host.getNetworkAccess(), data);
		root.add(networkAccessNode);
		//--- Property shareable ---
		DefaultMutableTreeNode shareableNode = getNode(this, "shareable", host.getShareable(), data);
		root.add(shareableNode);
		//--- Association manages ---
		DefaultMutableTreeNode managesNode = getNode(this, "manages", host.getManages(), data);
		root.add(managesNode);
		//--- Properties for EventBasedProcess ---
		//--- Association notificationRules ---
		DefaultMutableTreeNode notificationRulesNode = getNode(this, "notificationRules", host.getNotificationRules(), data);
		root.add(notificationRulesNode);
		//--- Association processEvents ---
		DefaultMutableTreeNode processEventsNode = getNode(this, "processEvents", host.getProcessEvents(), data);
		root.add(processEventsNode);
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		DefaultMutableTreeNode subscriptionsNode = getNode(this, "subscriptions", host.getSubscriptions(), data);
		root.add(subscriptionsNode);
		//--- Properties for Publisher ---
		//--- Association offers ---
		DefaultMutableTreeNode offersNode = getNode(this, "offers", host.getOffers(), data);
		root.add(offersNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.Event.DataEvent' */
	public Object visit(edoc.ECA.Event.DataEventFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.Event.DataEvent' */
	public Object visit(edoc.ECA.Event.DataEvent host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataEvent ---
		//--- Association eventContext ---
		DefaultMutableTreeNode eventContextNode = getNode(this, "eventContext", host.getEventContext(), data);
		root.add(eventContextNode);
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		DefaultMutableTreeNode describedByNode = getNode(this, "describedBy", host.getDescribedBy(), data);
		root.add(describedByNode);
		//--- Association triggers ---
		DefaultMutableTreeNode triggersNode = getNode(this, "triggers", host.getTriggers(), data);
		root.add(triggersNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Activity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ActivityFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Activity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Activity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Activity ---
		//--- Association usesArtifact ---
		DefaultMutableTreeNode usesArtifactNode = getNode(this, "usesArtifact", host.getUsesArtifact(), data);
		root.add(usesArtifactNode);
		//--- Association performedBy ---
		DefaultMutableTreeNode performedByNode = getNode(this, "performedBy", host.getPerformedBy(), data);
		root.add(performedByNode);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.BusinessProcess' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.BusinessProcess' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcess host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BusinessProcess ---
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.CompoundTask' */
	public Object visit(edoc.ECA.BusinessProcessPkg.CompoundTaskFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.CompoundTask' */
	public Object visit(edoc.ECA.BusinessProcessPkg.CompoundTask host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CompoundTask ---
		//--- Properties for BusinessProcess ---
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.BusinessProcessEntity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessEntityFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.BusinessProcessEntity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessEntity host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BusinessProcessEntity ---
		//--- Properties for Entity ---
		//--- Property managed ---
		DefaultMutableTreeNode managedNode = getNode(this, "managed", host.getManaged(), data);
		root.add(managedNode);
		//--- Association probedBy ---
		DefaultMutableTreeNode probedByNode = getNode(this, "probedBy", host.getProbedBy(), data);
		root.add(probedByNode);
		//--- Association parentOf ---
		DefaultMutableTreeNode parentOfNode = getNode(this, "parentOf", host.getParentOf(), data);
		root.add(parentOfNode);
		//--- Association contextFor ---
		DefaultMutableTreeNode contextForNode = getNode(this, "contextFor", host.getContextFor(), data);
		root.add(contextForNode);
		//--- Properties for BusinessProcess ---
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		DefaultMutableTreeNode networkAccessNode = getNode(this, "networkAccess", host.getNetworkAccess(), data);
		root.add(networkAccessNode);
		//--- Property shareable ---
		DefaultMutableTreeNode shareableNode = getNode(this, "shareable", host.getShareable(), data);
		root.add(shareableNode);
		//--- Association manages ---
		DefaultMutableTreeNode managesNode = getNode(this, "manages", host.getManages(), data);
		root.add(managesNode);
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		DefaultMutableTreeNode granularityNode = getNode(this, "granularity", host.getGranularity(), data);
		root.add(granularityNode);
		//--- Property isPersistent ---
		DefaultMutableTreeNode isPersistentNode = getNode(this, "isPersistent", host.getIsPersistent(), data);
		root.add(isPersistentNode);
		//--- Property primitiveKind ---
		DefaultMutableTreeNode primitiveKindNode = getNode(this, "primitiveKind", host.getPrimitiveKind(), data);
		root.add(primitiveKindNode);
		//--- Property primitiveSpec ---
		DefaultMutableTreeNode primitiveSpecNode = getNode(this, "primitiveSpec", host.getPrimitiveSpec(), data);
		root.add(primitiveSpecNode);
		//--- Association contextualBindings ---
		DefaultMutableTreeNode contextualBindingsNode = getNode(this, "contextualBindings", host.getContextualBindings(), data);
		root.add(contextualBindingsNode);
		//--- Association usedBy ---
		DefaultMutableTreeNode usedByNode = getNode(this, "usedBy", host.getUsedBy(), data);
		root.add(usedByNode);
		//--- Association properties ---
		DefaultMutableTreeNode propertiesNode = getNode(this, "properties", host.getProperties(), data);
		root.add(propertiesNode);
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Composition ---
		//--- Association bindings ---
		DefaultMutableTreeNode bindingsNode = getNode(this, "bindings", host.getBindings(), data);
		root.add(bindingsNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Choreography ---
		//--- Association nodes ---
		DefaultMutableTreeNode nodesNode = getNode(this, "nodes", host.getNodes(), data);
		root.add(nodesNode);
		//--- Association connections ---
		DefaultMutableTreeNode connectionsNode = getNode(this, "connections", host.getConnections(), data);
		root.add(connectionsNode);
		//--- Association supertype ---
		DefaultMutableTreeNode supertypeNode = getNode(this, "supertype", host.getSupertype(), data);
		root.add(supertypeNode);
		//--- Association subtypes ---
		DefaultMutableTreeNode subtypesNode = getNode(this, "subtypes", host.getSubtypes(), data);
		root.add(subtypesNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessMultiPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessMultiPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessMultiPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessMultiPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.InputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.InputGroupFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.InputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.InputGroup host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for InputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.OutputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.OutputGroupFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.OutputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.OutputGroup host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OutputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ExceptionGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ExceptionGroupFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ExceptionGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ExceptionGroup host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ExceptionGroup ---
		//--- Properties for OutputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association ports ---
		DefaultMutableTreeNode portsNode = getNode(this, "ports", host.getPorts(), data);
		root.add(portsNode);
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessFlowPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessFlowPortFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessFlowPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessFlowPort host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessFlowPort ---
		//--- Property multiplicity_lb ---
		DefaultMutableTreeNode multiplicity_lbNode = getNode(this, "multiplicity_lb", host.getMultiplicity_lb(), data);
		root.add(multiplicity_lbNode);
		//--- Property multiplicity_ub ---
		DefaultMutableTreeNode multiplicity_ubNode = getNode(this, "multiplicity_ub", host.getMultiplicity_ub(), data);
		root.add(multiplicity_ubNode);
		//--- Properties for FlowPort ---
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association typeProperty ---
		DefaultMutableTreeNode typePropertyNode = getNode(this, "typeProperty", host.getTypeProperty(), data);
		root.add(typePropertyNode);
		//--- Properties for Port ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property isSynchronous ---
		DefaultMutableTreeNode isSynchronousNode = getNode(this, "isSynchronous", host.getIsSynchronous(), data);
		root.add(isSynchronousNode);
		//--- Property isTransactional ---
		DefaultMutableTreeNode isTransactionalNode = getNode(this, "isTransactional", host.getIsTransactional(), data);
		root.add(isTransactionalNode);
		//--- Property direction ---
		DefaultMutableTreeNode directionNode = getNode(this, "direction", host.getDirection(), data);
		root.add(directionNode);
		//--- Property postCondition ---
		DefaultMutableTreeNode postConditionNode = getNode(this, "postCondition", host.getPostCondition(), data);
		root.add(postConditionNode);
		//--- Association representedBy ---
		DefaultMutableTreeNode representedByNode = getNode(this, "representedBy", host.getRepresentedBy(), data);
		root.add(representedByNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessPortConnector' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessPortConnectorFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessPortConnector' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessPortConnector host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessPortConnector ---
		//--- Properties for PortConnector ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		DefaultMutableTreeNode extentNode = getNode(this, "extent", host.getExtent(), data);
		root.add(extentNode);
		//--- Association represents ---
		DefaultMutableTreeNode representsNode = getNode(this, "represents", host.getRepresents(), data);
		root.add(representsNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		//--- Properties for Node ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association incoming ---
		DefaultMutableTreeNode incomingNode = getNode(this, "incoming", host.getIncoming(), data);
		root.add(incomingNode);
		//--- Association outgoing ---
		DefaultMutableTreeNode outgoingNode = getNode(this, "outgoing", host.getOutgoing(), data);
		root.add(outgoingNode);
		//--- Association governedBy ---
		DefaultMutableTreeNode governedByNode = getNode(this, "governedBy", host.getGovernedBy(), data);
		root.add(governedByNode);
		//--- Association reflectedIn ---
		DefaultMutableTreeNode reflectedInNode = getNode(this, "reflectedIn", host.getReflectedIn(), data);
		root.add(reflectedInNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.DataFlow' */
	public Object visit(edoc.ECA.BusinessProcessPkg.DataFlowFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.DataFlow' */
	public Object visit(edoc.ECA.BusinessProcessPkg.DataFlow host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataFlow ---
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessRole' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessRoleFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessRole' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessRole host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		DefaultMutableTreeNode selectionRuleNode = getNode(this, "selectionRule", host.getSelectionRule(), data);
		root.add(selectionRuleNode);
		//--- Property creationRule ---
		DefaultMutableTreeNode creationRuleNode = getNode(this, "creationRule", host.getCreationRule(), data);
		root.add(creationRuleNode);
		//--- Association artifactFor ---
		DefaultMutableTreeNode artifactForNode = getNode(this, "artifactFor", host.getArtifactFor(), data);
		root.add(artifactForNode);
		//--- Association performs ---
		DefaultMutableTreeNode performsNode = getNode(this, "performs", host.getPerforms(), data);
		root.add(performsNode);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Performer' */
	public Object visit(edoc.ECA.BusinessProcessPkg.PerformerFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Performer' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Performer host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Performer ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		DefaultMutableTreeNode selectionRuleNode = getNode(this, "selectionRule", host.getSelectionRule(), data);
		root.add(selectionRuleNode);
		//--- Property creationRule ---
		DefaultMutableTreeNode creationRuleNode = getNode(this, "creationRule", host.getCreationRule(), data);
		root.add(creationRuleNode);
		//--- Association artifactFor ---
		DefaultMutableTreeNode artifactForNode = getNode(this, "artifactFor", host.getArtifactFor(), data);
		root.add(artifactForNode);
		//--- Association performs ---
		DefaultMutableTreeNode performsNode = getNode(this, "performs", host.getPerforms(), data);
		root.add(performsNode);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Artifact' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ArtifactFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Artifact' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Artifact host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for Artifact ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		DefaultMutableTreeNode selectionRuleNode = getNode(this, "selectionRule", host.getSelectionRule(), data);
		root.add(selectionRuleNode);
		//--- Property creationRule ---
		DefaultMutableTreeNode creationRuleNode = getNode(this, "creationRule", host.getCreationRule(), data);
		root.add(creationRuleNode);
		//--- Association artifactFor ---
		DefaultMutableTreeNode artifactForNode = getNode(this, "artifactFor", host.getArtifactFor(), data);
		root.add(artifactForNode);
		//--- Association performs ---
		DefaultMutableTreeNode performsNode = getNode(this, "performs", host.getPerforms(), data);
		root.add(performsNode);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ResponsibleParty' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ResponsiblePartyFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ResponsibleParty' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ResponsibleParty host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ResponsibleParty ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		DefaultMutableTreeNode selectionRuleNode = getNode(this, "selectionRule", host.getSelectionRule(), data);
		root.add(selectionRuleNode);
		//--- Property creationRule ---
		DefaultMutableTreeNode creationRuleNode = getNode(this, "creationRule", host.getCreationRule(), data);
		root.add(creationRuleNode);
		//--- Association artifactFor ---
		DefaultMutableTreeNode artifactForNode = getNode(this, "artifactFor", host.getArtifactFor(), data);
		root.add(artifactForNode);
		//--- Association performs ---
		DefaultMutableTreeNode performsNode = getNode(this, "performs", host.getPerforms(), data);
		root.add(performsNode);
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association filledBy ---
		DefaultMutableTreeNode filledByNode = getNode(this, "filledBy", host.getFilledBy(), data);
		root.add(filledByNode);
		//--- Association uses ---
		DefaultMutableTreeNode usesNode = getNode(this, "uses", host.getUses(), data);
		root.add(usesNode);
		//--- Association configuration ---
		DefaultMutableTreeNode configurationNode = getNode(this, "configuration", host.getConfiguration(), data);
		root.add(configurationNode);
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		DefaultMutableTreeNode portsUsedNode = getNode(this, "portsUsed", host.getPortsUsed(), data);
		root.add(portsUsedNode);
		return root;
	}
	/** Auxiliary function used by the vistors */
	DefaultMutableTreeNode getNode(EdocJTreeVisitor visitor, String name, Object obj, Object data) {
		//--- Elements visited on this branch ---
		Set visitedElements = (Set)data;
		//--- Create node ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(name);
		//--- Construct the value ---
		//--- Primitive types ---
		if (obj == null) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("null");
			root.add(objNode);
			return root;
		}
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofPrimitiveType(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj.toString());
			root.add(objNode);
			return root;
		}
		//--- Collection types ---
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				DefaultMutableTreeNode objNode = getNode(this, "Element", i.next(), data);
				root.add((DefaultMutableTreeNode)objNode.getChildAt(0));
			}
			return root;
		}
		//--- Enumerations types ---
		String fullClassName = obj.getClass().getName();
		if (fullClassName.endsWith("Enum") || fullClassName.endsWith("Kind")) {
			//--- Get class ---
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("Error");
			try {
				Class objClass = obj.getClass();
				Class visitorClass = Class.forName("edoc.EdocVisitor");
				Class dataClass = data.getClass();
				Method accept = objClass.getMethod("accept", new Class[] {visitorClass, dataClass});
				objNode = (DefaultMutableTreeNode)accept.invoke(obj, new Object[] {visitor, data});
			} catch (Exception e) {
			}
			root.add(objNode);
			return root;
		}
		//--- User types ---
		//--- Already added on the current branch: make a toSring node ---
		if (visitedElements.contains(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj, false);
			root.add(objNode);
		//--- Was not visited previously on the current branch ---
		} else {
			// Add it
			visitedElements.add(obj);
			// Visit it
			DefaultMutableTreeNode objNode = (DefaultMutableTreeNode)((edoc.EdocElement)obj).accept(visitor, visitedElements);
			root.add(objNode);
		}
		return root;
	}
}
