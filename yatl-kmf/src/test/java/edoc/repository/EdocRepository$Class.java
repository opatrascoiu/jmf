/**
 *
 *  Class EdocRepository$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:37
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.repository;

import java.io.*;
import java.util.*;
import javax.swing.tree.*;
import uk.ac.kent.cs.kmf.xmi.*;

import edoc.*;

public class EdocRepository$Class
	extends uk.ac.kent.cs.kmf.common.RepositoryImpl
	implements EdocRepository
{
	/** Default repository constructor */
	public EdocRepository$Class() {
		setLog(new uk.ac.kent.cs.kmf.util.FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public EdocRepository$Class(uk.ac.kent.cs.kmf.util.ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init edoc repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.ModelManagement.PackageContent'");
		population.put("edoc.ECA.ModelManagement.PackageContent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.ModelManagement.PackageECA'");
		factories.put("edoc.ECA.ModelManagement.PackageECA", new edoc.ECA.ModelManagement.PackageECAFactory$Class(this));
		population.put("edoc.ECA.ModelManagement.PackageECA", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.ModelManagement.ElementImport'");
		factories.put("edoc.ECA.ModelManagement.ElementImport", new edoc.ECA.ModelManagement.ElementImportFactory$Class(this));
		population.put("edoc.ECA.ModelManagement.ElementImport", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.DataInvariant'");
		factories.put("edoc.ECA.DocumentModel.DataInvariant", new edoc.ECA.DocumentModel.DataInvariantFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.DataInvariant", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.DataElement'");
		population.put("edoc.ECA.DocumentModel.DataElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.DataType'");
		factories.put("edoc.ECA.DocumentModel.DataType", new edoc.ECA.DocumentModel.DataTypeFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.DataType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.Enumeration_'");
		factories.put("edoc.ECA.DocumentModel.Enumeration_", new edoc.ECA.DocumentModel.Enumeration_Factory$Class(this));
		population.put("edoc.ECA.DocumentModel.Enumeration_", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.CompositeData'");
		factories.put("edoc.ECA.DocumentModel.CompositeData", new edoc.ECA.DocumentModel.CompositeDataFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.CompositeData", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.EnumerationValue'");
		factories.put("edoc.ECA.DocumentModel.EnumerationValue", new edoc.ECA.DocumentModel.EnumerationValueFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.EnumerationValue", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.ExternalDocument'");
		factories.put("edoc.ECA.DocumentModel.ExternalDocument", new edoc.ECA.DocumentModel.ExternalDocumentFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.ExternalDocument", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.DocumentModel.Attribute'");
		factories.put("edoc.ECA.DocumentModel.Attribute", new edoc.ECA.DocumentModel.AttributeFactory$Class(this));
		population.put("edoc.ECA.DocumentModel.Attribute", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Choreography'");
		population.put("edoc.ECA.CCA.Choreography", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Node'");
		population.put("edoc.ECA.CCA.Node", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PseudoState'");
		factories.put("edoc.ECA.CCA.PseudoState", new edoc.ECA.CCA.PseudoStateFactory$Class(this));
		population.put("edoc.ECA.CCA.PseudoState", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.AbstractTransition'");
		population.put("edoc.ECA.CCA.AbstractTransition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Transition'");
		factories.put("edoc.ECA.CCA.Transition", new edoc.ECA.CCA.TransitionFactory$Class(this));
		population.put("edoc.ECA.CCA.Transition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Connection'");
		factories.put("edoc.ECA.CCA.Connection", new edoc.ECA.CCA.ConnectionFactory$Class(this));
		population.put("edoc.ECA.CCA.Connection", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.UsageContext'");
		population.put("edoc.ECA.CCA.UsageContext", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PortUseage'");
		population.put("edoc.ECA.CCA.PortUseage", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PortActivity'");
		factories.put("edoc.ECA.CCA.PortActivity", new edoc.ECA.CCA.PortActivityFactory$Class(this));
		population.put("edoc.ECA.CCA.PortActivity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Composition'");
		population.put("edoc.ECA.CCA.Composition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.CommunityProcess'");
		factories.put("edoc.ECA.CCA.CommunityProcess", new edoc.ECA.CCA.CommunityProcessFactory$Class(this));
		population.put("edoc.ECA.CCA.CommunityProcess", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.ContextualBinding'");
		factories.put("edoc.ECA.CCA.ContextualBinding", new edoc.ECA.CCA.ContextualBindingFactory$Class(this));
		population.put("edoc.ECA.CCA.ContextualBinding", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.ComponentUsage'");
		factories.put("edoc.ECA.CCA.ComponentUsage", new edoc.ECA.CCA.ComponentUsageFactory$Class(this));
		population.put("edoc.ECA.CCA.ComponentUsage", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PropertyValue'");
		factories.put("edoc.ECA.CCA.PropertyValue", new edoc.ECA.CCA.PropertyValueFactory$Class(this));
		population.put("edoc.ECA.CCA.PropertyValue", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PortConnector'");
		factories.put("edoc.ECA.CCA.PortConnector", new edoc.ECA.CCA.PortConnectorFactory$Class(this));
		population.put("edoc.ECA.CCA.PortConnector", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PropertyDefinition'");
		factories.put("edoc.ECA.CCA.PropertyDefinition", new edoc.ECA.CCA.PropertyDefinitionFactory$Class(this));
		population.put("edoc.ECA.CCA.PropertyDefinition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Flow'");
		factories.put("edoc.ECA.CCA.Flow", new edoc.ECA.CCA.FlowFactory$Class(this));
		population.put("edoc.ECA.CCA.Flow", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PortOwner'");
		population.put("edoc.ECA.CCA.PortOwner", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Protocol'");
		factories.put("edoc.ECA.CCA.Protocol", new edoc.ECA.CCA.ProtocolFactory$Class(this));
		population.put("edoc.ECA.CCA.Protocol", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.InitiatingRole'");
		factories.put("edoc.ECA.CCA.InitiatingRole", new edoc.ECA.CCA.InitiatingRoleFactory$Class(this));
		population.put("edoc.ECA.CCA.InitiatingRole", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.RespondingRole'");
		factories.put("edoc.ECA.CCA.RespondingRole", new edoc.ECA.CCA.RespondingRoleFactory$Class(this));
		population.put("edoc.ECA.CCA.RespondingRole", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Interface'");
		factories.put("edoc.ECA.CCA.Interface", new edoc.ECA.CCA.InterfaceFactory$Class(this));
		population.put("edoc.ECA.CCA.Interface", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Port'");
		population.put("edoc.ECA.CCA.Port", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.MultiPort'");
		factories.put("edoc.ECA.CCA.MultiPort", new edoc.ECA.CCA.MultiPortFactory$Class(this));
		population.put("edoc.ECA.CCA.MultiPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.OperationPort'");
		factories.put("edoc.ECA.CCA.OperationPort", new edoc.ECA.CCA.OperationPortFactory$Class(this));
		population.put("edoc.ECA.CCA.OperationPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.FlowPort'");
		factories.put("edoc.ECA.CCA.FlowPort", new edoc.ECA.CCA.FlowPortFactory$Class(this));
		population.put("edoc.ECA.CCA.FlowPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.ProtocolPort'");
		factories.put("edoc.ECA.CCA.ProtocolPort", new edoc.ECA.CCA.ProtocolPortFactory$Class(this));
		population.put("edoc.ECA.CCA.ProtocolPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.ProcessComponent'");
		factories.put("edoc.ECA.CCA.ProcessComponent", new edoc.ECA.CCA.ProcessComponentFactory$Class(this));
		population.put("edoc.ECA.CCA.ProcessComponent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.DirectionType'");
		factories.put("edoc.ECA.CCA.DirectionType", new edoc.ECA.CCA.DirectionTypeFactory$Class(this));
		population.put("edoc.ECA.CCA.DirectionType", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.Status'");
		factories.put("edoc.ECA.CCA.Status", new edoc.ECA.CCA.StatusFactory$Class(this));
		population.put("edoc.ECA.CCA.Status", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.GranularityKind'");
		factories.put("edoc.ECA.CCA.GranularityKind", new edoc.ECA.CCA.GranularityKindFactory$Class(this));
		population.put("edoc.ECA.CCA.GranularityKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.CCA.PseudoStateKind'");
		factories.put("edoc.ECA.CCA.PseudoStateKind", new edoc.ECA.CCA.PseudoStateKindFactory$Class(this));
		population.put("edoc.ECA.CCA.PseudoStateKind", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.DataProbe'");
		factories.put("edoc.ECA.EntityPkg.DataProbe", new edoc.ECA.EntityPkg.DataProbeFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.DataProbe", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.DataManager'");
		factories.put("edoc.ECA.EntityPkg.DataManager", new edoc.ECA.EntityPkg.DataManagerFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.DataManager", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.Entity'");
		factories.put("edoc.ECA.EntityPkg.Entity", new edoc.ECA.EntityPkg.EntityFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.Entity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.EntityRole'");
		factories.put("edoc.ECA.EntityPkg.EntityRole", new edoc.ECA.EntityPkg.EntityRoleFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.EntityRole", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.Key'");
		factories.put("edoc.ECA.EntityPkg.Key", new edoc.ECA.EntityPkg.KeyFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.Key", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.KeyElement'");
		factories.put("edoc.ECA.EntityPkg.KeyElement", new edoc.ECA.EntityPkg.KeyElementFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.KeyElement", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.KeyAttribute'");
		factories.put("edoc.ECA.EntityPkg.KeyAttribute", new edoc.ECA.EntityPkg.KeyAttributeFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.KeyAttribute", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.ForeignKey'");
		factories.put("edoc.ECA.EntityPkg.ForeignKey", new edoc.ECA.EntityPkg.ForeignKeyFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.ForeignKey", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.EntityPkg.EntityData'");
		factories.put("edoc.ECA.EntityPkg.EntityData", new edoc.ECA.EntityPkg.EntityDataFactory$Class(this));
		population.put("edoc.ECA.EntityPkg.EntityData", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.EventCondition'");
		factories.put("edoc.ECA.Event.EventCondition", new edoc.ECA.Event.EventConditionFactory$Class(this));
		population.put("edoc.ECA.Event.EventCondition", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.NotificationRule'");
		factories.put("edoc.ECA.Event.NotificationRule", new edoc.ECA.Event.NotificationRuleFactory$Class(this));
		population.put("edoc.ECA.Event.NotificationRule", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.Subscription'");
		factories.put("edoc.ECA.Event.Subscription", new edoc.ECA.Event.SubscriptionFactory$Class(this));
		population.put("edoc.ECA.Event.Subscription", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.Subscriber'");
		population.put("edoc.ECA.Event.Subscriber", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.Publication'");
		factories.put("edoc.ECA.Event.Publication", new edoc.ECA.Event.PublicationFactory$Class(this));
		population.put("edoc.ECA.Event.Publication", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.Publisher'");
		population.put("edoc.ECA.Event.Publisher", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.PubSubNotice'");
		factories.put("edoc.ECA.Event.PubSubNotice", new edoc.ECA.Event.PubSubNoticeFactory$Class(this));
		population.put("edoc.ECA.Event.PubSubNotice", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.EventBasedProcess'");
		factories.put("edoc.ECA.Event.EventBasedProcess", new edoc.ECA.Event.EventBasedProcessFactory$Class(this));
		population.put("edoc.ECA.Event.EventBasedProcess", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.BusinessEvent'");
		population.put("edoc.ECA.Event.BusinessEvent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.EventNotice'");
		factories.put("edoc.ECA.Event.EventNotice", new edoc.ECA.Event.EventNoticeFactory$Class(this));
		population.put("edoc.ECA.Event.EventNotice", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.ProcessEvent'");
		factories.put("edoc.ECA.Event.ProcessEvent", new edoc.ECA.Event.ProcessEventFactory$Class(this));
		population.put("edoc.ECA.Event.ProcessEvent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.EventBasedDataManager'");
		factories.put("edoc.ECA.Event.EventBasedDataManager", new edoc.ECA.Event.EventBasedDataManagerFactory$Class(this));
		population.put("edoc.ECA.Event.EventBasedDataManager", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.Event.DataEvent'");
		factories.put("edoc.ECA.Event.DataEvent", new edoc.ECA.Event.DataEventFactory$Class(this));
		population.put("edoc.ECA.Event.DataEvent", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.Activity'");
		factories.put("edoc.ECA.BusinessProcessPkg.Activity", new edoc.ECA.BusinessProcessPkg.ActivityFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.Activity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.BusinessProcess'");
		factories.put("edoc.ECA.BusinessProcessPkg.BusinessProcess", new edoc.ECA.BusinessProcessPkg.BusinessProcessFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.BusinessProcess", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.CompoundTask'");
		factories.put("edoc.ECA.BusinessProcessPkg.CompoundTask", new edoc.ECA.BusinessProcessPkg.CompoundTaskFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.CompoundTask", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.BusinessProcessEntity'");
		factories.put("edoc.ECA.BusinessProcessPkg.BusinessProcessEntity", new edoc.ECA.BusinessProcessPkg.BusinessProcessEntityFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.BusinessProcessEntity", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ProcessMultiPort'");
		factories.put("edoc.ECA.BusinessProcessPkg.ProcessMultiPort", new edoc.ECA.BusinessProcessPkg.ProcessMultiPortFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ProcessMultiPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.InputGroup'");
		factories.put("edoc.ECA.BusinessProcessPkg.InputGroup", new edoc.ECA.BusinessProcessPkg.InputGroupFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.InputGroup", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.OutputGroup'");
		factories.put("edoc.ECA.BusinessProcessPkg.OutputGroup", new edoc.ECA.BusinessProcessPkg.OutputGroupFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.OutputGroup", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ExceptionGroup'");
		factories.put("edoc.ECA.BusinessProcessPkg.ExceptionGroup", new edoc.ECA.BusinessProcessPkg.ExceptionGroupFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ExceptionGroup", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ProcessFlowPort'");
		factories.put("edoc.ECA.BusinessProcessPkg.ProcessFlowPort", new edoc.ECA.BusinessProcessPkg.ProcessFlowPortFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ProcessFlowPort", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ProcessPortConnector'");
		factories.put("edoc.ECA.BusinessProcessPkg.ProcessPortConnector", new edoc.ECA.BusinessProcessPkg.ProcessPortConnectorFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ProcessPortConnector", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.DataFlow'");
		factories.put("edoc.ECA.BusinessProcessPkg.DataFlow", new edoc.ECA.BusinessProcessPkg.DataFlowFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.DataFlow", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ProcessRole'");
		factories.put("edoc.ECA.BusinessProcessPkg.ProcessRole", new edoc.ECA.BusinessProcessPkg.ProcessRoleFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ProcessRole", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.Performer'");
		factories.put("edoc.ECA.BusinessProcessPkg.Performer", new edoc.ECA.BusinessProcessPkg.PerformerFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.Performer", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.Artifact'");
		factories.put("edoc.ECA.BusinessProcessPkg.Artifact", new edoc.ECA.BusinessProcessPkg.ArtifactFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.Artifact", new Vector());
		log.reportMessage("Adding factory and initializing population for 'edoc.ECA.BusinessProcessPkg.ResponsibleParty'");
		factories.put("edoc.ECA.BusinessProcessPkg.ResponsibleParty", new edoc.ECA.BusinessProcessPkg.ResponsiblePartyFactory$Class(this));
		population.put("edoc.ECA.BusinessProcessPkg.ResponsibleParty", new Vector());
	}

	//--- MODEL NAME ---
	protected String modelName = "edoc";
	public String getModelName() {
		return modelName;
	}

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			EdocFactory factory = (EdocFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}
	/** Get all instances from population */
	public List getAllElements() {
		List res = new ArrayList();
		Iterator i = population.keySet().iterator();
		while (i.hasNext()) {
			String key = (String)i.next();
			res.addAll((Collection)population.get(key));
		}
		return res;
	}
	/** Get the entire population */
	public Map getPopulation() {
		return population;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public edoc.EdocFactory getFactory(String fullClassName) {
		edoc.EdocFactory factory = null;
		try {
			factory = (edoc.EdocFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Get the all factories */
	public Map getFactories() {
		return factories;
	}

	//--- BROWSER ---
	/** Get a description using a JTree */
	public DefaultMutableTreeNode toJTree() {
		//--- Creat the JTree visitor ---
		EdocJTreeVisitor jtreeVisitor = new EdocJTreeVisitor$Class();
		//--- Init root ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Repository", true);
		DefaultMutableTreeNode factoriesNode = new DefaultMutableTreeNode("Lifecycle", true);
		DefaultMutableTreeNode elementsNode = new DefaultMutableTreeNode("Elements", true);
		root.add(factoriesNode);
		root.add(elementsNode);
		//--- Add every factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String factoryName = (String)i.next();
			EdocFactory factory = (EdocFactory)factories.get(factoryName);
			DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)factory.accept(jtreeVisitor, new Object());
			factoriesNode.add(factoryNode);
		}
		//--- Add every element ---
		Set elemNames = population.keySet();
		Iterator j = elemNames.iterator();
		while (j.hasNext()) {
			String elemName = (String)j.next();
			//--- Add a node for each class ---
			List elements = (List)population.get(elemName);
			if (elements.size() != 0) {
				DefaultMutableTreeNode elemNode = new DefaultMutableTreeNode("Instances of "+elemName, true);
				Iterator elementIt = elements.iterator();
				while (elementIt.hasNext()) {
					EdocElement element = (EdocElement)elementIt.next();
					//--- Add a node for each instance ---
					Set visitedElements = new LinkedHashSet();
					visitedElements.add(element);
					DefaultMutableTreeNode instanceNode = (DefaultMutableTreeNode)element.accept(jtreeVisitor, visitedElements);
					elemNode.add(instanceNode);
				}
				elementsNode.add(elemNode);
			}
		}
		return root;
	}

	/** Save the content into an XMI file */
	public void saveXMI(String fileName) {
		//--- Create an XMI file ---
		if (!fileName.toLowerCase().endsWith(".xml")) fileName += ".xml";
		XMIFile xmiFile = new XMIFile(fileName);
		//--- Create an XMI vistor ---
		EdocXMIVisitor xmiVisitor = new EdocXMIVisitor$Class();
		//--- Create an empty (reference, xmiObject) table  ---
		Map mapRefToXMI = new IdentityHashMap();
		//--- Create the top objects container ---
		Collection topObjs = xmiFile.getTopObjects();
		//--- For each factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String elemName = (String)i.next();
			EdocFactory factory = (EdocFactory)factories.get(elemName);
			//--- Create the factory ---
			XMIObject xmifactory = (XMIObject)factory.accept(xmiVisitor, mapRefToXMI);
			//--- Add factory to top objects ---
			//--- Compute all the instances created by the factory ---
			List elements = (List)population.get(elemName);
			if (elements == null) continue;
			Iterator j = elements.iterator();
			while (j.hasNext()) {
				EdocElement element = (EdocElement)j.next();
				//--- Create the XMI element ---
				XMIObject xmiElement = (XMIObject)element.accept(xmiVisitor, mapRefToXMI);
				//--- Add the element to top objects ---
				topObjs.add(xmiElement);
			}
		}
		try {
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new EdocFactoryAdapter$Class(this, log));
			//--- Save the elements ---
			IXMIWriter writer = new XMIWriter();
			writer.write(xmiFile, fileName, log);
		} catch (Exception e) {
			log.reportMessage(""+e);
		}
	}
	/** Create a new repository from an XMI file */
	public uk.ac.kent.cs.kmf.common.Repository loadXMI(String fileName) {
		try {
			//--- Create a repository ---
			EdocRepository rep = new EdocRepository$Class();
			rep.setLog(log);
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new EdocFactoryAdapter$Class(rep, log));
			//--- Build the elements ---
			XMIFile xmiFile = (new XMIReader()).read(fileName, log);
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}

	/** Get a HUTN description of the repository */
	public String toHUTN() {
		//--- Create the HUTN visitor ---
		EdocHUTNVisitor hutnVisitor = new EdocHUTNVisitor$Class();
		//--- Add every factory ---
		String buffer = new String();
		buffer += "EdocRepository {\n";
		buffer += "factories\n";
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			buffer += "  "+factoryName+"\n";
		}
		buffer += "\n";
		//--- Add every element ---
		buffer += "Elements\n";
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			buffer += "Instances of "+elemName+"\n";
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				EdocElement element = (EdocElement)elementIt.next();
				buffer += element.accept(hutnVisitor, new Object());
			}
		}
		buffer += "}\n";
		log.reportMessage(buffer);
		return buffer;
	}
	/** Save the content into a HUTN file */
	public void saveHUTN(String fileName) {
		//--- Open the HUTN file ---
		if (!fileName.toLowerCase().endsWith(".hutn")) fileName += ".hutn";
		PrintWriter out;
		try {
			out = new PrintWriter(new FileWriter(new File(fileName)), true);
		} catch (Exception e) {
			log.reportMessage(""+e);
			return;
		}
		//--- Create the HUTN visitor ---
		EdocHUTNVisitor hutnVisitor = new EdocHUTNVisitor$Class();
		//--- Add every factory ---
		out.println("EdocRepository {");
		out.println("factories");
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			out.println("  "+factoryName);
		}
		out.println();
		//--- Add every element ---
		out.println("Elements");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			out.println("Instances of "+elemName);
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				EdocElement element = (EdocElement)elementIt.next();
				out.println(element.accept(hutnVisitor, new Object()));
			}
		}
		out.println("}");
		out.close();
	}
	/** Create a new repository from an HUTN file */
	public EdocRepository loadHUTN(String fileName) {
		try {
			//--- Create a repository ---
			EdocRepository rep = new EdocRepository$Class();
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, EdocFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}
	/** The factories */
	protected Hashtable factories = new Hashtable();

}
