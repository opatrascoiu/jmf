/**
 *
 *  Class EdocHUTNVisitor$Class.java
 *
 *  Generated by KMFStudio at 09 March 2004 11:42:37
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package edoc.repository;

public class EdocHUTNVisitor$Class
	implements EdocHUTNVisitor
{
	/** Visit factory for 'EdocFactory' */
	public Object visit(edoc.EdocFactory host, Object data) {
		String str = "edoc.EdocFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.PackageContent' */
	public Object visit(edoc.ECA.ModelManagement.PackageContent host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.ModelManagement.PackageECA' */
	public Object visit(edoc.ECA.ModelManagement.PackageECAFactory host, Object data) {
		String str = "edoc.ECA.ModelManagement.PackageECAFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.PackageECA' */
	public Object visit(edoc.ECA.ModelManagement.PackageECA host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PackageECA ---
		//--- Association ownedElement ---
		str += "    ownedElement"+": ";
		if(host.getOwnedElement() == null) str += "null"+"\n";
		else str += host.getOwnedElement().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.ModelManagement.ElementImport' */
	public Object visit(edoc.ECA.ModelManagement.ElementImportFactory host, Object data) {
		String str = "edoc.ECA.ModelManagement.ElementImportFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.ModelManagement.ElementImport' */
	public Object visit(edoc.ECA.ModelManagement.ElementImport host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ElementImport ---
		//--- Association modelElement ---
		str += "    modelElement"+": ";
		if(host.getModelElement() == null) str += "null"+"\n";
		else str += host.getModelElement().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.DataInvariant' */
	public Object visit(edoc.ECA.DocumentModel.DataInvariantFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.DataInvariantFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataInvariant' */
	public Object visit(edoc.ECA.DocumentModel.DataInvariant host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataInvariant ---
		//--- Property expression ---
		str += "    expression"+": ";
		if(host.getExpression() == null) str += "null"+"\n";
		else str += host.getExpression().toString()+"\n";
		//--- Property onCommit ---
		str += "    onCommit"+": ";
		if(host.getOnCommit() == null) str += "null"+"\n";
		else str += host.getOnCommit().toString()+"\n";
		//--- Association constrainedElement ---
		str += "    constrainedElement"+": ";
		if(host.getConstrainedElement() == null) str += "null"+"\n";
		else str += host.getConstrainedElement().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataElement' */
	public Object visit(edoc.ECA.DocumentModel.DataElement host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.DataType' */
	public Object visit(edoc.ECA.DocumentModel.DataTypeFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.DataTypeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.DataType' */
	public Object visit(edoc.ECA.DocumentModel.DataType host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataType ---
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.Enumeration_' */
	public Object visit(edoc.ECA.DocumentModel.Enumeration_Factory host, Object data) {
		String str = "edoc.ECA.DocumentModel.Enumeration_Factory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.Enumeration_' */
	public Object visit(edoc.ECA.DocumentModel.Enumeration_ host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Enumeration_ ---
		//--- Association values ---
		str += "    values"+": ";
		if(host.getValues() == null) str += "null"+"\n";
		else str += host.getValues().toString()+"\n";
		//--- Association initial ---
		str += "    initial"+": ";
		if(host.getInitial() == null) str += "null"+"\n";
		else str += host.getInitial().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.CompositeData' */
	public Object visit(edoc.ECA.DocumentModel.CompositeDataFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.CompositeDataFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.CompositeData' */
	public Object visit(edoc.ECA.DocumentModel.CompositeData host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for CompositeData ---
		//--- Association features ---
		str += "    features"+": ";
		if(host.getFeatures() == null) str += "null"+"\n";
		else str += host.getFeatures().toString()+"\n";
		//--- Association superTypes ---
		str += "    superTypes"+": ";
		if(host.getSuperTypes() == null) str += "null"+"\n";
		else str += host.getSuperTypes().toString()+"\n";
		//--- Association subTypes ---
		str += "    subTypes"+": ";
		if(host.getSubTypes() == null) str += "null"+"\n";
		else str += host.getSubTypes().toString()+"\n";
		//--- Association managedBy ---
		str += "    managedBy"+": ";
		if(host.getManagedBy() == null) str += "null"+"\n";
		else str += host.getManagedBy().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.EnumerationValue' */
	public Object visit(edoc.ECA.DocumentModel.EnumerationValueFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.EnumerationValueFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.EnumerationValue' */
	public Object visit(edoc.ECA.DocumentModel.EnumerationValue host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EnumerationValue ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association enumeration ---
		str += "    enumeration"+": ";
		if(host.getEnumeration() == null) str += "null"+"\n";
		else str += host.getEnumeration().toString()+"\n";
		//--- Association initialFor ---
		str += "    initialFor"+": ";
		if(host.getInitialFor() == null) str += "null"+"\n";
		else str += host.getInitialFor().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.ExternalDocument' */
	public Object visit(edoc.ECA.DocumentModel.ExternalDocumentFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.ExternalDocumentFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.ExternalDocument' */
	public Object visit(edoc.ECA.DocumentModel.ExternalDocument host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ExternalDocument ---
		//--- Properties for DataType ---
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.DocumentModel.Attribute' */
	public Object visit(edoc.ECA.DocumentModel.AttributeFactory host, Object data) {
		String str = "edoc.ECA.DocumentModel.AttributeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.DocumentModel.Attribute' */
	public Object visit(edoc.ECA.DocumentModel.Attribute host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Attribute ---
		//--- Property byValue ---
		str += "    byValue"+": ";
		if(host.getByValue() == null) str += "null"+"\n";
		else str += host.getByValue().toString()+"\n";
		//--- Property required ---
		str += "    required"+": ";
		if(host.getRequired() == null) str += "null"+"\n";
		else str += host.getRequired().toString()+"\n";
		//--- Property many ---
		str += "    many"+": ";
		if(host.getMany() == null) str += "null"+"\n";
		else str += host.getMany().toString()+"\n";
		//--- Property initialValue ---
		str += "    initialValue"+": ";
		if(host.getInitialValue() == null) str += "null"+"\n";
		else str += host.getInitialValue().toString()+"\n";
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association keyAttribute ---
		str += "    keyAttribute"+": ";
		if(host.getKeyAttribute() == null) str += "null"+"\n";
		else str += host.getKeyAttribute().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Choreography' */
	public Object visit(edoc.ECA.CCA.Choreography host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Node' */
	public Object visit(edoc.ECA.CCA.Node host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PseudoState' */
	public Object visit(edoc.ECA.CCA.PseudoStateFactory host, Object data) {
		String str = "edoc.ECA.CCA.PseudoStateFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PseudoState' */
	public Object visit(edoc.ECA.CCA.PseudoState host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PseudoState ---
		//--- Property kind ---
		str += "    kind"+": ";
		if(host.getKind() == null) str += "null"+"\n";
		else str += host.getKind().toString()+"\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.AbstractTransition' */
	public Object visit(edoc.ECA.CCA.AbstractTransition host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association target ---
		str += "    target"+": ";
		if(host.getTarget() == null) str += "null"+"\n";
		else str += host.getTarget().toString()+"\n";
		//--- Association source ---
		str += "    source"+": ";
		if(host.getSource() == null) str += "null"+"\n";
		else str += host.getSource().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Transition' */
	public Object visit(edoc.ECA.CCA.TransitionFactory host, Object data) {
		String str = "edoc.ECA.CCA.TransitionFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Transition' */
	public Object visit(edoc.ECA.CCA.Transition host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Transition ---
		//--- Property precondition ---
		str += "    precondition"+": ";
		if(host.getPrecondition() == null) str += "null"+"\n";
		else str += host.getPrecondition().toString()+"\n";
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association target ---
		str += "    target"+": ";
		if(host.getTarget() == null) str += "null"+"\n";
		else str += host.getTarget().toString()+"\n";
		//--- Association source ---
		str += "    source"+": ";
		if(host.getSource() == null) str += "null"+"\n";
		else str += host.getSource().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Connection' */
	public Object visit(edoc.ECA.CCA.ConnectionFactory host, Object data) {
		String str = "edoc.ECA.CCA.ConnectionFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Connection' */
	public Object visit(edoc.ECA.CCA.Connection host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association target ---
		str += "    target"+": ";
		if(host.getTarget() == null) str += "null"+"\n";
		else str += host.getTarget().toString()+"\n";
		//--- Association source ---
		str += "    source"+": ";
		if(host.getSource() == null) str += "null"+"\n";
		else str += host.getSource().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.UsageContext' */
	public Object visit(edoc.ECA.CCA.UsageContext host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PortUseage' */
	public Object visit(edoc.ECA.CCA.PortUseage host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PortUseage ---
		//--- Association extent ---
		str += "    extent"+": ";
		if(host.getExtent() == null) str += "null"+"\n";
		else str += host.getExtent().toString()+"\n";
		//--- Association represents ---
		str += "    represents"+": ";
		if(host.getRepresents() == null) str += "null"+"\n";
		else str += host.getRepresents().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PortActivity' */
	public Object visit(edoc.ECA.CCA.PortActivityFactory host, Object data) {
		String str = "edoc.ECA.CCA.PortActivityFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PortActivity' */
	public Object visit(edoc.ECA.CCA.PortActivity host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PortActivity ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		str += "    extent"+": ";
		if(host.getExtent() == null) str += "null"+"\n";
		else str += host.getExtent().toString()+"\n";
		//--- Association represents ---
		str += "    represents"+": ";
		if(host.getRepresents() == null) str += "null"+"\n";
		else str += host.getRepresents().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Composition' */
	public Object visit(edoc.ECA.CCA.Composition host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.CommunityProcess' */
	public Object visit(edoc.ECA.CCA.CommunityProcessFactory host, Object data) {
		String str = "edoc.ECA.CCA.CommunityProcessFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.CommunityProcess' */
	public Object visit(edoc.ECA.CCA.CommunityProcess host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for CommunityProcess ---
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.ContextualBinding' */
	public Object visit(edoc.ECA.CCA.ContextualBindingFactory host, Object data) {
		String str = "edoc.ECA.CCA.ContextualBindingFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.ContextualBinding' */
	public Object visit(edoc.ECA.CCA.ContextualBinding host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ContextualBinding ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association fills ---
		str += "    fills"+": ";
		if(host.getFills() == null) str += "null"+"\n";
		else str += host.getFills().toString()+"\n";
		//--- Association bindsTo ---
		str += "    bindsTo"+": ";
		if(host.getBindsTo() == null) str += "null"+"\n";
		else str += host.getBindsTo().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.ComponentUsage' */
	public Object visit(edoc.ECA.CCA.ComponentUsageFactory host, Object data) {
		String str = "edoc.ECA.CCA.ComponentUsageFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.ComponentUsage' */
	public Object visit(edoc.ECA.CCA.ComponentUsage host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PropertyValue' */
	public Object visit(edoc.ECA.CCA.PropertyValueFactory host, Object data) {
		String str = "edoc.ECA.CCA.PropertyValueFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PropertyValue' */
	public Object visit(edoc.ECA.CCA.PropertyValue host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PropertyValue ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association fills ---
		str += "    fills"+": ";
		if(host.getFills() == null) str += "null"+"\n";
		else str += host.getFills().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PortConnector' */
	public Object visit(edoc.ECA.CCA.PortConnectorFactory host, Object data) {
		String str = "edoc.ECA.CCA.PortConnectorFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PortConnector' */
	public Object visit(edoc.ECA.CCA.PortConnector host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PortConnector ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		str += "    extent"+": ";
		if(host.getExtent() == null) str += "null"+"\n";
		else str += host.getExtent().toString()+"\n";
		//--- Association represents ---
		str += "    represents"+": ";
		if(host.getRepresents() == null) str += "null"+"\n";
		else str += host.getRepresents().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PropertyDefinition' */
	public Object visit(edoc.ECA.CCA.PropertyDefinitionFactory host, Object data) {
		String str = "edoc.ECA.CCA.PropertyDefinitionFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PropertyDefinition' */
	public Object visit(edoc.ECA.CCA.PropertyDefinition host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PropertyDefinition ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property initial ---
		str += "    initial"+": ";
		if(host.getInitial() == null) str += "null"+"\n";
		else str += host.getInitial().toString()+"\n";
		//--- Property isLocked ---
		str += "    isLocked"+": ";
		if(host.getIsLocked() == null) str += "null"+"\n";
		else str += host.getIsLocked().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association component ---
		str += "    component"+": ";
		if(host.getComponent() == null) str += "null"+"\n";
		else str += host.getComponent().toString()+"\n";
		//--- Association constrains ---
		str += "    constrains"+": ";
		if(host.getConstrains() == null) str += "null"+"\n";
		else str += host.getConstrains().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Flow' */
	public Object visit(edoc.ECA.CCA.FlowFactory host, Object data) {
		String str = "edoc.ECA.CCA.FlowFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Flow' */
	public Object visit(edoc.ECA.CCA.Flow host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Flow ---
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association target ---
		str += "    target"+": ";
		if(host.getTarget() == null) str += "null"+"\n";
		else str += host.getTarget().toString()+"\n";
		//--- Association source ---
		str += "    source"+": ";
		if(host.getSource() == null) str += "null"+"\n";
		else str += host.getSource().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PortOwner' */
	public Object visit(edoc.ECA.CCA.PortOwner host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Protocol' */
	public Object visit(edoc.ECA.CCA.ProtocolFactory host, Object data) {
		String str = "edoc.ECA.CCA.ProtocolFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Protocol' */
	public Object visit(edoc.ECA.CCA.Protocol host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Protocol ---
		//--- Association initiator ---
		str += "    initiator"+": ";
		if(host.getInitiator() == null) str += "null"+"\n";
		else str += host.getInitiator().toString()+"\n";
		//--- Association responder ---
		str += "    responder"+": ";
		if(host.getResponder() == null) str += "null"+"\n";
		else str += host.getResponder().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.InitiatingRole' */
	public Object visit(edoc.ECA.CCA.InitiatingRoleFactory host, Object data) {
		String str = "edoc.ECA.CCA.InitiatingRoleFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.InitiatingRole' */
	public Object visit(edoc.ECA.CCA.InitiatingRole host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for InitiatingRole ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association protocol ---
		str += "    protocol"+": ";
		if(host.getProtocol() == null) str += "null"+"\n";
		else str += host.getProtocol().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.RespondingRole' */
	public Object visit(edoc.ECA.CCA.RespondingRoleFactory host, Object data) {
		String str = "edoc.ECA.CCA.RespondingRoleFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.RespondingRole' */
	public Object visit(edoc.ECA.CCA.RespondingRole host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for RespondingRole ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association protocol ---
		str += "    protocol"+": ";
		if(host.getProtocol() == null) str += "null"+"\n";
		else str += host.getProtocol().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Interface' */
	public Object visit(edoc.ECA.CCA.InterfaceFactory host, Object data) {
		String str = "edoc.ECA.CCA.InterfaceFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Interface' */
	public Object visit(edoc.ECA.CCA.Interface host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Interface ---
		//--- Properties for Protocol ---
		//--- Association initiator ---
		str += "    initiator"+": ";
		if(host.getInitiator() == null) str += "null"+"\n";
		else str += host.getInitiator().toString()+"\n";
		//--- Association responder ---
		str += "    responder"+": ";
		if(host.getResponder() == null) str += "null"+"\n";
		else str += host.getResponder().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Port' */
	public Object visit(edoc.ECA.CCA.Port host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.MultiPort' */
	public Object visit(edoc.ECA.CCA.MultiPortFactory host, Object data) {
		String str = "edoc.ECA.CCA.MultiPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.MultiPort' */
	public Object visit(edoc.ECA.CCA.MultiPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.OperationPort' */
	public Object visit(edoc.ECA.CCA.OperationPortFactory host, Object data) {
		String str = "edoc.ECA.CCA.OperationPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.OperationPort' */
	public Object visit(edoc.ECA.CCA.OperationPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for OperationPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.FlowPort' */
	public Object visit(edoc.ECA.CCA.FlowPortFactory host, Object data) {
		String str = "edoc.ECA.CCA.FlowPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.FlowPort' */
	public Object visit(edoc.ECA.CCA.FlowPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for FlowPort ---
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association typeProperty ---
		str += "    typeProperty"+": ";
		if(host.getTypeProperty() == null) str += "null"+"\n";
		else str += host.getTypeProperty().toString()+"\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.ProtocolPort' */
	public Object visit(edoc.ECA.CCA.ProtocolPortFactory host, Object data) {
		String str = "edoc.ECA.CCA.ProtocolPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.ProtocolPort' */
	public Object visit(edoc.ECA.CCA.ProtocolPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProtocolPort ---
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.ProcessComponent' */
	public Object visit(edoc.ECA.CCA.ProcessComponentFactory host, Object data) {
		String str = "edoc.ECA.CCA.ProcessComponentFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.ProcessComponent' */
	public Object visit(edoc.ECA.CCA.ProcessComponent host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.DirectionType' */
	public Object visit(edoc.ECA.CCA.DirectionTypeFactory host, Object data) {
		String str = "edoc.ECA.CCA.DirectionTypeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.DirectionType' */
	public Object visit(edoc.ECA.CCA.DirectionType host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DirectionType ---
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.Status' */
	public Object visit(edoc.ECA.CCA.StatusFactory host, Object data) {
		String str = "edoc.ECA.CCA.StatusFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.Status' */
	public Object visit(edoc.ECA.CCA.Status host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Status ---
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.GranularityKind' */
	public Object visit(edoc.ECA.CCA.GranularityKindFactory host, Object data) {
		String str = "edoc.ECA.CCA.GranularityKindFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.GranularityKind' */
	public Object visit(edoc.ECA.CCA.GranularityKind host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for GranularityKind ---
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.CCA.PseudoStateKind' */
	public Object visit(edoc.ECA.CCA.PseudoStateKindFactory host, Object data) {
		String str = "edoc.ECA.CCA.PseudoStateKindFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.CCA.PseudoStateKind' */
	public Object visit(edoc.ECA.CCA.PseudoStateKind host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PseudoStateKind ---
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.DataProbe' */
	public Object visit(edoc.ECA.EntityPkg.DataProbeFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.DataProbeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.DataProbe' */
	public Object visit(edoc.ECA.EntityPkg.DataProbe host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataProbe ---
		//--- Property extentProbe ---
		str += "    extentProbe"+": ";
		if(host.getExtentProbe() == null) str += "null"+"\n";
		else str += host.getExtentProbe().toString()+"\n";
		//--- Association probes ---
		str += "    probes"+": ";
		if(host.getProbes() == null) str += "null"+"\n";
		else str += host.getProbes().toString()+"\n";
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.DataManager' */
	public Object visit(edoc.ECA.EntityPkg.DataManagerFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.DataManagerFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.DataManager' */
	public Object visit(edoc.ECA.EntityPkg.DataManager host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		str += "    networkAccess"+": ";
		if(host.getNetworkAccess() == null) str += "null"+"\n";
		else str += host.getNetworkAccess().toString()+"\n";
		//--- Property shareable ---
		str += "    shareable"+": ";
		if(host.getShareable() == null) str += "null"+"\n";
		else str += host.getShareable().toString()+"\n";
		//--- Association manages ---
		str += "    manages"+": ";
		if(host.getManages() == null) str += "null"+"\n";
		else str += host.getManages().toString()+"\n";
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.Entity' */
	public Object visit(edoc.ECA.EntityPkg.EntityFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.EntityFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.Entity' */
	public Object visit(edoc.ECA.EntityPkg.Entity host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Entity ---
		//--- Property managed ---
		str += "    managed"+": ";
		if(host.getManaged() == null) str += "null"+"\n";
		else str += host.getManaged().toString()+"\n";
		//--- Association probedBy ---
		str += "    probedBy"+": ";
		if(host.getProbedBy() == null) str += "null"+"\n";
		else str += host.getProbedBy().toString()+"\n";
		//--- Association parentOf ---
		str += "    parentOf"+": ";
		if(host.getParentOf() == null) str += "null"+"\n";
		else str += host.getParentOf().toString()+"\n";
		//--- Association contextFor ---
		str += "    contextFor"+": ";
		if(host.getContextFor() == null) str += "null"+"\n";
		else str += host.getContextFor().toString()+"\n";
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		str += "    networkAccess"+": ";
		if(host.getNetworkAccess() == null) str += "null"+"\n";
		else str += host.getNetworkAccess().toString()+"\n";
		//--- Property shareable ---
		str += "    shareable"+": ";
		if(host.getShareable() == null) str += "null"+"\n";
		else str += host.getShareable().toString()+"\n";
		//--- Association manages ---
		str += "    manages"+": ";
		if(host.getManages() == null) str += "null"+"\n";
		else str += host.getManages().toString()+"\n";
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.EntityRole' */
	public Object visit(edoc.ECA.EntityPkg.EntityRoleFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.EntityRoleFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.EntityRole' */
	public Object visit(edoc.ECA.EntityPkg.EntityRole host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EntityRole ---
		//--- Property virtualEntity ---
		str += "    virtualEntity"+": ";
		if(host.getVirtualEntity() == null) str += "null"+"\n";
		else str += host.getVirtualEntity().toString()+"\n";
		//--- Association parent ---
		str += "    parent"+": ";
		if(host.getParent() == null) str += "null"+"\n";
		else str += host.getParent().toString()+"\n";
		//--- Association roleContext ---
		str += "    roleContext"+": ";
		if(host.getRoleContext() == null) str += "null"+"\n";
		else str += host.getRoleContext().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.Key' */
	public Object visit(edoc.ECA.EntityPkg.KeyFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.KeyFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.Key' */
	public Object visit(edoc.ECA.EntityPkg.Key host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Key ---
		//--- Property primaryKey ---
		str += "    primaryKey"+": ";
		if(host.getPrimaryKey() == null) str += "null"+"\n";
		else str += host.getPrimaryKey().toString()+"\n";
		//--- Association keyElements ---
		str += "    keyElements"+": ";
		if(host.getKeyElements() == null) str += "null"+"\n";
		else str += host.getKeyElements().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Properties for CompositeData ---
		//--- Association features ---
		str += "    features"+": ";
		if(host.getFeatures() == null) str += "null"+"\n";
		else str += host.getFeatures().toString()+"\n";
		//--- Association superTypes ---
		str += "    superTypes"+": ";
		if(host.getSuperTypes() == null) str += "null"+"\n";
		else str += host.getSuperTypes().toString()+"\n";
		//--- Association subTypes ---
		str += "    subTypes"+": ";
		if(host.getSubTypes() == null) str += "null"+"\n";
		else str += host.getSubTypes().toString()+"\n";
		//--- Association managedBy ---
		str += "    managedBy"+": ";
		if(host.getManagedBy() == null) str += "null"+"\n";
		else str += host.getManagedBy().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.KeyElement' */
	public Object visit(edoc.ECA.EntityPkg.KeyElementFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.KeyElementFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.KeyElement' */
	public Object visit(edoc.ECA.EntityPkg.KeyElement host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		str += "    containingKey"+": ";
		if(host.getContainingKey() == null) str += "null"+"\n";
		else str += host.getContainingKey().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.KeyAttribute' */
	public Object visit(edoc.ECA.EntityPkg.KeyAttributeFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.KeyAttributeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.KeyAttribute' */
	public Object visit(edoc.ECA.EntityPkg.KeyAttribute host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for KeyAttribute ---
		//--- Association attributeName ---
		str += "    attributeName"+": ";
		if(host.getAttributeName() == null) str += "null"+"\n";
		else str += host.getAttributeName().toString()+"\n";
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		str += "    containingKey"+": ";
		if(host.getContainingKey() == null) str += "null"+"\n";
		else str += host.getContainingKey().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.ForeignKey' */
	public Object visit(edoc.ECA.EntityPkg.ForeignKeyFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.ForeignKeyFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.ForeignKey' */
	public Object visit(edoc.ECA.EntityPkg.ForeignKey host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ForeignKey ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Properties for KeyElement ---
		//--- Association containingKey ---
		str += "    containingKey"+": ";
		if(host.getContainingKey() == null) str += "null"+"\n";
		else str += host.getContainingKey().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.EntityPkg.EntityData' */
	public Object visit(edoc.ECA.EntityPkg.EntityDataFactory host, Object data) {
		String str = "edoc.ECA.EntityPkg.EntityDataFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.EntityPkg.EntityData' */
	public Object visit(edoc.ECA.EntityPkg.EntityData host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EntityData ---
		//--- Association keys ---
		str += "    keys"+": ";
		if(host.getKeys() == null) str += "null"+"\n";
		else str += host.getKeys().toString()+"\n";
		//--- Association foreignKeys ---
		str += "    foreignKeys"+": ";
		if(host.getForeignKeys() == null) str += "null"+"\n";
		else str += host.getForeignKeys().toString()+"\n";
		//--- Properties for CompositeData ---
		//--- Association features ---
		str += "    features"+": ";
		if(host.getFeatures() == null) str += "null"+"\n";
		else str += host.getFeatures().toString()+"\n";
		//--- Association superTypes ---
		str += "    superTypes"+": ";
		if(host.getSuperTypes() == null) str += "null"+"\n";
		else str += host.getSuperTypes().toString()+"\n";
		//--- Association subTypes ---
		str += "    subTypes"+": ";
		if(host.getSubTypes() == null) str += "null"+"\n";
		else str += host.getSubTypes().toString()+"\n";
		//--- Association managedBy ---
		str += "    managedBy"+": ";
		if(host.getManagedBy() == null) str += "null"+"\n";
		else str += host.getManagedBy().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.EventCondition' */
	public Object visit(edoc.ECA.Event.EventConditionFactory host, Object data) {
		String str = "edoc.ECA.Event.EventConditionFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.EventCondition' */
	public Object visit(edoc.ECA.Event.EventCondition host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EventCondition ---
		//--- Property condition ---
		str += "    condition"+": ";
		if(host.getCondition() == null) str += "null"+"\n";
		else str += host.getCondition().toString()+"\n";
		//--- Association guardedBy ---
		str += "    guardedBy"+": ";
		if(host.getGuardedBy() == null) str += "null"+"\n";
		else str += host.getGuardedBy().toString()+"\n";
		//--- Association requires ---
		str += "    requires"+": ";
		if(host.getRequires() == null) str += "null"+"\n";
		else str += host.getRequires().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.NotificationRule' */
	public Object visit(edoc.ECA.Event.NotificationRuleFactory host, Object data) {
		String str = "edoc.ECA.Event.NotificationRuleFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.NotificationRule' */
	public Object visit(edoc.ECA.Event.NotificationRule host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for NotificationRule ---
		//--- Property condition ---
		str += "    condition"+": ";
		if(host.getCondition() == null) str += "null"+"\n";
		else str += host.getCondition().toString()+"\n";
		//--- Association guards ---
		str += "    guards"+": ";
		if(host.getGuards() == null) str += "null"+"\n";
		else str += host.getGuards().toString()+"\n";
		//--- Association governs ---
		str += "    governs"+": ";
		if(host.getGoverns() == null) str += "null"+"\n";
		else str += host.getGoverns().toString()+"\n";
		//--- Association ruleContext ---
		str += "    ruleContext"+": ";
		if(host.getRuleContext() == null) str += "null"+"\n";
		else str += host.getRuleContext().toString()+"\n";
		//--- Association subscription ---
		str += "    subscription"+": ";
		if(host.getSubscription() == null) str += "null"+"\n";
		else str += host.getSubscription().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.Subscription' */
	public Object visit(edoc.ECA.Event.SubscriptionFactory host, Object data) {
		String str = "edoc.ECA.Event.SubscriptionFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.Subscription' */
	public Object visit(edoc.ECA.Event.Subscription host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Subscription ---
		//--- Property subscriptionClause ---
		str += "    subscriptionClause"+": ";
		if(host.getSubscriptionClause() == null) str += "null"+"\n";
		else str += host.getSubscriptionClause().toString()+"\n";
		//--- Property domain ---
		str += "    domain"+": ";
		if(host.getDomain() == null) str += "null"+"\n";
		else str += host.getDomain().toString()+"\n";
		//--- Association requiredBy ---
		str += "    requiredBy"+": ";
		if(host.getRequiredBy() == null) str += "null"+"\n";
		else str += host.getRequiredBy().toString()+"\n";
		//--- Association rules ---
		str += "    rules"+": ";
		if(host.getRules() == null) str += "null"+"\n";
		else str += host.getRules().toString()+"\n";
		//--- Association heldBy ---
		str += "    heldBy"+": ";
		if(host.getHeldBy() == null) str += "null"+"\n";
		else str += host.getHeldBy().toString()+"\n";
		//--- Association subscribedBy ---
		str += "    subscribedBy"+": ";
		if(host.getSubscribedBy() == null) str += "null"+"\n";
		else str += host.getSubscribedBy().toString()+"\n";
		//--- Properties for FlowPort ---
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association typeProperty ---
		str += "    typeProperty"+": ";
		if(host.getTypeProperty() == null) str += "null"+"\n";
		else str += host.getTypeProperty().toString()+"\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.Subscriber' */
	public Object visit(edoc.ECA.Event.Subscriber host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		str += "    subscriptions"+": ";
		if(host.getSubscriptions() == null) str += "null"+"\n";
		else str += host.getSubscriptions().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.Publication' */
	public Object visit(edoc.ECA.Event.PublicationFactory host, Object data) {
		String str = "edoc.ECA.Event.PublicationFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.Publication' */
	public Object visit(edoc.ECA.Event.Publication host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Publication ---
		//--- Property publicationClause ---
		str += "    publicationClause"+": ";
		if(host.getPublicationClause() == null) str += "null"+"\n";
		else str += host.getPublicationClause().toString()+"\n";
		//--- Property domain ---
		str += "    domain"+": ";
		if(host.getDomain() == null) str += "null"+"\n";
		else str += host.getDomain().toString()+"\n";
		//--- Association offeredBy ---
		str += "    offeredBy"+": ";
		if(host.getOfferedBy() == null) str += "null"+"\n";
		else str += host.getOfferedBy().toString()+"\n";
		//--- Association announcedBy ---
		str += "    announcedBy"+": ";
		if(host.getAnnouncedBy() == null) str += "null"+"\n";
		else str += host.getAnnouncedBy().toString()+"\n";
		//--- Properties for FlowPort ---
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association typeProperty ---
		str += "    typeProperty"+": ";
		if(host.getTypeProperty() == null) str += "null"+"\n";
		else str += host.getTypeProperty().toString()+"\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.Publisher' */
	public Object visit(edoc.ECA.Event.Publisher host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Publisher ---
		//--- Association offers ---
		str += "    offers"+": ";
		if(host.getOffers() == null) str += "null"+"\n";
		else str += host.getOffers().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.PubSubNotice' */
	public Object visit(edoc.ECA.Event.PubSubNoticeFactory host, Object data) {
		String str = "edoc.ECA.Event.PubSubNoticeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.PubSubNotice' */
	public Object visit(edoc.ECA.Event.PubSubNotice host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for PubSubNotice ---
		//--- Association subscribesTo ---
		str += "    subscribesTo"+": ";
		if(host.getSubscribesTo() == null) str += "null"+"\n";
		else str += host.getSubscribesTo().toString()+"\n";
		//--- Association announces ---
		str += "    announces"+": ";
		if(host.getAnnounces() == null) str += "null"+"\n";
		else str += host.getAnnounces().toString()+"\n";
		//--- Properties for CompositeData ---
		//--- Association features ---
		str += "    features"+": ";
		if(host.getFeatures() == null) str += "null"+"\n";
		else str += host.getFeatures().toString()+"\n";
		//--- Association superTypes ---
		str += "    superTypes"+": ";
		if(host.getSuperTypes() == null) str += "null"+"\n";
		else str += host.getSuperTypes().toString()+"\n";
		//--- Association subTypes ---
		str += "    subTypes"+": ";
		if(host.getSubTypes() == null) str += "null"+"\n";
		else str += host.getSubTypes().toString()+"\n";
		//--- Association managedBy ---
		str += "    managedBy"+": ";
		if(host.getManagedBy() == null) str += "null"+"\n";
		else str += host.getManagedBy().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.EventBasedProcess' */
	public Object visit(edoc.ECA.Event.EventBasedProcessFactory host, Object data) {
		String str = "edoc.ECA.Event.EventBasedProcessFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.EventBasedProcess' */
	public Object visit(edoc.ECA.Event.EventBasedProcess host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EventBasedProcess ---
		//--- Association notificationRules ---
		str += "    notificationRules"+": ";
		if(host.getNotificationRules() == null) str += "null"+"\n";
		else str += host.getNotificationRules().toString()+"\n";
		//--- Association processEvents ---
		str += "    processEvents"+": ";
		if(host.getProcessEvents() == null) str += "null"+"\n";
		else str += host.getProcessEvents().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		str += "    subscriptions"+": ";
		if(host.getSubscriptions() == null) str += "null"+"\n";
		else str += host.getSubscriptions().toString()+"\n";
		//--- Properties for Publisher ---
		//--- Association offers ---
		str += "    offers"+": ";
		if(host.getOffers() == null) str += "null"+"\n";
		else str += host.getOffers().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.BusinessEvent' */
	public Object visit(edoc.ECA.Event.BusinessEvent host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		str += "    describedBy"+": ";
		if(host.getDescribedBy() == null) str += "null"+"\n";
		else str += host.getDescribedBy().toString()+"\n";
		//--- Association triggers ---
		str += "    triggers"+": ";
		if(host.getTriggers() == null) str += "null"+"\n";
		else str += host.getTriggers().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.EventNotice' */
	public Object visit(edoc.ECA.Event.EventNoticeFactory host, Object data) {
		String str = "edoc.ECA.Event.EventNoticeFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.EventNotice' */
	public Object visit(edoc.ECA.Event.EventNotice host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EventNotice ---
		//--- Association describes ---
		str += "    describes"+": ";
		if(host.getDescribes() == null) str += "null"+"\n";
		else str += host.getDescribes().toString()+"\n";
		//--- Association triggeredBy ---
		str += "    triggeredBy"+": ";
		if(host.getTriggeredBy() == null) str += "null"+"\n";
		else str += host.getTriggeredBy().toString()+"\n";
		//--- Properties for PubSubNotice ---
		//--- Association subscribesTo ---
		str += "    subscribesTo"+": ";
		if(host.getSubscribesTo() == null) str += "null"+"\n";
		else str += host.getSubscribesTo().toString()+"\n";
		//--- Association announces ---
		str += "    announces"+": ";
		if(host.getAnnounces() == null) str += "null"+"\n";
		else str += host.getAnnounces().toString()+"\n";
		//--- Properties for CompositeData ---
		//--- Association features ---
		str += "    features"+": ";
		if(host.getFeatures() == null) str += "null"+"\n";
		else str += host.getFeatures().toString()+"\n";
		//--- Association superTypes ---
		str += "    superTypes"+": ";
		if(host.getSuperTypes() == null) str += "null"+"\n";
		else str += host.getSuperTypes().toString()+"\n";
		//--- Association subTypes ---
		str += "    subTypes"+": ";
		if(host.getSubTypes() == null) str += "null"+"\n";
		else str += host.getSubTypes().toString()+"\n";
		//--- Association managedBy ---
		str += "    managedBy"+": ";
		if(host.getManagedBy() == null) str += "null"+"\n";
		else str += host.getManagedBy().toString()+"\n";
		//--- Properties for DataElement ---
		//--- Association constraints ---
		str += "    constraints"+": ";
		if(host.getConstraints() == null) str += "null"+"\n";
		else str += host.getConstraints().toString()+"\n";
		//--- Association attrs ---
		str += "    attrs"+": ";
		if(host.getAttrs() == null) str += "null"+"\n";
		else str += host.getAttrs().toString()+"\n";
		//--- Association flowTypeOf ---
		str += "    flowTypeOf"+": ";
		if(host.getFlowTypeOf() == null) str += "null"+"\n";
		else str += host.getFlowTypeOf().toString()+"\n";
		//--- Association propertyTypeOf ---
		str += "    propertyTypeOf"+": ";
		if(host.getPropertyTypeOf() == null) str += "null"+"\n";
		else str += host.getPropertyTypeOf().toString()+"\n";
		//--- Properties for PackageContent ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association namespace_ ---
		str += "    namespace_"+": ";
		if(host.getNamespace_() == null) str += "null"+"\n";
		else str += host.getNamespace_().toString()+"\n";
		//--- Association elementImport ---
		str += "    elementImport"+": ";
		if(host.getElementImport() == null) str += "null"+"\n";
		else str += host.getElementImport().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.ProcessEvent' */
	public Object visit(edoc.ECA.Event.ProcessEventFactory host, Object data) {
		String str = "edoc.ECA.Event.ProcessEventFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.ProcessEvent' */
	public Object visit(edoc.ECA.Event.ProcessEvent host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessEvent ---
		//--- Property entry ---
		str += "    entry"+": ";
		if(host.getEntry() == null) str += "null"+"\n";
		else str += host.getEntry().toString()+"\n";
		//--- Property success ---
		str += "    success"+": ";
		if(host.getSuccess() == null) str += "null"+"\n";
		else str += host.getSuccess().toString()+"\n";
		//--- Association eventContext ---
		str += "    eventContext"+": ";
		if(host.getEventContext() == null) str += "null"+"\n";
		else str += host.getEventContext().toString()+"\n";
		//--- Association reflects ---
		str += "    reflects"+": ";
		if(host.getReflects() == null) str += "null"+"\n";
		else str += host.getReflects().toString()+"\n";
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		str += "    describedBy"+": ";
		if(host.getDescribedBy() == null) str += "null"+"\n";
		else str += host.getDescribedBy().toString()+"\n";
		//--- Association triggers ---
		str += "    triggers"+": ";
		if(host.getTriggers() == null) str += "null"+"\n";
		else str += host.getTriggers().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.EventBasedDataManager' */
	public Object visit(edoc.ECA.Event.EventBasedDataManagerFactory host, Object data) {
		String str = "edoc.ECA.Event.EventBasedDataManagerFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.EventBasedDataManager' */
	public Object visit(edoc.ECA.Event.EventBasedDataManager host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for EventBasedDataManager ---
		//--- Association dataEvents ---
		str += "    dataEvents"+": ";
		if(host.getDataEvents() == null) str += "null"+"\n";
		else str += host.getDataEvents().toString()+"\n";
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		str += "    networkAccess"+": ";
		if(host.getNetworkAccess() == null) str += "null"+"\n";
		else str += host.getNetworkAccess().toString()+"\n";
		//--- Property shareable ---
		str += "    shareable"+": ";
		if(host.getShareable() == null) str += "null"+"\n";
		else str += host.getShareable().toString()+"\n";
		//--- Association manages ---
		str += "    manages"+": ";
		if(host.getManages() == null) str += "null"+"\n";
		else str += host.getManages().toString()+"\n";
		//--- Properties for EventBasedProcess ---
		//--- Association notificationRules ---
		str += "    notificationRules"+": ";
		if(host.getNotificationRules() == null) str += "null"+"\n";
		else str += host.getNotificationRules().toString()+"\n";
		//--- Association processEvents ---
		str += "    processEvents"+": ";
		if(host.getProcessEvents() == null) str += "null"+"\n";
		else str += host.getProcessEvents().toString()+"\n";
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		//--- Properties for Subscriber ---
		//--- Association subscriptions ---
		str += "    subscriptions"+": ";
		if(host.getSubscriptions() == null) str += "null"+"\n";
		else str += host.getSubscriptions().toString()+"\n";
		//--- Properties for Publisher ---
		//--- Association offers ---
		str += "    offers"+": ";
		if(host.getOffers() == null) str += "null"+"\n";
		else str += host.getOffers().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.Event.DataEvent' */
	public Object visit(edoc.ECA.Event.DataEventFactory host, Object data) {
		String str = "edoc.ECA.Event.DataEventFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.Event.DataEvent' */
	public Object visit(edoc.ECA.Event.DataEvent host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataEvent ---
		//--- Association eventContext ---
		str += "    eventContext"+": ";
		if(host.getEventContext() == null) str += "null"+"\n";
		else str += host.getEventContext().toString()+"\n";
		//--- Properties for BusinessEvent ---
		//--- Association describedBy ---
		str += "    describedBy"+": ";
		if(host.getDescribedBy() == null) str += "null"+"\n";
		else str += host.getDescribedBy().toString()+"\n";
		//--- Association triggers ---
		str += "    triggers"+": ";
		if(host.getTriggers() == null) str += "null"+"\n";
		else str += host.getTriggers().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Activity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ActivityFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ActivityFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Activity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Activity host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Activity ---
		//--- Association usesArtifact ---
		str += "    usesArtifact"+": ";
		if(host.getUsesArtifact() == null) str += "null"+"\n";
		else str += host.getUsesArtifact().toString()+"\n";
		//--- Association performedBy ---
		str += "    performedBy"+": ";
		if(host.getPerformedBy() == null) str += "null"+"\n";
		else str += host.getPerformedBy().toString()+"\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.BusinessProcess' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.BusinessProcessFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.BusinessProcess' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcess host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for BusinessProcess ---
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.CompoundTask' */
	public Object visit(edoc.ECA.BusinessProcessPkg.CompoundTaskFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.CompoundTaskFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.CompoundTask' */
	public Object visit(edoc.ECA.BusinessProcessPkg.CompoundTask host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for CompoundTask ---
		//--- Properties for BusinessProcess ---
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.BusinessProcessEntity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessEntityFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.BusinessProcessEntityFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.BusinessProcessEntity' */
	public Object visit(edoc.ECA.BusinessProcessPkg.BusinessProcessEntity host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for BusinessProcessEntity ---
		//--- Properties for Entity ---
		//--- Property managed ---
		str += "    managed"+": ";
		if(host.getManaged() == null) str += "null"+"\n";
		else str += host.getManaged().toString()+"\n";
		//--- Association probedBy ---
		str += "    probedBy"+": ";
		if(host.getProbedBy() == null) str += "null"+"\n";
		else str += host.getProbedBy().toString()+"\n";
		//--- Association parentOf ---
		str += "    parentOf"+": ";
		if(host.getParentOf() == null) str += "null"+"\n";
		else str += host.getParentOf().toString()+"\n";
		//--- Association contextFor ---
		str += "    contextFor"+": ";
		if(host.getContextFor() == null) str += "null"+"\n";
		else str += host.getContextFor().toString()+"\n";
		//--- Properties for BusinessProcess ---
		//--- Properties for DataManager ---
		//--- Property networkAccess ---
		str += "    networkAccess"+": ";
		if(host.getNetworkAccess() == null) str += "null"+"\n";
		else str += host.getNetworkAccess().toString()+"\n";
		//--- Property shareable ---
		str += "    shareable"+": ";
		if(host.getShareable() == null) str += "null"+"\n";
		else str += host.getShareable().toString()+"\n";
		//--- Association manages ---
		str += "    manages"+": ";
		if(host.getManages() == null) str += "null"+"\n";
		else str += host.getManages().toString()+"\n";
		//--- Properties for ProcessComponent ---
		//--- Property granularity ---
		str += "    granularity"+": ";
		if(host.getGranularity() == null) str += "null"+"\n";
		else str += host.getGranularity().toString()+"\n";
		//--- Property isPersistent ---
		str += "    isPersistent"+": ";
		if(host.getIsPersistent() == null) str += "null"+"\n";
		else str += host.getIsPersistent().toString()+"\n";
		//--- Property primitiveKind ---
		str += "    primitiveKind"+": ";
		if(host.getPrimitiveKind() == null) str += "null"+"\n";
		else str += host.getPrimitiveKind().toString()+"\n";
		//--- Property primitiveSpec ---
		str += "    primitiveSpec"+": ";
		if(host.getPrimitiveSpec() == null) str += "null"+"\n";
		else str += host.getPrimitiveSpec().toString()+"\n";
		//--- Association contextualBindings ---
		str += "    contextualBindings"+": ";
		if(host.getContextualBindings() == null) str += "null"+"\n";
		else str += host.getContextualBindings().toString()+"\n";
		//--- Association usedBy ---
		str += "    usedBy"+": ";
		if(host.getUsedBy() == null) str += "null"+"\n";
		else str += host.getUsedBy().toString()+"\n";
		//--- Association properties ---
		str += "    properties"+": ";
		if(host.getProperties() == null) str += "null"+"\n";
		else str += host.getProperties().toString()+"\n";
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Composition ---
		//--- Association bindings ---
		str += "    bindings"+": ";
		if(host.getBindings() == null) str += "null"+"\n";
		else str += host.getBindings().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Choreography ---
		//--- Association nodes ---
		str += "    nodes"+": ";
		if(host.getNodes() == null) str += "null"+"\n";
		else str += host.getNodes().toString()+"\n";
		//--- Association connections ---
		str += "    connections"+": ";
		if(host.getConnections() == null) str += "null"+"\n";
		else str += host.getConnections().toString()+"\n";
		//--- Association supertype ---
		str += "    supertype"+": ";
		if(host.getSupertype() == null) str += "null"+"\n";
		else str += host.getSupertype().toString()+"\n";
		//--- Association subtypes ---
		str += "    subtypes"+": ";
		if(host.getSubtypes() == null) str += "null"+"\n";
		else str += host.getSubtypes().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessMultiPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessMultiPortFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ProcessMultiPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessMultiPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessMultiPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.InputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.InputGroupFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.InputGroupFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.InputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.InputGroup host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for InputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.OutputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.OutputGroupFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.OutputGroupFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.OutputGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.OutputGroup host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for OutputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ExceptionGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ExceptionGroupFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ExceptionGroupFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ExceptionGroup' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ExceptionGroup host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ExceptionGroup ---
		//--- Properties for OutputGroup ---
		//--- Properties for ProcessMultiPort ---
		//--- Properties for MultiPort ---
		//--- Properties for PortOwner ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association ports ---
		str += "    ports"+": ";
		if(host.getPorts() == null) str += "null"+"\n";
		else str += host.getPorts().toString()+"\n";
		//--- Properties for Port ---
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessFlowPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessFlowPortFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ProcessFlowPortFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessFlowPort' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessFlowPort host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessFlowPort ---
		//--- Property multiplicity_lb ---
		str += "    multiplicity_lb"+": ";
		if(host.getMultiplicity_lb() == null) str += "null"+"\n";
		else str += host.getMultiplicity_lb().toString()+"\n";
		//--- Property multiplicity_ub ---
		str += "    multiplicity_ub"+": ";
		if(host.getMultiplicity_ub() == null) str += "null"+"\n";
		else str += host.getMultiplicity_ub().toString()+"\n";
		//--- Properties for FlowPort ---
		//--- Association type ---
		str += "    type"+": ";
		if(host.getType() == null) str += "null"+"\n";
		else str += host.getType().toString()+"\n";
		//--- Association typeProperty ---
		str += "    typeProperty"+": ";
		if(host.getTypeProperty() == null) str += "null"+"\n";
		else str += host.getTypeProperty().toString()+"\n";
		//--- Properties for Port ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Property isSynchronous ---
		str += "    isSynchronous"+": ";
		if(host.getIsSynchronous() == null) str += "null"+"\n";
		else str += host.getIsSynchronous().toString()+"\n";
		//--- Property isTransactional ---
		str += "    isTransactional"+": ";
		if(host.getIsTransactional() == null) str += "null"+"\n";
		else str += host.getIsTransactional().toString()+"\n";
		//--- Property direction ---
		str += "    direction"+": ";
		if(host.getDirection() == null) str += "null"+"\n";
		else str += host.getDirection().toString()+"\n";
		//--- Property postCondition ---
		str += "    postCondition"+": ";
		if(host.getPostCondition() == null) str += "null"+"\n";
		else str += host.getPostCondition().toString()+"\n";
		//--- Association representedBy ---
		str += "    representedBy"+": ";
		if(host.getRepresentedBy() == null) str += "null"+"\n";
		else str += host.getRepresentedBy().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessPortConnector' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessPortConnectorFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ProcessPortConnectorFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessPortConnector' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessPortConnector host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessPortConnector ---
		//--- Properties for PortConnector ---
		//--- Properties for PortUseage ---
		//--- Association extent ---
		str += "    extent"+": ";
		if(host.getExtent() == null) str += "null"+"\n";
		else str += host.getExtent().toString()+"\n";
		//--- Association represents ---
		str += "    represents"+": ";
		if(host.getRepresents() == null) str += "null"+"\n";
		else str += host.getRepresents().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		//--- Properties for Node ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association incoming ---
		str += "    incoming"+": ";
		if(host.getIncoming() == null) str += "null"+"\n";
		else str += host.getIncoming().toString()+"\n";
		//--- Association outgoing ---
		str += "    outgoing"+": ";
		if(host.getOutgoing() == null) str += "null"+"\n";
		else str += host.getOutgoing().toString()+"\n";
		//--- Association governedBy ---
		str += "    governedBy"+": ";
		if(host.getGovernedBy() == null) str += "null"+"\n";
		else str += host.getGovernedBy().toString()+"\n";
		//--- Association reflectedIn ---
		str += "    reflectedIn"+": ";
		if(host.getReflectedIn() == null) str += "null"+"\n";
		else str += host.getReflectedIn().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.DataFlow' */
	public Object visit(edoc.ECA.BusinessProcessPkg.DataFlowFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.DataFlowFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.DataFlow' */
	public Object visit(edoc.ECA.BusinessProcessPkg.DataFlow host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for DataFlow ---
		//--- Properties for Connection ---
		//--- Properties for AbstractTransition ---
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association target ---
		str += "    target"+": ";
		if(host.getTarget() == null) str += "null"+"\n";
		else str += host.getTarget().toString()+"\n";
		//--- Association source ---
		str += "    source"+": ";
		if(host.getSource() == null) str += "null"+"\n";
		else str += host.getSource().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ProcessRole' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessRoleFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ProcessRoleFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ProcessRole' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ProcessRole host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		str += "    selectionRule"+": ";
		if(host.getSelectionRule() == null) str += "null"+"\n";
		else str += host.getSelectionRule().toString()+"\n";
		//--- Property creationRule ---
		str += "    creationRule"+": ";
		if(host.getCreationRule() == null) str += "null"+"\n";
		else str += host.getCreationRule().toString()+"\n";
		//--- Association artifactFor ---
		str += "    artifactFor"+": ";
		if(host.getArtifactFor() == null) str += "null"+"\n";
		else str += host.getArtifactFor().toString()+"\n";
		//--- Association performs ---
		str += "    performs"+": ";
		if(host.getPerforms() == null) str += "null"+"\n";
		else str += host.getPerforms().toString()+"\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Performer' */
	public Object visit(edoc.ECA.BusinessProcessPkg.PerformerFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.PerformerFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Performer' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Performer host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Performer ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		str += "    selectionRule"+": ";
		if(host.getSelectionRule() == null) str += "null"+"\n";
		else str += host.getSelectionRule().toString()+"\n";
		//--- Property creationRule ---
		str += "    creationRule"+": ";
		if(host.getCreationRule() == null) str += "null"+"\n";
		else str += host.getCreationRule().toString()+"\n";
		//--- Association artifactFor ---
		str += "    artifactFor"+": ";
		if(host.getArtifactFor() == null) str += "null"+"\n";
		else str += host.getArtifactFor().toString()+"\n";
		//--- Association performs ---
		str += "    performs"+": ";
		if(host.getPerforms() == null) str += "null"+"\n";
		else str += host.getPerforms().toString()+"\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.Artifact' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ArtifactFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ArtifactFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.Artifact' */
	public Object visit(edoc.ECA.BusinessProcessPkg.Artifact host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for Artifact ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		str += "    selectionRule"+": ";
		if(host.getSelectionRule() == null) str += "null"+"\n";
		else str += host.getSelectionRule().toString()+"\n";
		//--- Property creationRule ---
		str += "    creationRule"+": ";
		if(host.getCreationRule() == null) str += "null"+"\n";
		else str += host.getCreationRule().toString()+"\n";
		//--- Association artifactFor ---
		str += "    artifactFor"+": ";
		if(host.getArtifactFor() == null) str += "null"+"\n";
		else str += host.getArtifactFor().toString()+"\n";
		//--- Association performs ---
		str += "    performs"+": ";
		if(host.getPerforms() == null) str += "null"+"\n";
		else str += host.getPerforms().toString()+"\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
	/** Visit factory for 'edoc.ECA.BusinessProcessPkg.ResponsibleParty' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ResponsiblePartyFactory host, Object data) {
		String str = "edoc.ECA.BusinessProcessPkg.ResponsiblePartyFactory";
		return str;
	}
	/** Visit class for 'edoc.ECA.BusinessProcessPkg.ResponsibleParty' */
	public Object visit(edoc.ECA.BusinessProcessPkg.ResponsibleParty host, Object data) {
		String str = "  "+host.toString()+" {\n";
		//--- Properties for ResponsibleParty ---
		//--- Properties for ProcessRole ---
		//--- Property selectionRule ---
		str += "    selectionRule"+": ";
		if(host.getSelectionRule() == null) str += "null"+"\n";
		else str += host.getSelectionRule().toString()+"\n";
		//--- Property creationRule ---
		str += "    creationRule"+": ";
		if(host.getCreationRule() == null) str += "null"+"\n";
		else str += host.getCreationRule().toString()+"\n";
		//--- Association artifactFor ---
		str += "    artifactFor"+": ";
		if(host.getArtifactFor() == null) str += "null"+"\n";
		else str += host.getArtifactFor().toString()+"\n";
		//--- Association performs ---
		str += "    performs"+": ";
		if(host.getPerforms() == null) str += "null"+"\n";
		else str += host.getPerforms().toString()+"\n";
		//--- Properties for ComponentUsage ---
		//--- Property name ---
		str += "    name"+": ";
		if(host.getName() == null) str += "null"+"\n";
		else str += host.getName().toString()+"\n";
		//--- Association owner ---
		str += "    owner"+": ";
		if(host.getOwner() == null) str += "null"+"\n";
		else str += host.getOwner().toString()+"\n";
		//--- Association filledBy ---
		str += "    filledBy"+": ";
		if(host.getFilledBy() == null) str += "null"+"\n";
		else str += host.getFilledBy().toString()+"\n";
		//--- Association uses ---
		str += "    uses"+": ";
		if(host.getUses() == null) str += "null"+"\n";
		else str += host.getUses().toString()+"\n";
		//--- Association configuration ---
		str += "    configuration"+": ";
		if(host.getConfiguration() == null) str += "null"+"\n";
		else str += host.getConfiguration().toString()+"\n";
		//--- Properties for UsageContext ---
		//--- Association portsUsed ---
		str += "    portsUsed"+": ";
		if(host.getPortsUsed() == null) str += "null"+"\n";
		else str += host.getPortsUsed().toString()+"\n";
		str += "  }\n";
		return str;
	}
}
