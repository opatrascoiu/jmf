/**
 *
 *  Class JavaModelJTreeVisitor$Class.java
 *
 *  Generated by KMFStudio at 22 February 2004 15:13:03
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package javaModel.repository;

import java.util.*;
import java.lang.reflect.*;
import javax.swing.tree.*;

import uk.ac.kent.cs.kmf.util.*;

public class JavaModelJTreeVisitor$Class
	implements JavaModelJTreeVisitor
{
	/** Visit factory for 'JavaModelFactory' */
	public Object visit(javaModel.JavaModelFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		return root;
	}
	/** Visit factory for 'javaModel.JavaClass' */
	public Object visit(javaModel.JavaClassFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaClass' */
	public Object visit(javaModel.JavaClass host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaClass ---
		//--- Association fields ---
		DefaultMutableTreeNode fieldsNode = getNode(this, "fields", host.getFields(), data);
		root.add(fieldsNode);
		//--- Association methods ---
		DefaultMutableTreeNode methodsNode = getNode(this, "methods", host.getMethods(), data);
		root.add(methodsNode);
		//--- Association sources ---
		DefaultMutableTreeNode sourcesNode = getNode(this, "sources", host.getSources(), data);
		root.add(sourcesNode);
		//--- Association implements_ ---
		DefaultMutableTreeNode implements_Node = getNode(this, "implements_", host.getImplements_(), data);
		root.add(implements_Node);
		//--- Properties for JavaClassifier ---
		//--- Association sub ---
		DefaultMutableTreeNode subNode = getNode(this, "sub", host.getSub(), data);
		root.add(subNode);
		//--- Association super_ ---
		DefaultMutableTreeNode super_Node = getNode(this, "super_", host.getSuper_(), data);
		root.add(super_Node);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaField' */
	public Object visit(javaModel.JavaFieldFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaField' */
	public Object visit(javaModel.JavaField host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaField ---
		//--- Property isFinal ---
		DefaultMutableTreeNode isFinalNode = getNode(this, "isFinal", host.getIsFinal(), data);
		root.add(isFinalNode);
		//--- Property isStatic ---
		DefaultMutableTreeNode isStaticNode = getNode(this, "isStatic", host.getIsStatic(), data);
		root.add(isStaticNode);
		//--- Property isVolatile ---
		DefaultMutableTreeNode isVolatileNode = getNode(this, "isVolatile", host.getIsVolatile(), data);
		root.add(isVolatileNode);
		//--- Property isTransient ---
		DefaultMutableTreeNode isTransientNode = getNode(this, "isTransient", host.getIsTransient(), data);
		root.add(isTransientNode);
		//--- Association javaClass ---
		DefaultMutableTreeNode javaClassNode = getNode(this, "javaClass", host.getJavaClass(), data);
		root.add(javaClassNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaMethod' */
	public Object visit(javaModel.JavaMethodFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaMethod' */
	public Object visit(javaModel.JavaMethod host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaMethod ---
		//--- Property isAbstract ---
		DefaultMutableTreeNode isAbstractNode = getNode(this, "isAbstract", host.getIsAbstract(), data);
		root.add(isAbstractNode);
		//--- Property isNative ---
		DefaultMutableTreeNode isNativeNode = getNode(this, "isNative", host.getIsNative(), data);
		root.add(isNativeNode);
		//--- Property isSynchronized ---
		DefaultMutableTreeNode isSynchronizedNode = getNode(this, "isSynchronized", host.getIsSynchronized(), data);
		root.add(isSynchronizedNode);
		//--- Property isFinal ---
		DefaultMutableTreeNode isFinalNode = getNode(this, "isFinal", host.getIsFinal(), data);
		root.add(isFinalNode);
		//--- Property isConstructor ---
		DefaultMutableTreeNode isConstructorNode = getNode(this, "isConstructor", host.getIsConstructor(), data);
		root.add(isConstructorNode);
		//--- Property isStatic ---
		DefaultMutableTreeNode isStaticNode = getNode(this, "isStatic", host.getIsStatic(), data);
		root.add(isStaticNode);
		//--- Property body ---
		DefaultMutableTreeNode bodyNode = getNode(this, "body", host.getBody(), data);
		root.add(bodyNode);
		//--- Association javaClasses ---
		DefaultMutableTreeNode javaClassesNode = getNode(this, "javaClasses", host.getJavaClasses(), data);
		root.add(javaClassesNode);
		//--- Association javaException ---
		DefaultMutableTreeNode javaExceptionNode = getNode(this, "javaException", host.getJavaException(), data);
		root.add(javaExceptionNode);
		//--- Association parameters ---
		DefaultMutableTreeNode parametersNode = getNode(this, "parameters", host.getParameters(), data);
		root.add(parametersNode);
		//--- Association result ---
		DefaultMutableTreeNode resultNode = getNode(this, "result", host.getResult(), data);
		root.add(resultNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit class for 'javaModel.JavaElement' */
	public Object visit(javaModel.JavaElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaPackage' */
	public Object visit(javaModel.JavaPackageFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaPackage' */
	public Object visit(javaModel.JavaPackage host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaPackage ---
		//--- Association elements ---
		DefaultMutableTreeNode elementsNode = getNode(this, "elements", host.getElements(), data);
		root.add(elementsNode);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaParameter' */
	public Object visit(javaModel.JavaParameterFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaParameter' */
	public Object visit(javaModel.JavaParameter host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaParameter ---
		//--- Association owner ---
		DefaultMutableTreeNode ownerNode = getNode(this, "owner", host.getOwner(), data);
		root.add(ownerNode);
		//--- Association function ---
		DefaultMutableTreeNode functionNode = getNode(this, "function", host.getFunction(), data);
		root.add(functionNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaPackageElement' */
	public Object visit(javaModel.JavaPackageElementFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaPackageElement' */
	public Object visit(javaModel.JavaPackageElement host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaInterface' */
	public Object visit(javaModel.JavaInterfaceFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaInterface' */
	public Object visit(javaModel.JavaInterface host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaInterface ---
		//--- Association implementedBy ---
		DefaultMutableTreeNode implementedByNode = getNode(this, "implementedBy", host.getImplementedBy(), data);
		root.add(implementedByNode);
		//--- Properties for JavaClassifier ---
		//--- Association sub ---
		DefaultMutableTreeNode subNode = getNode(this, "sub", host.getSub(), data);
		root.add(subNode);
		//--- Association super_ ---
		DefaultMutableTreeNode super_Node = getNode(this, "super_", host.getSuper_(), data);
		root.add(super_Node);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.JavaClassifier' */
	public Object visit(javaModel.JavaClassifierFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.JavaClassifier' */
	public Object visit(javaModel.JavaClassifier host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for JavaClassifier ---
		//--- Association sub ---
		DefaultMutableTreeNode subNode = getNode(this, "sub", host.getSub(), data);
		root.add(subNode);
		//--- Association super_ ---
		DefaultMutableTreeNode super_Node = getNode(this, "super_", host.getSuper_(), data);
		root.add(super_Node);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.DataType' */
	public Object visit(javaModel.DataTypeFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.DataType' */
	public Object visit(javaModel.DataType host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataType ---
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Properties for JavaClassifier ---
		//--- Association sub ---
		DefaultMutableTreeNode subNode = getNode(this, "sub", host.getSub(), data);
		root.add(subNode);
		//--- Association super_ ---
		DefaultMutableTreeNode super_Node = getNode(this, "super_", host.getSuper_(), data);
		root.add(super_Node);
		//--- Properties for JavaPackageElement ---
		//--- Association javaPackage ---
		DefaultMutableTreeNode javaPackageNode = getNode(this, "javaPackage", host.getJavaPackage(), data);
		root.add(javaPackageNode);
		//--- Properties for JavaElement ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		return root;
	}
	/** Visit factory for 'javaModel.DataKind' */
	public Object visit(javaModel.DataKindFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'javaModel.DataKind' */
	public Object visit(javaModel.DataKind host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DataKind ---
		return root;
	}
	/** Auxiliary function used by the vistors */
	DefaultMutableTreeNode getNode(JavaModelJTreeVisitor visitor, String name, Object obj, Object data) {
		//--- Elements visited on this branch ---
		Set visitedElements = (Set)data;
		//--- Create node ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(name);
		//--- Construct the value ---
		//--- Primitive types ---
		if (obj == null) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("null");
			root.add(objNode);
			return root;
		}
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofPrimitiveType(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj.toString());
			root.add(objNode);
			return root;
		}
		//--- Collection types ---
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				DefaultMutableTreeNode objNode = getNode(this, "Element", i.next(), data);
				root.add((DefaultMutableTreeNode)objNode.getChildAt(0));
			}
			return root;
		}
		//--- Enumerations types ---
		String fullClassName = obj.getClass().getName();
		if (fullClassName.endsWith("Enum") || fullClassName.endsWith("Kind")) {
			//--- Get class ---
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("Error");
			try {
				Class objClass = obj.getClass();
				Class visitorClass = Class.forName("javaModel.JavaModelVisitor");
				Class dataClass = data.getClass();
				Method accept = objClass.getMethod("accept", new Class[] {visitorClass, dataClass});
				objNode = (DefaultMutableTreeNode)accept.invoke(obj, new Object[] {visitor, data});
			} catch (Exception e) {
			}
			root.add(objNode);
			return root;
		}
		//--- User types ---
		//--- Already added on the current branch: make a toSring node ---
		if (visitedElements.contains(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj, false);
			root.add(objNode);
		//--- Was not visited previously on the current branch ---
		} else {
			// Add it
			visitedElements.add(obj);
			// Visit it
			DefaultMutableTreeNode objNode = (DefaultMutableTreeNode)((javaModel.JavaModelElement)obj).accept(visitor, visitedElements);
			root.add(objNode);
		}
		return root;
	}
}
