/**
 *
 *  Class JavaModelViewVisitor$Class.java
 *
 *  Generated by KMFStudio at 22 February 2004 15:13:04
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package javaModel.repository;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.OclProcessor;

public class JavaModelViewVisitor$Class
	implements JavaModelViewVisitor
{
	/** Constructor */
	public JavaModelViewVisitor$Class(OclProcessor oclProcessor) {
		this.oclProcessor = oclProcessor;
	}

	/** OclProcessor */
	protected OclProcessor oclProcessor;
	public OclProcessor getOclProcessor() { return oclProcessor; }
	public void setOclProcessor(OclProcessor processor) { oclProcessor = processor;	}

	/** Visit factory for 'JavaModelFactory' */
	public Object visit(javaModel.JavaModelFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaModelFactory");
		return frame;
	}
	/** Visit factory for 'javaModel.JavaClass' */
	public Object visit(javaModel.JavaClassFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaClassFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaClass' */
	public Object visit(javaModel.JavaClass host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaClass finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);
		//--- Add association 'sub' ---
		//--- Add labels ---
		addLabels("sub", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sub", host.getSub(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'super_' ---
		//--- Add labels ---
		addLabels("super_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "super_", host.getSuper_(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'fields' ---
		//--- Add labels ---
		addLabels("fields", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "fields", host.getFields(), rep, "javaModel.JavaField", editPanel, c, line, frame);
		//--- Add association 'methods' ---
		//--- Add labels ---
		addLabels("methods", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "methods", host.getMethods(), rep, "javaModel.JavaMethod", editPanel, c, line, frame);
		//--- Add association 'sources' ---
		//--- Add labels ---
		addLabels("sources", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sources", host.getSources(), rep, "javaModel.JavaMethod", editPanel, c, line, frame);
		//--- Add association 'implements_' ---
		//--- Add labels ---
		addLabels("implements_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "implements_", host.getImplements_(), rep, "javaModel.JavaInterface", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaClass", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaField' */
	public Object visit(javaModel.JavaFieldFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaFieldFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaField' */
	public Object visit(javaModel.JavaField host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaField finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'isFinal' ---
		//--- Add labels ---
		addLabels("isFinal", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isFinal", host.getIsFinal(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isStatic' ---
		//--- Add labels ---
		addLabels("isStatic", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isStatic", host.getIsStatic(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isVolatile' ---
		//--- Add labels ---
		addLabels("isVolatile", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isVolatile", host.getIsVolatile(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isTransient' ---
		//--- Add labels ---
		addLabels("isTransient", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isTransient", host.getIsTransient(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add association 'javaClass' ---
		//--- Add labels ---
		addLabels("javaClass", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaClass", host.getJavaClass(), rep, "javaModel.JavaClass", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaField", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaMethod' */
	public Object visit(javaModel.JavaMethodFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaMethodFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaMethod' */
	public Object visit(javaModel.JavaMethod host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaMethod finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add attribute 'isAbstract' ---
		//--- Add labels ---
		addLabels("isAbstract", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isAbstract", host.getIsAbstract(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isNative' ---
		//--- Add labels ---
		addLabels("isNative", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isNative", host.getIsNative(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isSynchronized' ---
		//--- Add labels ---
		addLabels("isSynchronized", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isSynchronized", host.getIsSynchronized(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isFinal' ---
		//--- Add labels ---
		addLabels("isFinal", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isFinal", host.getIsFinal(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isConstructor' ---
		//--- Add labels ---
		addLabels("isConstructor", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isConstructor", host.getIsConstructor(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isStatic' ---
		//--- Add labels ---
		addLabels("isStatic", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "isStatic", host.getIsStatic(), rep, "Boolean", editPanel, c, line, frame);
		//--- Add attribute 'isNative' ---
		//--- Add attribute 'body' ---
		//--- Add labels ---
		addLabels("body", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "body", host.getBody(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaClasses' ---
		//--- Add labels ---
		addLabels("javaClasses", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaClasses", host.getJavaClasses(), rep, "javaModel.JavaClass", editPanel, c, line, frame);
		//--- Add association 'javaException' ---
		//--- Add labels ---
		addLabels("javaException", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaException", host.getJavaException(), rep, "javaModel.JavaClass", editPanel, c, line, frame);
		//--- Add association 'parameters' ---
		//--- Add labels ---
		addLabels("parameters", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "parameters", host.getParameters(), rep, "javaModel.JavaParameter", editPanel, c, line, frame);
		//--- Add association 'result' ---
		//--- Add labels ---
		addLabels("result", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "result", host.getResult(), rep, "javaModel.JavaParameter", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaMethod", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit class for 'javaModel.JavaElement' */
	public Object visit(javaModel.JavaElement host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaElement finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaElement", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaPackage' */
	public Object visit(javaModel.JavaPackageFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaPackageFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaPackage' */
	public Object visit(javaModel.JavaPackage host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaPackage finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);
		//--- Add association 'elements' ---
		//--- Add labels ---
		addLabels("elements", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "elements", host.getElements(), rep, "javaModel.JavaPackageElement", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaPackage", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaParameter' */
	public Object visit(javaModel.JavaParameterFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaParameterFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaParameter' */
	public Object visit(javaModel.JavaParameter host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaParameter finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'owner' ---
		//--- Add labels ---
		addLabels("owner", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "owner", host.getOwner(), rep, "javaModel.JavaMethod", editPanel, c, line, frame);
		//--- Add association 'function' ---
		//--- Add labels ---
		addLabels("function", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "function", host.getFunction(), rep, "javaModel.JavaMethod", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaParameter", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaPackageElement' */
	public Object visit(javaModel.JavaPackageElementFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaPackageElementFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaPackageElement' */
	public Object visit(javaModel.JavaPackageElement host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaPackageElement finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaPackageElement", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaInterface' */
	public Object visit(javaModel.JavaInterfaceFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaInterfaceFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaInterface' */
	public Object visit(javaModel.JavaInterface host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaInterface finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);
		//--- Add association 'sub' ---
		//--- Add labels ---
		addLabels("sub", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sub", host.getSub(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'super_' ---
		//--- Add labels ---
		addLabels("super_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "super_", host.getSuper_(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'implementedBy' ---
		//--- Add labels ---
		addLabels("implementedBy", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "implementedBy", host.getImplementedBy(), rep, "javaModel.JavaClass", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaInterface", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.JavaClassifier' */
	public Object visit(javaModel.JavaClassifierFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.JavaClassifierFactory");
		return frame;
	}
	/** Visit class for 'javaModel.JavaClassifier' */
	public Object visit(javaModel.JavaClassifier host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.JavaClassifier finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);
		//--- Add association 'sub' ---
		//--- Add labels ---
		addLabels("sub", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sub", host.getSub(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'super_' ---
		//--- Add labels ---
		addLabels("super_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "super_", host.getSuper_(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.JavaClassifier", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.DataType' */
	public Object visit(javaModel.DataTypeFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.DataTypeFactory");
		return frame;
	}
	/** Visit class for 'javaModel.DataType' */
	public Object visit(javaModel.DataType host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.DataType finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'javaPackage' ---
		//--- Add labels ---
		addLabels("javaPackage", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "javaPackage", host.getJavaPackage(), rep, "javaModel.JavaPackage", editPanel, c, line, frame);
		//--- Add association 'sub' ---
		//--- Add labels ---
		addLabels("sub", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "sub", host.getSub(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add association 'super_' ---
		//--- Add labels ---
		addLabels("super_", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "super_", host.getSuper_(), rep, "javaModel.JavaClassifier", editPanel, c, line, frame);
		//--- Add attribute 'kind' ---
		//--- Add labels ---
		addLabels("kind", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "kind", host.getKind(), rep, "javaModel.DataKind", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.DataType", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'javaModel.DataKind' */
	public Object visit(javaModel.DataKindFactory host, Object data) {
		JFrame frame = new JFrame("javaModel.DataKindFactory");
		return frame;
	}
	/** Visit class for 'javaModel.DataKind' */
	public Object visit(javaModel.DataKind host, Object data) {
		//--- Get the repository ---
		final javaModel.repository.JavaModelRepository rep = (javaModel.repository.JavaModelRepository)data;

		//--- Make a final copy of host ---
		final javaModel.DataKind finalHost = host;

		//--- Frame settings ---
		final JavaModelViewEditFrame$Class frame = new JavaModelViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("javaModel.DataKind", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}

	//--- Create EVALUATE panel ---
	protected JPanel createEvalPanel(final String classPathName, final Object finalHost) {
		JPanel evalPanel = new JPanel();
		evalPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		evalPanel.setLayout(new BoxLayout(evalPanel, BoxLayout.Y_AXIS) );
		//--- Create INPUT ---
		final JTextArea expressionText = new JTextArea();
		expressionText.setRows(5);
		expressionText.setLineWrap(true);
		//--- Create OUTPUT ---
		final ILog evaluationText = new ConsoleLog();
		((JTextArea)evaluationText).setRows(5);
		((JTextArea)evaluationText).setLineWrap(true);
		//--- Create EVALUATE BUTTON ---
		JButton evaluateButton = new JButton(new AbstractAction("Evaluate") {
			public void actionPerformed(ActionEvent e) {
				try {
					String constraint = expressionText.getText();
					if (!constraint.startsWith("context ")) constraint = "context "+classPathName.replaceAll("[.]", "::")+" inv: "+ constraint;
					java.util.List result = oclProcessor.evaluate(constraint, finalHost, evaluationText);
					evaluationText.reportMessage(result.get(0).toString());
				} catch(Exception e1) {
					evaluationText.reportMessage("undefined");
				}
			}
		});
		evaluateButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add INPUT, EVALUATE BUTTON, and OUTPUT ---
		evalPanel.add(new JScrollPane(expressionText, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		evalPanel.add(evaluateButton);
		evalPanel.add(new JScrollPane(((JTextArea)evaluationText), JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		return evalPanel;
	}

	//--- Create REFRESH panel ---
	protected JPanel createRefreshPanel(final JavaModelViewEditFrame$Class frame) {
		JPanel refreshPanel = new JPanel();
		refreshPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		refreshPanel.setLayout(new BoxLayout(refreshPanel, BoxLayout.Y_AXIS) );
		//--- Create REFRESH BUTTON ---
		JButton refreshButton = new JButton(new AbstractAction("Refresh") {
			public void actionPerformed(ActionEvent e) {
				frame.refreshAction();
			}
		});
		refreshButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add REFRESH BUTTON ---
		refreshPanel.add(refreshButton);
		return refreshPanel;
	}
		//--- Add EDIT, EVALUATE, and REFRESH panels ---
	protected void addPanels(final JavaModelViewEditFrame$Class frame, JPanel refreshPanel, JPanel editPanel, JPanel evalPanel) {
		frame.getContentPane().add(new JScrollPane(refreshPanel), BorderLayout.NORTH);
		frame.getContentPane().add(new JScrollPane(editPanel), BorderLayout.CENTER);
		frame.getContentPane().add(new JScrollPane(evalPanel), BorderLayout.SOUTH);
		frame.pack();
	}
	//--- Set the grid ---
	void setGrid() {
	}

	//--- Add labels name and = ---
	protected void addLabels(String name, JPanel editPanel, GridBagConstraints c, int line) {
		//--- Add property name to panel ---
		JLabel label = new JLabel(name);
		label.setBorder(border);
		c.gridx = 0;
		c.gridy = line;
		c.ipadx = 5;
		c.ipady = 5;
		c.weightx = 0.0;
		c.weighty = 0.0;
		editPanel.add(label, c);
		//--- Add = to panel---
		label = new JLabel(" = ");
		c.gridx = 1;
		label.setBorder(border);
		editPanel.add(label, c);
	}
	//--- Add SWING components for a primitive field ---
	protected void addJs4Primitive(final Object finalHost, final String name, final Object value, javaModel.repository.JavaModelRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, JavaModelViewEditFrame$Class refreshFrame) {
		//--- Add VALUE to panel ---
		final JTextField textField = new JTextField(value == null ? "null" : value.toString(), 20);
		textField.setFont(font);
		textField.setPreferredSize(fieldSize);
		textField.setEditable(false);
		c.gridx = 2;
		editPanel.add(textField, c);
		//--- Store refresh info ---
		refreshFrame.getPrimitiveContainers().add(textField);
		refreshFrame.getPrimitiveNames().add(name);
	}
		//--- Add SWING components for a collection field ---
	protected void addJs4Collection(String name, final Object value, javaModel.repository.JavaModelRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, JavaModelViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		Collection col = (java.util.Collection)value;
		Iterator it = col.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			objects1.add(obj);
		}
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(listSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getCollectionContainers().add(list1);
		frame.getCollectionNames().add(name);
	}
		//--- Add SWING components for a user field ---
	protected void addJs4User(final Object finalHost, final String name, final Object value, javaModel.repository.JavaModelRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, JavaModelViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		objects1.add(value);
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		list1.setVisibleRowCount(1);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(fieldSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getUserContainers().add(list1);
		frame.getUserNames().add(name);
}
	//--- Look settings ---
	final EmptyBorder border = new EmptyBorder(new Insets(0, 0, 0, 10));
	final Font font = javaModel.repository.JavaModelBrowser$Class.font;
	final Dimension listSize = javaModel.repository.JavaModelBrowser$Class.listSize;
	final Dimension fieldSize = javaModel.repository.JavaModelBrowser$Class.fieldSize;;
}
