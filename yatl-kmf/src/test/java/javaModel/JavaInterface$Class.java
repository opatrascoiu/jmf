/**
 *
 *  Class JavaInterface$Class.java
 *
 *  Generated by KMFStudio at 22 February 2004 15:13:02
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package javaModel;

public class JavaInterface$Class
extends
	JavaClassifier$Class
implements
	JavaInterface,
    javaModel.JavaModelVisitable
{
	/** Default constructor */
	public JavaInterface$Class() {
		//--- Set property 'name' from 'JavaElement' ---
		this.name = null;
		//--- Set property 'javaPackage' from 'JavaPackageElement' ---
		this.javaPackage = null;
		//--- Set property 'sub' from 'JavaClassifier' ---
		this.sub = null;
		//--- Set property 'super_' from 'JavaClassifier' ---
		this.super_ = null;
		//--- Set property 'implementedBy' from 'JavaInterface' ---
		this.implementedBy = new java.util.LinkedHashSet();
	}
	/** Specialized constructor */
	public JavaInterface$Class(String name) {
		//--- Set property 'name' from 'JavaElement' ---
		this.name = name;
		//--- Set property 'javaPackage' from 'JavaPackageElement' ---
		this.javaPackage = null;
		//--- Set property 'sub' from 'JavaClassifier' ---
		this.sub = null;
		//--- Set property 'super_' from 'JavaClassifier' ---
		this.super_ = null;
		//--- Set property 'implementedBy' from 'JavaInterface' ---
		this.implementedBy = new java.util.LinkedHashSet();
	}


	/** Property 'implementedBy' from 'JavaInterface' */
	protected java.util.Set implementedBy;
	/** Get property 'implementedBy' from 'JavaInterface' */
	public java.util.Set getImplementedBy() {
		return implementedBy;
	}
	/** Set property 'implementedBy' from 'JavaInterface' */
	public void setImplementedBy(java.util.Set implementedBy) { 
		this.implementedBy = implementedBy;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "javaModel.JavaInterface";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (javaPackage != null)
			this.javaPackage.getElements().remove(this);
		if (sub != null)
			this.sub.setSuper_(null);
		if (super_ != null)
			this.super_.setSub(null);
		java.util.Iterator implementedByIt = this.implementedBy.iterator();
		while (implementedByIt.hasNext()) {
			javaModel.JavaClass implementedByObj = (javaModel.JavaClass)implementedByIt.next();
			implementedByObj.getImplements_().remove(this);
			implementedByObj.getImplements_().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		JavaInterface$Class obj = new JavaInterface$Class();
		obj.name = name==null ? null : this.name;
		obj.javaPackage = javaPackage==null ? null : this.javaPackage;
		obj.sub = sub==null ? null : this.sub;
		obj.super_ = super_==null ? null : this.super_;
		obj.implementedBy = implementedBy==null ? null : (java.util.Set)((java.util.LinkedHashSet)this.implementedBy).clone();
		return obj;
	}

	/** Accept 'javaModel.JavaInterfaceVisitor' */
	public Object accept(javaModel.JavaModelVisitor v, Object data) {
		return v.visit(this, data);
	}
}
