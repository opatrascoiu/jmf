/**
 *
 *  Class SyntaxJTreeVisitor$Class.java
 *
 *  Generated by KMFStudio at 17 February 2004 14:38:45
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ocl.syntax.repository;

import java.util.*;
import java.lang.reflect.*;
import javax.swing.tree.*;

import uk.ac.kent.cs.kmf.util.*;

public class SyntaxJTreeVisitor$Class
	implements SyntaxJTreeVisitor
{
	/** Visit factory for 'SyntaxFactory' */
	public Object visit(ocl.syntax.SyntaxFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.ClassifierContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.ClassifierContextDeclASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.ClassifierContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.ClassifierContextDeclAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ClassifierContextDeclAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Properties for ContextDeclarationAS ---
		//--- Association packageDeclarationAS ---
		DefaultMutableTreeNode packageDeclarationASNode = getNode(this, "packageDeclarationAS", host.getPackageDeclarationAS(), data);
		root.add(packageDeclarationASNode);
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.ContextDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.ContextDeclarationASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.ContextDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.ContextDeclarationAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ContextDeclarationAS ---
		//--- Association packageDeclarationAS ---
		DefaultMutableTreeNode packageDeclarationASNode = getNode(this, "packageDeclarationAS", host.getPackageDeclarationAS(), data);
		root.add(packageDeclarationASNode);
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.OperationContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.OperationContextDeclASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.OperationContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.OperationContextDeclAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OperationContextDeclAS ---
		//--- Association operation ---
		DefaultMutableTreeNode operationNode = getNode(this, "operation", host.getOperation(), data);
		root.add(operationNode);
		//--- Properties for ContextDeclarationAS ---
		//--- Association packageDeclarationAS ---
		DefaultMutableTreeNode packageDeclarationASNode = getNode(this, "packageDeclarationAS", host.getPackageDeclarationAS(), data);
		root.add(packageDeclarationASNode);
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.PackageDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.PackageDeclarationASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.PackageDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.PackageDeclarationAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PackageDeclarationAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Association contextDecls ---
		DefaultMutableTreeNode contextDeclsNode = getNode(this, "contextDecls", host.getContextDecls(), data);
		root.add(contextDeclsNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.PropertyContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.PropertyContextDeclASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.PropertyContextDeclAS' */
	public Object visit(ocl.syntax.ast.contexts.PropertyContextDeclAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PropertyContextDeclAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Properties for ContextDeclarationAS ---
		//--- Association packageDeclarationAS ---
		DefaultMutableTreeNode packageDeclarationASNode = getNode(this, "packageDeclarationAS", host.getPackageDeclarationAS(), data);
		root.add(packageDeclarationASNode);
		//--- Association constraints ---
		DefaultMutableTreeNode constraintsNode = getNode(this, "constraints", host.getConstraints(), data);
		root.add(constraintsNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.VariableDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.VariableDeclarationASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.VariableDeclarationAS' */
	public Object visit(ocl.syntax.ast.contexts.VariableDeclarationAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for VariableDeclarationAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association initExp ---
		DefaultMutableTreeNode initExpNode = getNode(this, "initExp", host.getInitExp(), data);
		root.add(initExpNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		//--- Association tupleLiteralExpAS ---
		DefaultMutableTreeNode tupleLiteralExpASNode = getNode(this, "tupleLiteralExpAS", host.getTupleLiteralExpAS(), data);
		root.add(tupleLiteralExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		//--- Association iteratorLoop ---
		DefaultMutableTreeNode iteratorLoopNode = getNode(this, "iteratorLoop", host.getIteratorLoop(), data);
		root.add(iteratorLoopNode);
		//--- Association resultLoop ---
		DefaultMutableTreeNode resultLoopNode = getNode(this, "resultLoop", host.getResultLoop(), data);
		root.add(resultLoopNode);
		//--- Association variableExpAS ---
		DefaultMutableTreeNode variableExpASNode = getNode(this, "variableExpAS", host.getVariableExpAS(), data);
		root.add(variableExpASNode);
		//--- Association tupleTypeAS ---
		DefaultMutableTreeNode tupleTypeASNode = getNode(this, "tupleTypeAS", host.getTupleTypeAS(), data);
		root.add(tupleTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.ConstraintAS' */
	public Object visit(ocl.syntax.ast.contexts.ConstraintASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.ConstraintAS' */
	public Object visit(ocl.syntax.ast.contexts.ConstraintAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ConstraintAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Association defOperation ---
		DefaultMutableTreeNode defOperationNode = getNode(this, "defOperation", host.getDefOperation(), data);
		root.add(defOperationNode);
		//--- Association defVariable ---
		DefaultMutableTreeNode defVariableNode = getNode(this, "defVariable", host.getDefVariable(), data);
		root.add(defVariableNode);
		//--- Association bodyExpression ---
		DefaultMutableTreeNode bodyExpressionNode = getNode(this, "bodyExpression", host.getBodyExpression(), data);
		root.add(bodyExpressionNode);
		//--- Association contextDeclarationAS ---
		DefaultMutableTreeNode contextDeclarationASNode = getNode(this, "contextDeclarationAS", host.getContextDeclarationAS(), data);
		root.add(contextDeclarationASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.OperationAS' */
	public Object visit(ocl.syntax.ast.contexts.OperationASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.OperationAS' */
	public Object visit(ocl.syntax.ast.contexts.OperationAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OperationAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association parameters ---
		DefaultMutableTreeNode parametersNode = getNode(this, "parameters", host.getParameters(), data);
		root.add(parametersNode);
		//--- Association operationContextDeclAS ---
		DefaultMutableTreeNode operationContextDeclASNode = getNode(this, "operationContextDeclAS", host.getOperationContextDeclAS(), data);
		root.add(operationContextDeclASNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.contexts.ConstraintKindAS' */
	public Object visit(ocl.syntax.ast.contexts.ConstraintKindASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.contexts.ConstraintKindAS' */
	public Object visit(ocl.syntax.ast.contexts.ConstraintKindAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ConstraintKindAS ---
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OclExpressionAS' */
	public Object visit(ocl.syntax.ast.expressions.OclExpressionASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OclExpressionAS' */
	public Object visit(ocl.syntax.ast.expressions.OclExpressionAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.SelectionExpAS' */
	public Object visit(ocl.syntax.ast.expressions.SelectionExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SelectionExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.PrimaryExpAS' */
	public Object visit(ocl.syntax.ast.expressions.PrimaryExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.LogicalExpAS' */
	public Object visit(ocl.syntax.ast.expressions.LogicalExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.LetExpAS' */
	public Object visit(ocl.syntax.ast.expressions.LetExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.LetExpAS' */
	public Object visit(ocl.syntax.ast.expressions.LetExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for LetExpAS ---
		//--- Association variables ---
		DefaultMutableTreeNode variablesNode = getNode(this, "variables", host.getVariables(), data);
		root.add(variablesNode);
		//--- Association inExp ---
		DefaultMutableTreeNode inExpNode = getNode(this, "inExp", host.getInExp(), data);
		root.add(inExpNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OclMessageExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OclMessageExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OclMessageExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Association target ---
		DefaultMutableTreeNode targetNode = getNode(this, "target", host.getTarget(), data);
		root.add(targetNode);
		//--- Association arguments ---
		DefaultMutableTreeNode argumentsNode = getNode(this, "arguments", host.getArguments(), data);
		root.add(argumentsNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.LiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.LiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.EnumLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.EnumLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.EnumLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.EnumLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for EnumLiteralExpAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.CollectionLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CollectionLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionLiteralExpAS ---
		//--- Property kind ---
		DefaultMutableTreeNode kindNode = getNode(this, "kind", host.getKind(), data);
		root.add(kindNode);
		//--- Association collectionParts ---
		DefaultMutableTreeNode collectionPartsNode = getNode(this, "collectionParts", host.getCollectionParts(), data);
		root.add(collectionPartsNode);
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.TupleLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.TupleLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.TupleLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.TupleLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TupleLiteralExpAS ---
		//--- Association tupleParts ---
		DefaultMutableTreeNode tuplePartsNode = getNode(this, "tupleParts", host.getTupleParts(), data);
		root.add(tuplePartsNode);
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.PrimitiveLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.PrimitiveLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PrimitiveLiteralExpAS ---
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.IntegerLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IntegerLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.IntegerLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IntegerLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for IntegerLiteralExpAS ---
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Properties for PrimitiveLiteralExpAS ---
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.RealLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.RealLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.RealLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.RealLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for RealLiteralExpAS ---
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Properties for PrimitiveLiteralExpAS ---
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.BooleanLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.BooleanLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.BooleanLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.BooleanLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BooleanLiteralExpAS ---
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Properties for PrimitiveLiteralExpAS ---
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.StringLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.StringLiteralExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.StringLiteralExpAS' */
	public Object visit(ocl.syntax.ast.expressions.StringLiteralExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for StringLiteralExpAS ---
		//--- Property value ---
		DefaultMutableTreeNode valueNode = getNode(this, "value", host.getValue(), data);
		root.add(valueNode);
		//--- Properties for PrimitiveLiteralExpAS ---
		//--- Properties for LiteralExpAS ---
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.PathNameExpAS' */
	public Object visit(ocl.syntax.ast.expressions.PathNameExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.PathNameExpAS' */
	public Object visit(ocl.syntax.ast.expressions.PathNameExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for PathNameExpAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Properties for PrimaryExpAS ---
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CollectionLiteralPartAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionLiteralPartAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionLiteralPartAS ---
		//--- Association collectionLiteralExpAS ---
		DefaultMutableTreeNode collectionLiteralExpASNode = getNode(this, "collectionLiteralExpAS", host.getCollectionLiteralExpAS(), data);
		root.add(collectionLiteralExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.CollectionRangeAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionRangeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CollectionRangeAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionRangeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionRangeAS ---
		//--- Association first ---
		DefaultMutableTreeNode firstNode = getNode(this, "first", host.getFirst(), data);
		root.add(firstNode);
		//--- Association last ---
		DefaultMutableTreeNode lastNode = getNode(this, "last", host.getLast(), data);
		root.add(lastNode);
		//--- Properties for CollectionLiteralPartAS ---
		//--- Association collectionLiteralExpAS ---
		DefaultMutableTreeNode collectionLiteralExpASNode = getNode(this, "collectionLiteralExpAS", host.getCollectionLiteralExpAS(), data);
		root.add(collectionLiteralExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.CollectionItemAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionItemASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CollectionItemAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionItemAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionItemAS ---
		//--- Association item ---
		DefaultMutableTreeNode itemNode = getNode(this, "item", host.getItem(), data);
		root.add(itemNode);
		//--- Properties for CollectionLiteralPartAS ---
		//--- Association collectionLiteralExpAS ---
		DefaultMutableTreeNode collectionLiteralExpASNode = getNode(this, "collectionLiteralExpAS", host.getCollectionLiteralExpAS(), data);
		root.add(collectionLiteralExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.NotExpAS' */
	public Object visit(ocl.syntax.ast.expressions.NotExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.NotExpAS' */
	public Object visit(ocl.syntax.ast.expressions.NotExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for NotExpAS ---
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.AndExpAS' */
	public Object visit(ocl.syntax.ast.expressions.AndExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.AndExpAS' */
	public Object visit(ocl.syntax.ast.expressions.AndExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AndExpAS ---
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OrExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OrExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OrExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OrExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OrExpAS ---
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.XorExpAS' */
	public Object visit(ocl.syntax.ast.expressions.XorExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.XorExpAS' */
	public Object visit(ocl.syntax.ast.expressions.XorExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for XorExpAS ---
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.ImpliesExpAS' */
	public Object visit(ocl.syntax.ast.expressions.ImpliesExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.ImpliesExpAS' */
	public Object visit(ocl.syntax.ast.expressions.ImpliesExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ImpliesExpAS ---
		//--- Properties for LogicalExpAS ---
		//--- Association leftOperand ---
		DefaultMutableTreeNode leftOperandNode = getNode(this, "leftOperand", host.getLeftOperand(), data);
		root.add(leftOperandNode);
		//--- Association rightOperand ---
		DefaultMutableTreeNode rightOperandNode = getNode(this, "rightOperand", host.getRightOperand(), data);
		root.add(rightOperandNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.IfExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IfExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.IfExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IfExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for IfExpAS ---
		//--- Association thenExpression ---
		DefaultMutableTreeNode thenExpressionNode = getNode(this, "thenExpression", host.getThenExpression(), data);
		root.add(thenExpressionNode);
		//--- Association elseExpression ---
		DefaultMutableTreeNode elseExpressionNode = getNode(this, "elseExpression", host.getElseExpression(), data);
		root.add(elseExpressionNode);
		//--- Association condition ---
		DefaultMutableTreeNode conditionNode = getNode(this, "condition", host.getCondition(), data);
		root.add(conditionNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OclMessageArgAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageArgASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OclMessageArgAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageArgAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OclMessageArgAS ---
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association expression ---
		DefaultMutableTreeNode expressionNode = getNode(this, "expression", host.getExpression(), data);
		root.add(expressionNode);
		//--- Association type ---
		DefaultMutableTreeNode typeNode = getNode(this, "type", host.getType(), data);
		root.add(typeNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.DotSelectionExpAS' */
	public Object visit(ocl.syntax.ast.expressions.DotSelectionExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.DotSelectionExpAS' */
	public Object visit(ocl.syntax.ast.expressions.DotSelectionExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for DotSelectionExpAS ---
		//--- Properties for SelectionExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.ArrowSelectionExpAS' */
	public Object visit(ocl.syntax.ast.expressions.ArrowSelectionExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.ArrowSelectionExpAS' */
	public Object visit(ocl.syntax.ast.expressions.ArrowSelectionExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ArrowSelectionExpAS ---
		//--- Properties for SelectionExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CallExpAS' */
	public Object visit(ocl.syntax.ast.expressions.CallExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CallExpAS ---
		//--- Association arguments ---
		DefaultMutableTreeNode argumentsNode = getNode(this, "arguments", host.getArguments(), data);
		root.add(argumentsNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.LoopExpAS' */
	public Object visit(ocl.syntax.ast.expressions.LoopExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for LoopExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association loopBody ---
		DefaultMutableTreeNode loopBodyNode = getNode(this, "loopBody", host.getLoopBody(), data);
		root.add(loopBodyNode);
		//--- Association iterator ---
		DefaultMutableTreeNode iteratorNode = getNode(this, "iterator", host.getIterator(), data);
		root.add(iteratorNode);
		//--- Association result ---
		DefaultMutableTreeNode resultNode = getNode(this, "result", host.getResult(), data);
		root.add(resultNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.AssociationCallExpAS' */
	public Object visit(ocl.syntax.ast.expressions.AssociationCallExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.AssociationCallExpAS' */
	public Object visit(ocl.syntax.ast.expressions.AssociationCallExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for AssociationCallExpAS ---
		//--- Properties for CallExpAS ---
		//--- Association arguments ---
		DefaultMutableTreeNode argumentsNode = getNode(this, "arguments", host.getArguments(), data);
		root.add(argumentsNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OperationCallExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OperationCallExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OperationCallExpAS' */
	public Object visit(ocl.syntax.ast.expressions.OperationCallExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OperationCallExpAS ---
		//--- Properties for CallExpAS ---
		//--- Association arguments ---
		DefaultMutableTreeNode argumentsNode = getNode(this, "arguments", host.getArguments(), data);
		root.add(argumentsNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.IteratorExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IteratorExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.IteratorExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IteratorExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for IteratorExpAS ---
		//--- Properties for LoopExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association loopBody ---
		DefaultMutableTreeNode loopBodyNode = getNode(this, "loopBody", host.getLoopBody(), data);
		root.add(loopBodyNode);
		//--- Association iterator ---
		DefaultMutableTreeNode iteratorNode = getNode(this, "iterator", host.getIterator(), data);
		root.add(iteratorNode);
		//--- Association result ---
		DefaultMutableTreeNode resultNode = getNode(this, "result", host.getResult(), data);
		root.add(resultNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.IterateExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IterateExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.IterateExpAS' */
	public Object visit(ocl.syntax.ast.expressions.IterateExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for IterateExpAS ---
		//--- Properties for LoopExpAS ---
		//--- Property name ---
		DefaultMutableTreeNode nameNode = getNode(this, "name", host.getName(), data);
		root.add(nameNode);
		//--- Association loopBody ---
		DefaultMutableTreeNode loopBodyNode = getNode(this, "loopBody", host.getLoopBody(), data);
		root.add(loopBodyNode);
		//--- Association iterator ---
		DefaultMutableTreeNode iteratorNode = getNode(this, "iterator", host.getIterator(), data);
		root.add(iteratorNode);
		//--- Association result ---
		DefaultMutableTreeNode resultNode = getNode(this, "result", host.getResult(), data);
		root.add(resultNode);
		//--- Association source ---
		DefaultMutableTreeNode sourceNode = getNode(this, "source", host.getSource(), data);
		root.add(sourceNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.VariableExpAS' */
	public Object visit(ocl.syntax.ast.expressions.VariableExpASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.VariableExpAS' */
	public Object visit(ocl.syntax.ast.expressions.VariableExpAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for VariableExpAS ---
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Properties for OclExpressionAS ---
		//--- Property isMarkedPre ---
		DefaultMutableTreeNode isMarkedPreNode = getNode(this, "isMarkedPre", host.getIsMarkedPre(), data);
		root.add(isMarkedPreNode);
		//--- Association constraintAS ---
		DefaultMutableTreeNode constraintASNode = getNode(this, "constraintAS", host.getConstraintAS(), data);
		root.add(constraintASNode);
		//--- Association firstSource ---
		DefaultMutableTreeNode firstSourceNode = getNode(this, "firstSource", host.getFirstSource(), data);
		root.add(firstSourceNode);
		//--- Association lastSource ---
		DefaultMutableTreeNode lastSourceNode = getNode(this, "lastSource", host.getLastSource(), data);
		root.add(lastSourceNode);
		//--- Association collectionItemAS ---
		DefaultMutableTreeNode collectionItemASNode = getNode(this, "collectionItemAS", host.getCollectionItemAS(), data);
		root.add(collectionItemASNode);
		//--- Association leftOperandSource ---
		DefaultMutableTreeNode leftOperandSourceNode = getNode(this, "leftOperandSource", host.getLeftOperandSource(), data);
		root.add(leftOperandSourceNode);
		//--- Association thenSource ---
		DefaultMutableTreeNode thenSourceNode = getNode(this, "thenSource", host.getThenSource(), data);
		root.add(thenSourceNode);
		//--- Association oclMessageExpAS ---
		DefaultMutableTreeNode oclMessageExpASNode = getNode(this, "oclMessageExpAS", host.getOclMessageExpAS(), data);
		root.add(oclMessageExpASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association selectionExpAS ---
		DefaultMutableTreeNode selectionExpASNode = getNode(this, "selectionExpAS", host.getSelectionExpAS(), data);
		root.add(selectionExpASNode);
		//--- Association callArguments ---
		DefaultMutableTreeNode callArgumentsNode = getNode(this, "callArguments", host.getCallArguments(), data);
		root.add(callArgumentsNode);
		//--- Association bodyLoop ---
		DefaultMutableTreeNode bodyLoopNode = getNode(this, "bodyLoop", host.getBodyLoop(), data);
		root.add(bodyLoopNode);
		//--- Association sourceLoop ---
		DefaultMutableTreeNode sourceLoopNode = getNode(this, "sourceLoop", host.getSourceLoop(), data);
		root.add(sourceLoopNode);
		//--- Association callSource ---
		DefaultMutableTreeNode callSourceNode = getNode(this, "callSource", host.getCallSource(), data);
		root.add(callSourceNode);
		//--- Association parent ---
		DefaultMutableTreeNode parentNode = getNode(this, "parent", host.getParent(), data);
		root.add(parentNode);
		//--- Association child ---
		DefaultMutableTreeNode childNode = getNode(this, "child", host.getChild(), data);
		root.add(childNode);
		//--- Association rightOperandSource ---
		DefaultMutableTreeNode rightOperandSourceNode = getNode(this, "rightOperandSource", host.getRightOperandSource(), data);
		root.add(rightOperandSourceNode);
		//--- Association elseSource ---
		DefaultMutableTreeNode elseSourceNode = getNode(this, "elseSource", host.getElseSource(), data);
		root.add(elseSourceNode);
		//--- Association ifExpAS ---
		DefaultMutableTreeNode ifExpASNode = getNode(this, "ifExpAS", host.getIfExpAS(), data);
		root.add(ifExpASNode);
		//--- Association letExpAS ---
		DefaultMutableTreeNode letExpASNode = getNode(this, "letExpAS", host.getLetExpAS(), data);
		root.add(letExpASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.CollectionKindAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionKindASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.CollectionKindAS' */
	public Object visit(ocl.syntax.ast.expressions.CollectionKindAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionKindAS ---
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.expressions.OclMessageKindAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageKindASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.expressions.OclMessageKindAS' */
	public Object visit(ocl.syntax.ast.expressions.OclMessageKindAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OclMessageKindAS ---
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.TypeAS' */
	public Object visit(ocl.syntax.ast.types.TypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.ClassifierAS' */
	public Object visit(ocl.syntax.ast.types.ClassifierASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.ClassifierAS' */
	public Object visit(ocl.syntax.ast.types.ClassifierAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for ClassifierAS ---
		//--- Property pathName ---
		DefaultMutableTreeNode pathNameNode = getNode(this, "pathName", host.getPathName(), data);
		root.add(pathNameNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.CollectionTypeAS' */
	public Object visit(ocl.syntax.ast.types.CollectionTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.CollectionTypeAS' */
	public Object visit(ocl.syntax.ast.types.CollectionTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for CollectionTypeAS ---
		//--- Association elementType ---
		DefaultMutableTreeNode elementTypeNode = getNode(this, "elementType", host.getElementType(), data);
		root.add(elementTypeNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.TupleTypeAS' */
	public Object visit(ocl.syntax.ast.types.TupleTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.TupleTypeAS' */
	public Object visit(ocl.syntax.ast.types.TupleTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for TupleTypeAS ---
		//--- Association variableDeclarationList ---
		DefaultMutableTreeNode variableDeclarationListNode = getNode(this, "variableDeclarationList", host.getVariableDeclarationList(), data);
		root.add(variableDeclarationListNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.BagTypeAS' */
	public Object visit(ocl.syntax.ast.types.BagTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.BagTypeAS' */
	public Object visit(ocl.syntax.ast.types.BagTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for BagTypeAS ---
		//--- Properties for CollectionTypeAS ---
		//--- Association elementType ---
		DefaultMutableTreeNode elementTypeNode = getNode(this, "elementType", host.getElementType(), data);
		root.add(elementTypeNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.SetTypeAS' */
	public Object visit(ocl.syntax.ast.types.SetTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.SetTypeAS' */
	public Object visit(ocl.syntax.ast.types.SetTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SetTypeAS ---
		//--- Properties for CollectionTypeAS ---
		//--- Association elementType ---
		DefaultMutableTreeNode elementTypeNode = getNode(this, "elementType", host.getElementType(), data);
		root.add(elementTypeNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.SequenceTypeAS' */
	public Object visit(ocl.syntax.ast.types.SequenceTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.SequenceTypeAS' */
	public Object visit(ocl.syntax.ast.types.SequenceTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for SequenceTypeAS ---
		//--- Properties for CollectionTypeAS ---
		//--- Association elementType ---
		DefaultMutableTreeNode elementTypeNode = getNode(this, "elementType", host.getElementType(), data);
		root.add(elementTypeNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Visit factory for 'ocl.syntax.ast.types.OrderedSetTypeAS' */
	public Object visit(ocl.syntax.ast.types.OrderedSetTypeASFactory host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Add all methods ---
		Class factoryClass = host.getClass();
		Method methods[] = factoryClass.getMethods();
		for(int i=0; i<methods.length; i++)
			if (methods[i].getName().indexOf("build")==0)
				root.add(new DefaultMutableTreeNode(methods[i], false));
		return root;
	}
	/** Visit class for 'ocl.syntax.ast.types.OrderedSetTypeAS' */
	public Object visit(ocl.syntax.ast.types.OrderedSetTypeAS host, Object data) {
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(host, true);
		//--- Properties for OrderedSetTypeAS ---
		//--- Properties for CollectionTypeAS ---
		//--- Association elementType ---
		DefaultMutableTreeNode elementTypeNode = getNode(this, "elementType", host.getElementType(), data);
		root.add(elementTypeNode);
		//--- Properties for TypeAS ---
		//--- Association propertyContextDeclAS ---
		DefaultMutableTreeNode propertyContextDeclASNode = getNode(this, "propertyContextDeclAS", host.getPropertyContextDeclAS(), data);
		root.add(propertyContextDeclASNode);
		//--- Association variableDeclarationAS ---
		DefaultMutableTreeNode variableDeclarationASNode = getNode(this, "variableDeclarationAS", host.getVariableDeclarationAS(), data);
		root.add(variableDeclarationASNode);
		//--- Association operationAS ---
		DefaultMutableTreeNode operationASNode = getNode(this, "operationAS", host.getOperationAS(), data);
		root.add(operationASNode);
		//--- Association oclMessageArgAS ---
		DefaultMutableTreeNode oclMessageArgASNode = getNode(this, "oclMessageArgAS", host.getOclMessageArgAS(), data);
		root.add(oclMessageArgASNode);
		//--- Association collectionTypeAS ---
		DefaultMutableTreeNode collectionTypeASNode = getNode(this, "collectionTypeAS", host.getCollectionTypeAS(), data);
		root.add(collectionTypeASNode);
		return root;
	}
	/** Auxiliary function used by the vistors */
	DefaultMutableTreeNode getNode(SyntaxJTreeVisitor visitor, String name, Object obj, Object data) {
		//--- Elements visited on this branch ---
		Set visitedElements = (Set)data;
		//--- Create node ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(name);
		//--- Construct the value ---
		//--- Primitive types ---
		if (obj == null) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("null");
			root.add(objNode);
			return root;
		}
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofPrimitiveType(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj.toString());
			root.add(objNode);
			return root;
		}
		//--- Collection types ---
		if (uk.ac.kent.cs.kmf.util.Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				DefaultMutableTreeNode objNode = getNode(this, "Element", i.next(), data);
				root.add((DefaultMutableTreeNode)objNode.getChildAt(0));
			}
			return root;
		}
		//--- Enumerations types ---
		String fullClassName = obj.getClass().getName();
		if (fullClassName.endsWith("Enum") || fullClassName.endsWith("Kind")) {
			//--- Get class ---
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode("Error");
			try {
				Class objClass = obj.getClass();
				Class visitorClass = Class.forName("ocl.syntax.SyntaxVisitor");
				Class dataClass = data.getClass();
				Method accept = objClass.getMethod("accept", new Class[] {visitorClass, dataClass});
				objNode = (DefaultMutableTreeNode)accept.invoke(obj, new Object[] {visitor, data});
			} catch (Exception e) {
			}
			root.add(objNode);
			return root;
		}
		//--- User types ---
		//--- Already added on the current branch: make a toSring node ---
		if (visitedElements.contains(obj)) {
			DefaultMutableTreeNode objNode = new DefaultMutableTreeNode(obj, false);
			root.add(objNode);
		//--- Was not visited previously on the current branch ---
		} else {
			// Add it
			visitedElements.add(obj);
			// Visit it
			DefaultMutableTreeNode objNode = (DefaultMutableTreeNode)((ocl.syntax.SyntaxElement)obj).accept(visitor, visitedElements);
			root.add(objNode);
		}
		return root;
	}
}
