/**
 *
 *  Class SyntaxRepository$Class.java
 *
 *  Generated by KMFStudio at 17 February 2004 14:38:45
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ocl.syntax.repository;

import java.io.*;
import java.util.*;
import javax.swing.tree.*;
import uk.ac.kent.cs.kmf.xmi.*;
import uk.ac.kent.cs.kmf.common.RepositoryImpl;
import uk.ac.kent.cs.kmf.util.*;

import ocl.syntax.*;

public class SyntaxRepository$Class
	extends RepositoryImpl
	implements SyntaxRepository
{
	/** Default repository constructor */
	public SyntaxRepository$Class() {
		setLog(new FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public SyntaxRepository$Class(ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init syntax repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.ClassifierContextDeclAS'");
		factories.put("syntax.ast.contexts.ClassifierContextDeclAS", new ocl.syntax.ast.contexts.ClassifierContextDeclASFactory$Class(this));
		population.put("syntax.ast.contexts.ClassifierContextDeclAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.ContextDeclarationAS'");
		factories.put("syntax.ast.contexts.ContextDeclarationAS", new ocl.syntax.ast.contexts.ContextDeclarationASFactory$Class(this));
		population.put("syntax.ast.contexts.ContextDeclarationAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.OperationContextDeclAS'");
		factories.put("syntax.ast.contexts.OperationContextDeclAS", new ocl.syntax.ast.contexts.OperationContextDeclASFactory$Class(this));
		population.put("syntax.ast.contexts.OperationContextDeclAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.PackageDeclarationAS'");
		factories.put("syntax.ast.contexts.PackageDeclarationAS", new ocl.syntax.ast.contexts.PackageDeclarationASFactory$Class(this));
		population.put("syntax.ast.contexts.PackageDeclarationAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.PropertyContextDeclAS'");
		factories.put("syntax.ast.contexts.PropertyContextDeclAS", new ocl.syntax.ast.contexts.PropertyContextDeclASFactory$Class(this));
		population.put("syntax.ast.contexts.PropertyContextDeclAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.VariableDeclarationAS'");
		factories.put("syntax.ast.contexts.VariableDeclarationAS", new ocl.syntax.ast.contexts.VariableDeclarationASFactory$Class(this));
		population.put("syntax.ast.contexts.VariableDeclarationAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.ConstraintAS'");
		factories.put("syntax.ast.contexts.ConstraintAS", new ocl.syntax.ast.contexts.ConstraintASFactory$Class(this));
		population.put("syntax.ast.contexts.ConstraintAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.OperationAS'");
		factories.put("syntax.ast.contexts.OperationAS", new ocl.syntax.ast.contexts.OperationASFactory$Class(this));
		population.put("syntax.ast.contexts.OperationAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.contexts.ConstraintKindAS'");
		factories.put("syntax.ast.contexts.ConstraintKindAS", new ocl.syntax.ast.contexts.ConstraintKindASFactory$Class(this));
		population.put("syntax.ast.contexts.ConstraintKindAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OclExpressionAS'");
		factories.put("syntax.ast.expressions.OclExpressionAS", new ocl.syntax.ast.expressions.OclExpressionASFactory$Class(this));
		population.put("syntax.ast.expressions.OclExpressionAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.SelectionExpAS'");
		population.put("syntax.ast.expressions.SelectionExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.PrimaryExpAS'");
		population.put("syntax.ast.expressions.PrimaryExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.LogicalExpAS'");
		population.put("syntax.ast.expressions.LogicalExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.LetExpAS'");
		factories.put("syntax.ast.expressions.LetExpAS", new ocl.syntax.ast.expressions.LetExpASFactory$Class(this));
		population.put("syntax.ast.expressions.LetExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OclMessageExpAS'");
		factories.put("syntax.ast.expressions.OclMessageExpAS", new ocl.syntax.ast.expressions.OclMessageExpASFactory$Class(this));
		population.put("syntax.ast.expressions.OclMessageExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.LiteralExpAS'");
		population.put("syntax.ast.expressions.LiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.EnumLiteralExpAS'");
		factories.put("syntax.ast.expressions.EnumLiteralExpAS", new ocl.syntax.ast.expressions.EnumLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.EnumLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CollectionLiteralExpAS'");
		factories.put("syntax.ast.expressions.CollectionLiteralExpAS", new ocl.syntax.ast.expressions.CollectionLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.CollectionLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.TupleLiteralExpAS'");
		factories.put("syntax.ast.expressions.TupleLiteralExpAS", new ocl.syntax.ast.expressions.TupleLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.TupleLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.PrimitiveLiteralExpAS'");
		population.put("syntax.ast.expressions.PrimitiveLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.IntegerLiteralExpAS'");
		factories.put("syntax.ast.expressions.IntegerLiteralExpAS", new ocl.syntax.ast.expressions.IntegerLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.IntegerLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.RealLiteralExpAS'");
		factories.put("syntax.ast.expressions.RealLiteralExpAS", new ocl.syntax.ast.expressions.RealLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.RealLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.BooleanLiteralExpAS'");
		factories.put("syntax.ast.expressions.BooleanLiteralExpAS", new ocl.syntax.ast.expressions.BooleanLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.BooleanLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.StringLiteralExpAS'");
		factories.put("syntax.ast.expressions.StringLiteralExpAS", new ocl.syntax.ast.expressions.StringLiteralExpASFactory$Class(this));
		population.put("syntax.ast.expressions.StringLiteralExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.PathNameExpAS'");
		factories.put("syntax.ast.expressions.PathNameExpAS", new ocl.syntax.ast.expressions.PathNameExpASFactory$Class(this));
		population.put("syntax.ast.expressions.PathNameExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CollectionLiteralPartAS'");
		population.put("syntax.ast.expressions.CollectionLiteralPartAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CollectionRangeAS'");
		factories.put("syntax.ast.expressions.CollectionRangeAS", new ocl.syntax.ast.expressions.CollectionRangeASFactory$Class(this));
		population.put("syntax.ast.expressions.CollectionRangeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CollectionItemAS'");
		factories.put("syntax.ast.expressions.CollectionItemAS", new ocl.syntax.ast.expressions.CollectionItemASFactory$Class(this));
		population.put("syntax.ast.expressions.CollectionItemAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.NotExpAS'");
		factories.put("syntax.ast.expressions.NotExpAS", new ocl.syntax.ast.expressions.NotExpASFactory$Class(this));
		population.put("syntax.ast.expressions.NotExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.AndExpAS'");
		factories.put("syntax.ast.expressions.AndExpAS", new ocl.syntax.ast.expressions.AndExpASFactory$Class(this));
		population.put("syntax.ast.expressions.AndExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OrExpAS'");
		factories.put("syntax.ast.expressions.OrExpAS", new ocl.syntax.ast.expressions.OrExpASFactory$Class(this));
		population.put("syntax.ast.expressions.OrExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.XorExpAS'");
		factories.put("syntax.ast.expressions.XorExpAS", new ocl.syntax.ast.expressions.XorExpASFactory$Class(this));
		population.put("syntax.ast.expressions.XorExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.ImpliesExpAS'");
		factories.put("syntax.ast.expressions.ImpliesExpAS", new ocl.syntax.ast.expressions.ImpliesExpASFactory$Class(this));
		population.put("syntax.ast.expressions.ImpliesExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.IfExpAS'");
		factories.put("syntax.ast.expressions.IfExpAS", new ocl.syntax.ast.expressions.IfExpASFactory$Class(this));
		population.put("syntax.ast.expressions.IfExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OclMessageArgAS'");
		factories.put("syntax.ast.expressions.OclMessageArgAS", new ocl.syntax.ast.expressions.OclMessageArgASFactory$Class(this));
		population.put("syntax.ast.expressions.OclMessageArgAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.DotSelectionExpAS'");
		factories.put("syntax.ast.expressions.DotSelectionExpAS", new ocl.syntax.ast.expressions.DotSelectionExpASFactory$Class(this));
		population.put("syntax.ast.expressions.DotSelectionExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.ArrowSelectionExpAS'");
		factories.put("syntax.ast.expressions.ArrowSelectionExpAS", new ocl.syntax.ast.expressions.ArrowSelectionExpASFactory$Class(this));
		population.put("syntax.ast.expressions.ArrowSelectionExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CallExpAS'");
		population.put("syntax.ast.expressions.CallExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.LoopExpAS'");
		population.put("syntax.ast.expressions.LoopExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.AssociationCallExpAS'");
		factories.put("syntax.ast.expressions.AssociationCallExpAS", new ocl.syntax.ast.expressions.AssociationCallExpASFactory$Class(this));
		population.put("syntax.ast.expressions.AssociationCallExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OperationCallExpAS'");
		factories.put("syntax.ast.expressions.OperationCallExpAS", new ocl.syntax.ast.expressions.OperationCallExpASFactory$Class(this));
		population.put("syntax.ast.expressions.OperationCallExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.IteratorExpAS'");
		factories.put("syntax.ast.expressions.IteratorExpAS", new ocl.syntax.ast.expressions.IteratorExpASFactory$Class(this));
		population.put("syntax.ast.expressions.IteratorExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.IterateExpAS'");
		factories.put("syntax.ast.expressions.IterateExpAS", new ocl.syntax.ast.expressions.IterateExpASFactory$Class(this));
		population.put("syntax.ast.expressions.IterateExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.VariableExpAS'");
		factories.put("syntax.ast.expressions.VariableExpAS", new ocl.syntax.ast.expressions.VariableExpASFactory$Class(this));
		population.put("syntax.ast.expressions.VariableExpAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.CollectionKindAS'");
		factories.put("syntax.ast.expressions.CollectionKindAS", new ocl.syntax.ast.expressions.CollectionKindASFactory$Class(this));
		population.put("syntax.ast.expressions.CollectionKindAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.expressions.OclMessageKindAS'");
		factories.put("syntax.ast.expressions.OclMessageKindAS", new ocl.syntax.ast.expressions.OclMessageKindASFactory$Class(this));
		population.put("syntax.ast.expressions.OclMessageKindAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.TypeAS'");
		population.put("syntax.ast.types.TypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.ClassifierAS'");
		factories.put("syntax.ast.types.ClassifierAS", new ocl.syntax.ast.types.ClassifierASFactory$Class(this));
		population.put("syntax.ast.types.ClassifierAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.CollectionTypeAS'");
		factories.put("syntax.ast.types.CollectionTypeAS", new ocl.syntax.ast.types.CollectionTypeASFactory$Class(this));
		population.put("syntax.ast.types.CollectionTypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.TupleTypeAS'");
		factories.put("syntax.ast.types.TupleTypeAS", new ocl.syntax.ast.types.TupleTypeASFactory$Class(this));
		population.put("syntax.ast.types.TupleTypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.BagTypeAS'");
		factories.put("syntax.ast.types.BagTypeAS", new ocl.syntax.ast.types.BagTypeASFactory$Class(this));
		population.put("syntax.ast.types.BagTypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.SetTypeAS'");
		factories.put("syntax.ast.types.SetTypeAS", new ocl.syntax.ast.types.SetTypeASFactory$Class(this));
		population.put("syntax.ast.types.SetTypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.SequenceTypeAS'");
		factories.put("syntax.ast.types.SequenceTypeAS", new ocl.syntax.ast.types.SequenceTypeASFactory$Class(this));
		population.put("syntax.ast.types.SequenceTypeAS", new Vector());
		log.reportMessage("Adding factory and initializing population for 'syntax.ast.types.OrderedSetTypeAS'");
		factories.put("syntax.ast.types.OrderedSetTypeAS", new ocl.syntax.ast.types.OrderedSetTypeASFactory$Class(this));
		population.put("syntax.ast.types.OrderedSetTypeAS", new Vector());
	}

	//--- MODEL NAME ---
	protected String modelName = "syntax";
	public String getModelName() {
		return modelName;
	}

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			SyntaxFactory factory = (SyntaxFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}
	/** Get all instances from population */
	public List getAllElements() {
		List res = new ArrayList();
		Iterator i = population.keySet().iterator();
		while (i.hasNext()) {
			String key = (String)i.next();
			res.addAll((Collection)population.get(key));
		}
		return res;
	}
	/** Get the entire population */
	public Map getPopulation() {
		return population;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public SyntaxFactory getFactory(String fullClassName) {
		SyntaxFactory factory = null;
		try {
			factory = (SyntaxFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Get the all factories */
	public Map getFactories() {
		return factories;
	}

	//--- BROWSER ---
	/** Get a description using a JTree */
	public DefaultMutableTreeNode toJTree() {
		//--- Creat the JTree visitor ---
		SyntaxJTreeVisitor jtreeVisitor = new SyntaxJTreeVisitor$Class();
		//--- Init root ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Repository", true);
		DefaultMutableTreeNode factoriesNode = new DefaultMutableTreeNode("Lifecycle", true);
		DefaultMutableTreeNode elementsNode = new DefaultMutableTreeNode("Elements", true);
		root.add(factoriesNode);
		root.add(elementsNode);
		//--- Add every factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String factoryName = (String)i.next();
			SyntaxFactory factory = (SyntaxFactory)factories.get(factoryName);
			DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)factory.accept(jtreeVisitor, new Object());
			factoriesNode.add(factoryNode);
		}
		//--- Add every element ---
		Set elemNames = population.keySet();
		Iterator j = elemNames.iterator();
		while (j.hasNext()) {
			String elemName = (String)j.next();
			//--- Add a node for each class ---
			List elements = (List)population.get(elemName);
			if (elements.size() != 0) {
				DefaultMutableTreeNode elemNode = new DefaultMutableTreeNode("Instances of "+elemName, true);
				Iterator elementIt = elements.iterator();
				while (elementIt.hasNext()) {
					SyntaxElement element = (SyntaxElement)elementIt.next();
					//--- Add a node for each instance ---
					Set visitedElements = new LinkedHashSet();
					visitedElements.add(element);
					DefaultMutableTreeNode instanceNode = (DefaultMutableTreeNode)element.accept(jtreeVisitor, visitedElements);
					elemNode.add(instanceNode);
				}
				elementsNode.add(elemNode);
			}
		}
		return root;
	}

	/** Save the content into an XMI file */
	public void saveXMI(String fileName) {
		//--- Create an XMI file ---
		if (!fileName.toLowerCase().endsWith(".xml")) fileName += ".xml";
		XMIFile xmiFile = new XMIFile(fileName);
		//--- Create an XMI vistor ---
		SyntaxXMIVisitor xmiVisitor = new SyntaxXMIVisitor$Class();
		//--- Create an empty (reference, xmiObject) table  ---
		Map mapRefToXMI = new IdentityHashMap();
		//--- Create the top objects container ---
		Collection topObjs = xmiFile.getTopObjects();
		//--- For each factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String elemName = (String)i.next();
			SyntaxFactory factory = (SyntaxFactory)factories.get(elemName);
			//--- Create the factory ---
			XMIObject xmifactory = (XMIObject)factory.accept(xmiVisitor, mapRefToXMI);
			//--- Add factory to top objects ---
			//--- Compute all the instances created by the factory ---
			List elements = (List)population.get(elemName);
			if (elements == null) continue;
			Iterator j = elements.iterator();
			while (j.hasNext()) {
				SyntaxElement element = (SyntaxElement)j.next();
				//--- Create the XMI element ---
				XMIObject xmiElement = (XMIObject)element.accept(xmiVisitor, mapRefToXMI);
				//--- Add the element to top objects ---
				topObjs.add(xmiElement);
			}
		}
		try {
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new SyntaxFactoryAdapter$Class(this, log));
			//--- Save the elements ---
			IXMIWriter writer = new XMIWriter();
			writer.write(xmiFile, fileName, log);
		} catch (Exception e) {
			log.reportMessage(""+e);
		}
	}
	/** Create a new repository from an XMI file */
	public uk.ac.kent.cs.kmf.common.Repository loadXMI(String fileName) {
		try {
			//--- Create a repository ---
			SyntaxRepository rep = new SyntaxRepository$Class();
			rep.setLog(log);
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new SyntaxFactoryAdapter$Class(rep, log));
			//--- Build the elements ---
			XMIFile xmiFile = (new XMIReader()).read(fileName, log);
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}

	/** Get a HUTN description of the repository */
	public String toHUTN() {
		//--- Create the HUTN visitor ---
		SyntaxHUTNVisitor hutnVisitor = new SyntaxHUTNVisitor$Class();
		//--- Add every factory ---
		String buffer = new String();
		buffer += "SyntaxRepository {\n";
		buffer += "factories\n";
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			buffer += "  "+factoryName+"\n";
		}
		buffer += "\n";
		//--- Add every element ---
		buffer += "Elements\n";
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			buffer += "Instances of "+elemName+"\n";
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				SyntaxElement element = (SyntaxElement)elementIt.next();
				buffer += element.accept(hutnVisitor, new Object());
			}
		}
		buffer += "}\n";
		log.reportMessage(buffer);
		return buffer;
	}
	/** Save the content into a HUTN file */
	public void saveHUTN(String fileName) {
		//--- Open the HUTN file ---
		if (!fileName.toLowerCase().endsWith(".hutn")) fileName += ".hutn";
		PrintWriter out;
		try {
			out = new PrintWriter(new FileWriter(new File(fileName)), true);
		} catch (Exception e) {
			log.reportMessage(""+e);
			return;
		}
		//--- Create the HUTN visitor ---
		SyntaxHUTNVisitor hutnVisitor = new SyntaxHUTNVisitor$Class();
		//--- Add every factory ---
		out.println("SyntaxRepository {");
		out.println("factories");
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			out.println("  "+factoryName);
		}
		out.println();
		//--- Add every element ---
		out.println("Elements");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			out.println("Instances of "+elemName);
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				SyntaxElement element = (SyntaxElement)elementIt.next();
				out.println(element.accept(hutnVisitor, new Object()));
			}
		}
		out.println("}");
		out.close();
	}
	/** Create a new repository from an HUTN file */
	public SyntaxRepository loadHUTN(String fileName) {
		try {
			//--- Create a repository ---
			SyntaxRepository rep = new SyntaxRepository$Class();
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, SyntaxFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}
	/** Get the log file */
	public ILog getLog() {
		return log;
	}
	/** Set the log file */
	public void setLog(ILog log) {
		this.log = log;
	}

	/** The log */
	protected ILog log;
	/** The factories */
	protected Hashtable factories = new Hashtable();
}
