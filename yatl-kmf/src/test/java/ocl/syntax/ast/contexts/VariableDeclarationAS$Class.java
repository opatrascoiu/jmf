/**
 *
 *  Class VariableDeclarationAS$Class.java
 *
 *  Generated by KMFStudio at 17 February 2004 14:38:43
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ocl.syntax.ast.contexts;

public class VariableDeclarationAS$Class
implements
	VariableDeclarationAS,
    ocl.syntax.SyntaxVisitable
{
	/** Default constructor */
	public VariableDeclarationAS$Class() {
		//--- Set property 'name' from 'VariableDeclarationAS' ---
		this.name = new String();
		//--- Set property 'operationAS' from 'VariableDeclarationAS' ---
		this.operationAS = null;
		//--- Set property 'constraintAS' from 'VariableDeclarationAS' ---
		this.constraintAS = null;
		//--- Set property 'initExp' from 'VariableDeclarationAS' ---
		this.initExp = null;
		//--- Set property 'type' from 'VariableDeclarationAS' ---
		this.type = null;
		//--- Set property 'tupleLiteralExpAS' from 'VariableDeclarationAS' ---
		this.tupleLiteralExpAS = null;
		//--- Set property 'letExpAS' from 'VariableDeclarationAS' ---
		this.letExpAS = null;
		//--- Set property 'iteratorLoop' from 'VariableDeclarationAS' ---
		this.iteratorLoop = null;
		//--- Set property 'resultLoop' from 'VariableDeclarationAS' ---
		this.resultLoop = null;
		//--- Set property 'variableExpAS' from 'VariableDeclarationAS' ---
		this.variableExpAS = null;
		//--- Set property 'tupleTypeAS' from 'VariableDeclarationAS' ---
		this.tupleTypeAS = null;
	}
	/** Specialized constructor */
	public VariableDeclarationAS$Class(String name) {
		//--- Set property 'name' from 'VariableDeclarationAS' ---
		this.name = name;
		//--- Set property 'operationAS' from 'VariableDeclarationAS' ---
		this.operationAS = null;
		//--- Set property 'constraintAS' from 'VariableDeclarationAS' ---
		this.constraintAS = null;
		//--- Set property 'initExp' from 'VariableDeclarationAS' ---
		this.initExp = null;
		//--- Set property 'type' from 'VariableDeclarationAS' ---
		this.type = null;
		//--- Set property 'tupleLiteralExpAS' from 'VariableDeclarationAS' ---
		this.tupleLiteralExpAS = null;
		//--- Set property 'letExpAS' from 'VariableDeclarationAS' ---
		this.letExpAS = null;
		//--- Set property 'iteratorLoop' from 'VariableDeclarationAS' ---
		this.iteratorLoop = null;
		//--- Set property 'resultLoop' from 'VariableDeclarationAS' ---
		this.resultLoop = null;
		//--- Set property 'variableExpAS' from 'VariableDeclarationAS' ---
		this.variableExpAS = null;
		//--- Set property 'tupleTypeAS' from 'VariableDeclarationAS' ---
		this.tupleTypeAS = null;
	}


	/** Property 'name' from 'VariableDeclarationAS' */
	protected String name;
	/** Get property 'name' from 'VariableDeclarationAS' */
		public String getName() {
		return name;
	}
	/** Set property 'name' from 'VariableDeclarationAS' */
		public void setName(String name) {
		this.name = name;
	}

	/** Property 'operationAS' from 'VariableDeclarationAS' */
	protected OperationAS operationAS;
	/** Get property 'operationAS' from 'VariableDeclarationAS' */
	public OperationAS getOperationAS() {
		return operationAS;
	}
	/** Set property 'operationAS' from 'VariableDeclarationAS' */
	public void setOperationAS(OperationAS operationAS) { 
		this.operationAS = operationAS;
	}

	/** Property 'constraintAS' from 'VariableDeclarationAS' */
	protected ConstraintAS constraintAS;
	/** Get property 'constraintAS' from 'VariableDeclarationAS' */
	public ConstraintAS getConstraintAS() {
		return constraintAS;
	}
	/** Set property 'constraintAS' from 'VariableDeclarationAS' */
	public void setConstraintAS(ConstraintAS constraintAS) { 
		this.constraintAS = constraintAS;
	}

	/** Property 'initExp' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.OclExpressionAS initExp;
	/** Get property 'initExp' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.OclExpressionAS getInitExp() {
		return initExp;
	}
	/** Set property 'initExp' from 'VariableDeclarationAS' */
	public void setInitExp(ocl.syntax.ast.expressions.OclExpressionAS initExp) { 
		this.initExp = initExp;
	}

	/** Property 'type' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.types.TypeAS type;
	/** Get property 'type' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.types.TypeAS getType() {
		return type;
	}
	/** Set property 'type' from 'VariableDeclarationAS' */
	public void setType(ocl.syntax.ast.types.TypeAS type) { 
		this.type = type;
	}

	/** Property 'tupleLiteralExpAS' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.TupleLiteralExpAS tupleLiteralExpAS;
	/** Get property 'tupleLiteralExpAS' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.TupleLiteralExpAS getTupleLiteralExpAS() {
		return tupleLiteralExpAS;
	}
	/** Set property 'tupleLiteralExpAS' from 'VariableDeclarationAS' */
	public void setTupleLiteralExpAS(ocl.syntax.ast.expressions.TupleLiteralExpAS tupleLiteralExpAS) { 
		this.tupleLiteralExpAS = tupleLiteralExpAS;
	}

	/** Property 'letExpAS' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.LetExpAS letExpAS;
	/** Get property 'letExpAS' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.LetExpAS getLetExpAS() {
		return letExpAS;
	}
	/** Set property 'letExpAS' from 'VariableDeclarationAS' */
	public void setLetExpAS(ocl.syntax.ast.expressions.LetExpAS letExpAS) { 
		this.letExpAS = letExpAS;
	}

	/** Property 'iteratorLoop' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.LoopExpAS iteratorLoop;
	/** Get property 'iteratorLoop' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.LoopExpAS getIteratorLoop() {
		return iteratorLoop;
	}
	/** Set property 'iteratorLoop' from 'VariableDeclarationAS' */
	public void setIteratorLoop(ocl.syntax.ast.expressions.LoopExpAS iteratorLoop) { 
		this.iteratorLoop = iteratorLoop;
	}

	/** Property 'resultLoop' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.LoopExpAS resultLoop;
	/** Get property 'resultLoop' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.LoopExpAS getResultLoop() {
		return resultLoop;
	}
	/** Set property 'resultLoop' from 'VariableDeclarationAS' */
	public void setResultLoop(ocl.syntax.ast.expressions.LoopExpAS resultLoop) { 
		this.resultLoop = resultLoop;
	}

	/** Property 'variableExpAS' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.expressions.VariableExpAS variableExpAS;
	/** Get property 'variableExpAS' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.expressions.VariableExpAS getVariableExpAS() {
		return variableExpAS;
	}
	/** Set property 'variableExpAS' from 'VariableDeclarationAS' */
	public void setVariableExpAS(ocl.syntax.ast.expressions.VariableExpAS variableExpAS) { 
		this.variableExpAS = variableExpAS;
	}

	/** Property 'tupleTypeAS' from 'VariableDeclarationAS' */
	protected ocl.syntax.ast.types.TupleTypeAS tupleTypeAS;
	/** Get property 'tupleTypeAS' from 'VariableDeclarationAS' */
	public ocl.syntax.ast.types.TupleTypeAS getTupleTypeAS() {
		return tupleTypeAS;
	}
	/** Set property 'tupleTypeAS' from 'VariableDeclarationAS' */
	public void setTupleTypeAS(ocl.syntax.ast.types.TupleTypeAS tupleTypeAS) { 
		this.tupleTypeAS = tupleTypeAS;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.ast.contexts.VariableDeclarationAS";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (operationAS != null)
			this.operationAS.getParameters().remove(this);
		if (constraintAS != null)
			this.constraintAS.setDefVariable(null);
		if (initExp != null)
			this.initExp.setVariableDeclarationAS(null);
		if (type != null)
			this.type.setVariableDeclarationAS(null);
		if (tupleLiteralExpAS != null)
			this.tupleLiteralExpAS.getTupleParts().remove(this);
		if (letExpAS != null)
			this.letExpAS.getVariables().remove(this);
		if (iteratorLoop != null)
			this.iteratorLoop.setIterator(null);
		if (resultLoop != null)
			this.resultLoop.setResult(null);
		if (variableExpAS != null)
			this.variableExpAS.setVariableDeclarationAS(null);
		if (tupleTypeAS != null)
			this.tupleTypeAS.getVariableDeclarationList().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		VariableDeclarationAS$Class obj = new VariableDeclarationAS$Class();
		obj.name = name==null ? null : this.name;
		obj.operationAS = operationAS==null ? null : this.operationAS;
		obj.constraintAS = constraintAS==null ? null : this.constraintAS;
		obj.initExp = initExp==null ? null : this.initExp;
		obj.type = type==null ? null : this.type;
		obj.tupleLiteralExpAS = tupleLiteralExpAS==null ? null : this.tupleLiteralExpAS;
		obj.letExpAS = letExpAS==null ? null : this.letExpAS;
		obj.iteratorLoop = iteratorLoop==null ? null : this.iteratorLoop;
		obj.resultLoop = resultLoop==null ? null : this.resultLoop;
		obj.variableExpAS = variableExpAS==null ? null : this.variableExpAS;
		obj.tupleTypeAS = tupleTypeAS==null ? null : this.tupleTypeAS;
		return obj;
	}

	/** Accept 'ocl.syntax.ast.contexts.VariableDeclarationASVisitor' */
	public Object accept(ocl.syntax.SyntaxVisitor v, Object data) {
		return v.visit(this, data);
	}
}
