/**
 *
 *  Class OperationContextDeclAS$Class.java
 *
 *  Generated by KMFStudio at 17 February 2004 14:38:43
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package ocl.syntax.ast.contexts;

public class OperationContextDeclAS$Class
extends
	ContextDeclarationAS$Class
implements
	OperationContextDeclAS,
    ocl.syntax.SyntaxVisitable
{
	/** Default constructor */
	public OperationContextDeclAS$Class() {
		//--- Set property 'packageDeclarationAS' from 'ContextDeclarationAS' ---
		this.packageDeclarationAS = null;
		//--- Set property 'constraints' from 'ContextDeclarationAS' ---
		this.constraints = new java.util.Vector();
		//--- Set property 'operation' from 'OperationContextDeclAS' ---
		this.operation = null;
	}


	/** Property 'operation' from 'OperationContextDeclAS' */
	protected OperationAS operation;
	/** Get property 'operation' from 'OperationContextDeclAS' */
	public OperationAS getOperation() {
		return operation;
	}
	/** Set property 'operation' from 'OperationContextDeclAS' */
	public void setOperation(OperationAS operation) { 
		this.operation = operation;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "syntax.ast.contexts.OperationContextDeclAS";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (packageDeclarationAS != null)
			this.packageDeclarationAS.getContextDecls().remove(this);
		java.util.Iterator constraintsIt = this.constraints.iterator();
		while (constraintsIt.hasNext()) {
			ocl.syntax.ast.contexts.ConstraintAS constraintsObj = (ocl.syntax.ast.contexts.ConstraintAS)constraintsIt.next();
			if (constraintsObj != null)
				constraintsObj.setContextDeclarationAS(null);
		}
		if (operation != null)
			this.operation.setOperationContextDeclAS(null);
	}

	/** Clone the object */
	public Object clone() {
		OperationContextDeclAS$Class obj = new OperationContextDeclAS$Class();
		obj.packageDeclarationAS = packageDeclarationAS==null ? null : this.packageDeclarationAS;
		obj.constraints = constraints==null ? null : (java.util.List)((java.util.Vector)this.constraints).clone();
		obj.operation = operation==null ? null : this.operation;
		return obj;
	}

	/** Accept 'ocl.syntax.ast.contexts.OperationContextDeclASVisitor' */
	public Object accept(ocl.syntax.SyntaxVisitor v, Object data) {
		return v.visit(this, data);
	}
}
