/**
 *
 *  Class Contour$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:45
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.as;

public class Contour$Class
implements
	Contour,
    sd.SdVisitable
{
	/** Default constructor */
	public Contour$Class() {
		//--- Set property 'name' from 'Contour' ---
		this.name = null;
		//--- Set property 'excludingContourZones' from 'Contour' ---
		this.excludingContourZones = new java.util.Vector();
		//--- Set property 'containingContourZones' from 'Contour' ---
		this.containingContourZones = new java.util.Vector();
		//--- Set property 'allContourZone' from 'Contour' ---
		this.allContourZone = new java.util.Vector();
		//--- Set property 'unitaryDiagrams' from 'Contour' ---
		this.unitaryDiagrams = new java.util.Vector();
	}
	/** Specialized constructor */
	public Contour$Class(String name) {
		//--- Set property 'name' from 'Contour' ---
		this.name = name;
		//--- Set property 'excludingContourZones' from 'Contour' ---
		this.excludingContourZones = new java.util.Vector();
		//--- Set property 'containingContourZones' from 'Contour' ---
		this.containingContourZones = new java.util.Vector();
		//--- Set property 'allContourZone' from 'Contour' ---
		this.allContourZone = new java.util.Vector();
		//--- Set property 'unitaryDiagrams' from 'Contour' ---
		this.unitaryDiagrams = new java.util.Vector();
	}


	/** Property 'name' from 'Contour' */
	protected String name;
	/** Get property 'name' from 'Contour' */
		public String getName() {
		return name;
	}
	/** Set property 'name' from 'Contour' */
		public void setName(String name) {
		this.name = name;
	}

	/** Property 'excludingContourZones' from 'Contour' */
	protected java.util.List excludingContourZones;
	/** Get property 'excludingContourZones' from 'Contour' */
	public java.util.List getExcludingContourZones() {
		return excludingContourZones;
	}
	/** Set property 'excludingContourZones' from 'Contour' */
	public void setExcludingContourZones(java.util.List excludingContourZones) { 
		this.excludingContourZones = excludingContourZones;
	}

	/** Property 'containingContourZones' from 'Contour' */
	protected java.util.List containingContourZones;
	/** Get property 'containingContourZones' from 'Contour' */
	public java.util.List getContainingContourZones() {
		return containingContourZones;
	}
	/** Set property 'containingContourZones' from 'Contour' */
	public void setContainingContourZones(java.util.List containingContourZones) { 
		this.containingContourZones = containingContourZones;
	}

	/** Property 'allContourZone' from 'Contour' */
	protected java.util.List allContourZone;
	/** Get property 'allContourZone' from 'Contour' */
	public java.util.List getAllContourZone() {
		return allContourZone;
	}
	/** Set property 'allContourZone' from 'Contour' */
	public void setAllContourZone(java.util.List allContourZone) { 
		this.allContourZone = allContourZone;
	}

	/** Property 'unitaryDiagrams' from 'Contour' */
	protected java.util.List unitaryDiagrams;
	/** Get property 'unitaryDiagrams' from 'Contour' */
	public java.util.List getUnitaryDiagrams() {
		return unitaryDiagrams;
	}
	/** Set property 'unitaryDiagrams' from 'Contour' */
	public void setUnitaryDiagrams(java.util.List unitaryDiagrams) { 
		this.unitaryDiagrams = unitaryDiagrams;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "sd.as.Contour";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator excludingContourZonesIt = this.excludingContourZones.iterator();
		while (excludingContourZonesIt.hasNext()) {
			sd.as.Zone excludingContourZonesObj = (sd.as.Zone)excludingContourZonesIt.next();
			excludingContourZonesObj.getExcludingContours().remove(this);
			excludingContourZonesObj.getExcludingContours().remove(this);
		}
		java.util.Iterator containingContourZonesIt = this.containingContourZones.iterator();
		while (containingContourZonesIt.hasNext()) {
			sd.as.Zone containingContourZonesObj = (sd.as.Zone)containingContourZonesIt.next();
			containingContourZonesObj.getContainingContours().remove(this);
			containingContourZonesObj.getContainingContours().remove(this);
		}
		java.util.Iterator allContourZoneIt = this.allContourZone.iterator();
		while (allContourZoneIt.hasNext()) {
			sd.as.Zone allContourZoneObj = (sd.as.Zone)allContourZoneIt.next();
			allContourZoneObj.getAllContours().remove(this);
			allContourZoneObj.getAllContours().remove(this);
		}
		java.util.Iterator unitaryDiagramsIt = this.unitaryDiagrams.iterator();
		while (unitaryDiagramsIt.hasNext()) {
			sd.as.UnitaryDiagram unitaryDiagramsObj = (sd.as.UnitaryDiagram)unitaryDiagramsIt.next();
			unitaryDiagramsObj.getContours().remove(this);
			unitaryDiagramsObj.getContours().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		Contour$Class obj = new Contour$Class();
		obj.name = name==null ? null : this.name;
		obj.excludingContourZones = excludingContourZones==null ? null : (java.util.List)((java.util.Vector)this.excludingContourZones).clone();
		obj.containingContourZones = containingContourZones==null ? null : (java.util.List)((java.util.Vector)this.containingContourZones).clone();
		obj.allContourZone = allContourZone==null ? null : (java.util.List)((java.util.Vector)this.allContourZone).clone();
		obj.unitaryDiagrams = unitaryDiagrams==null ? null : (java.util.List)((java.util.Vector)this.unitaryDiagrams).clone();
		return obj;
	}

	/** Accept 'sd.as.ContourVisitor' */
	public Object accept(sd.SdVisitor v, Object data) {
		return v.visit(this, data);
	}
}
