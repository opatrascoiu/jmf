/**
 *
 *  Class Spider$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:45
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.as;

public class Spider$Class
implements
	Spider,
    sd.SdVisitable
{
	/** Default constructor */
	public Spider$Class() {
		//--- Set property 'habitat' from 'Spider' ---
		this.habitat = new java.util.Vector();
		//--- Set property 'unitaryDiagram' from 'Spider' ---
		this.unitaryDiagram = null;
	}


	/** Property 'habitat' from 'Spider' */
	protected java.util.List habitat;
	/** Get property 'habitat' from 'Spider' */
	public java.util.List getHabitat() {
		return habitat;
	}
	/** Set property 'habitat' from 'Spider' */
	public void setHabitat(java.util.List habitat) { 
		this.habitat = habitat;
	}

	/** Property 'unitaryDiagram' from 'Spider' */
	protected UnitaryDiagram unitaryDiagram;
	/** Get property 'unitaryDiagram' from 'Spider' */
	public UnitaryDiagram getUnitaryDiagram() {
		return unitaryDiagram;
	}
	/** Set property 'unitaryDiagram' from 'Spider' */
	public void setUnitaryDiagram(UnitaryDiagram unitaryDiagram) { 
		this.unitaryDiagram = unitaryDiagram;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "sd.as.Spider";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		java.util.Iterator habitatIt = this.habitat.iterator();
		while (habitatIt.hasNext()) {
			sd.as.Zone habitatObj = (sd.as.Zone)habitatIt.next();
			habitatObj.getSpider().remove(this);
			habitatObj.getSpider().remove(this);
		}
		if (unitaryDiagram != null)
			this.unitaryDiagram.getSpiders().remove(this);
	}

	/** Clone the object */
	public Object clone() {
		Spider$Class obj = new Spider$Class();
		obj.habitat = habitat==null ? null : (java.util.List)((java.util.Vector)this.habitat).clone();
		obj.unitaryDiagram = unitaryDiagram==null ? null : this.unitaryDiagram;
		return obj;
	}

	/** Accept 'sd.as.SpiderVisitor' */
	public Object accept(sd.SdVisitor v, Object data) {
		return v.visit(this, data);
	}
}
