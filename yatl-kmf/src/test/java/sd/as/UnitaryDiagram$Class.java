/**
 *
 *  Class UnitaryDiagram$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:45
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.as;

public class UnitaryDiagram$Class
extends
	Diagram$Class
implements
	UnitaryDiagram,
    sd.SdVisitable
{
	/** Default constructor */
	public UnitaryDiagram$Class() {
		//--- Set property 'name' from 'Diagram' ---
		this.name = null;
		//--- Set property 'compoundDiagram' from 'Diagram' ---
		this.compoundDiagram = null;
		//--- Set property 'zones' from 'UnitaryDiagram' ---
		this.zones = new java.util.Vector();
		//--- Set property 'shadedZones' from 'UnitaryDiagram' ---
		this.shadedZones = new java.util.Vector();
		//--- Set property 'spiders' from 'UnitaryDiagram' ---
		this.spiders = new java.util.Vector();
		//--- Set property 'contours' from 'UnitaryDiagram' ---
		this.contours = new java.util.Vector();
	}
	/** Specialized constructor */
	public UnitaryDiagram$Class(String name) {
		//--- Set property 'name' from 'Diagram' ---
		this.name = name;
		//--- Set property 'compoundDiagram' from 'Diagram' ---
		this.compoundDiagram = null;
		//--- Set property 'zones' from 'UnitaryDiagram' ---
		this.zones = new java.util.Vector();
		//--- Set property 'shadedZones' from 'UnitaryDiagram' ---
		this.shadedZones = new java.util.Vector();
		//--- Set property 'spiders' from 'UnitaryDiagram' ---
		this.spiders = new java.util.Vector();
		//--- Set property 'contours' from 'UnitaryDiagram' ---
		this.contours = new java.util.Vector();
	}


	/** Property 'zones' from 'UnitaryDiagram' */
	protected java.util.List zones;
	/** Get property 'zones' from 'UnitaryDiagram' */
	public java.util.List getZones() {
		return zones;
	}
	/** Set property 'zones' from 'UnitaryDiagram' */
	public void setZones(java.util.List zones) { 
		this.zones = zones;
	}

	/** Property 'shadedZones' from 'UnitaryDiagram' */
	protected java.util.List shadedZones;
	/** Get property 'shadedZones' from 'UnitaryDiagram' */
	public java.util.List getShadedZones() {
		return shadedZones;
	}
	/** Set property 'shadedZones' from 'UnitaryDiagram' */
	public void setShadedZones(java.util.List shadedZones) { 
		this.shadedZones = shadedZones;
	}

	/** Property 'spiders' from 'UnitaryDiagram' */
	protected java.util.List spiders;
	/** Get property 'spiders' from 'UnitaryDiagram' */
	public java.util.List getSpiders() {
		return spiders;
	}
	/** Set property 'spiders' from 'UnitaryDiagram' */
	public void setSpiders(java.util.List spiders) { 
		this.spiders = spiders;
	}

	/** Property 'compoundDiagram' from 'UnitaryDiagram' */
	protected CompoundDiagram compoundDiagram;
	/** Get property 'compoundDiagram' from 'UnitaryDiagram' */
	public CompoundDiagram getCompoundDiagram() {
		return compoundDiagram;
	}
	/** Set property 'compoundDiagram' from 'UnitaryDiagram' */
	public void setCompoundDiagram(CompoundDiagram compoundDiagram) { 
		this.compoundDiagram = compoundDiagram;
	}

	/** Property 'contours' from 'UnitaryDiagram' */
	protected java.util.List contours;
	/** Get property 'contours' from 'UnitaryDiagram' */
	public java.util.List getContours() {
		return contours;
	}
	/** Set property 'contours' from 'UnitaryDiagram' */
	public void setContours(java.util.List contours) { 
		this.contours = contours;
	}

	/** The id */
	protected String id;
	/** Get the id */
	public String getId() {
		return id;
	}
	/** Set the id */
	public void setId(String id) {
		this.id = id;
	}

	/** Override toString */
	public String toString() {
		String strId = "sd.as.UnitaryDiagram";
		String name = null;
		try {
			java.lang.Class cls = this.getClass();
			java.lang.reflect.Method method = cls.getMethod("getName", new java.lang.Class[] {});
			name = (String) method.invoke(this, new Object[] {});
			if (name != null && name.length()==0) name = null;
		} catch (Exception e) {
		}
		if (name == null)
			return strId+" 'id-"+getId()+"'";
		else
			return strId+" '"+name+"-"+getId()+"'";
	}

	/** Delete the object */
	public void delete() {
		if (compoundDiagram != null)
			this.compoundDiagram.getChildren().remove(this);
		java.util.Iterator zonesIt = this.zones.iterator();
		while (zonesIt.hasNext()) {
			sd.as.Zone zonesObj = (sd.as.Zone)zonesIt.next();
			zonesObj.getUnitaryDiagrams().remove(this);
			zonesObj.getUnitaryDiagrams().remove(this);
		}
		java.util.Iterator shadedZonesIt = this.shadedZones.iterator();
		while (shadedZonesIt.hasNext()) {
			sd.as.Zone shadedZonesObj = (sd.as.Zone)shadedZonesIt.next();
			shadedZonesObj.getShadedDiagrams().remove(this);
			shadedZonesObj.getShadedDiagrams().remove(this);
		}
		java.util.Iterator spidersIt = this.spiders.iterator();
		while (spidersIt.hasNext()) {
			sd.as.Spider spidersObj = (sd.as.Spider)spidersIt.next();
			if (spidersObj != null)
				spidersObj.setUnitaryDiagram(null);
		}
		java.util.Iterator contoursIt = this.contours.iterator();
		while (contoursIt.hasNext()) {
			sd.as.Contour contoursObj = (sd.as.Contour)contoursIt.next();
			contoursObj.getUnitaryDiagrams().remove(this);
			contoursObj.getUnitaryDiagrams().remove(this);
		}
	}

	/** Clone the object */
	public Object clone() {
		UnitaryDiagram$Class obj = new UnitaryDiagram$Class();
		obj.name = name==null ? null : this.name;
		obj.compoundDiagram = compoundDiagram==null ? null : this.compoundDiagram;
		obj.zones = zones==null ? null : (java.util.List)((java.util.Vector)this.zones).clone();
		obj.shadedZones = shadedZones==null ? null : (java.util.List)((java.util.Vector)this.shadedZones).clone();
		obj.spiders = spiders==null ? null : (java.util.List)((java.util.Vector)this.spiders).clone();
		obj.contours = contours==null ? null : (java.util.List)((java.util.Vector)this.contours).clone();
		return obj;
	}

	/** Accept 'sd.as.UnitaryDiagramVisitor' */
	public Object accept(sd.SdVisitor v, Object data) {
		return v.visit(this, data);
	}
}
