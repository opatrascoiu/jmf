/**
 *
 *  Class SdViewVisitor$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:46
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.repository;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import uk.ac.kent.cs.kmf.util.*;
import uk.ac.kent.cs.ocl20.OclProcessor;

public class SdViewVisitor$Class
	implements SdViewVisitor
{
	/** Constructor */
	public SdViewVisitor$Class(OclProcessor oclProcessor) {
		this.oclProcessor = oclProcessor;
	}

	/** OclProcessor */
	protected OclProcessor oclProcessor;
	public OclProcessor getOclProcessor() { return oclProcessor; }
	public void setOclProcessor(OclProcessor processor) { oclProcessor = processor;	}

	/** Visit factory for 'SdFactory' */
	public Object visit(sd.SdFactory host, Object data) {
		JFrame frame = new JFrame("sd.SdFactory");
		return frame;
	}
	/** Visit factory for 'sd.as.Diagram' */
	public Object visit(sd.as.DiagramFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.DiagramFactory");
		return frame;
	}
	/** Visit class for 'sd.as.Diagram' */
	public Object visit(sd.as.Diagram host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.Diagram finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.Diagram", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.CompoundDiagram' */
	public Object visit(sd.as.CompoundDiagramFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.CompoundDiagramFactory");
		return frame;
	}
	/** Visit class for 'sd.as.CompoundDiagram' */
	public Object visit(sd.as.CompoundDiagram host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.CompoundDiagram finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'children' ---
		//--- Add labels ---
		addLabels("children", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "children", host.getChildren(), rep, "sd.as.Diagram", editPanel, c, line, frame);
		//--- Add association 'unitaryParts' ---
		//--- Add labels ---
		addLabels("unitaryParts", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryParts", host.getUnitaryParts(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.CompoundDiagram", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.AndCompound' */
	public Object visit(sd.as.AndCompoundFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.AndCompoundFactory");
		return frame;
	}
	/** Visit class for 'sd.as.AndCompound' */
	public Object visit(sd.as.AndCompound host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.AndCompound finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'children' ---
		//--- Add labels ---
		addLabels("children", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "children", host.getChildren(), rep, "sd.as.Diagram", editPanel, c, line, frame);
		//--- Add association 'unitaryParts' ---
		//--- Add labels ---
		addLabels("unitaryParts", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryParts", host.getUnitaryParts(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.AndCompound", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.Contour' */
	public Object visit(sd.as.ContourFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.ContourFactory");
		return frame;
	}
	/** Visit class for 'sd.as.Contour' */
	public Object visit(sd.as.Contour host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.Contour finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'excludingContourZones' ---
		//--- Add labels ---
		addLabels("excludingContourZones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "excludingContourZones", host.getExcludingContourZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'containingContourZones' ---
		//--- Add labels ---
		addLabels("containingContourZones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "containingContourZones", host.getContainingContourZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'allContourZone' ---
		//--- Add labels ---
		addLabels("allContourZone", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "allContourZone", host.getAllContourZone(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'unitaryDiagrams' ---
		//--- Add labels ---
		addLabels("unitaryDiagrams", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryDiagrams", host.getUnitaryDiagrams(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.Contour", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.Zone' */
	public Object visit(sd.as.ZoneFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.ZoneFactory");
		return frame;
	}
	/** Visit class for 'sd.as.Zone' */
	public Object visit(sd.as.Zone host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.Zone finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'excludingContours' ---
		//--- Add labels ---
		addLabels("excludingContours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "excludingContours", host.getExcludingContours(), rep, "sd.as.Contour", editPanel, c, line, frame);
		//--- Add association 'containingContours' ---
		//--- Add labels ---
		addLabels("containingContours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "containingContours", host.getContainingContours(), rep, "sd.as.Contour", editPanel, c, line, frame);
		//--- Add association 'spider' ---
		//--- Add labels ---
		addLabels("spider", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "spider", host.getSpider(), rep, "sd.as.Spider", editPanel, c, line, frame);
		//--- Add association 'unitaryDiagrams' ---
		//--- Add labels ---
		addLabels("unitaryDiagrams", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryDiagrams", host.getUnitaryDiagrams(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);
		//--- Add association 'shadedDiagrams' ---
		//--- Add labels ---
		addLabels("shadedDiagrams", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "shadedDiagrams", host.getShadedDiagrams(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);
		//--- Add association 'allContours' ---
		//--- Add labels ---
		addLabels("allContours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "allContours", host.getAllContours(), rep, "sd.as.Contour", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.Zone", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.UnitaryDiagram' */
	public Object visit(sd.as.UnitaryDiagramFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.UnitaryDiagramFactory");
		return frame;
	}
	/** Visit class for 'sd.as.UnitaryDiagram' */
	public Object visit(sd.as.UnitaryDiagram host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.UnitaryDiagram finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'zones' ---
		//--- Add labels ---
		addLabels("zones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "zones", host.getZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'shadedZones' ---
		//--- Add labels ---
		addLabels("shadedZones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "shadedZones", host.getShadedZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'spiders' ---
		//--- Add labels ---
		addLabels("spiders", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "spiders", host.getSpiders(), rep, "sd.as.Spider", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add association 'contours' ---
		//--- Add labels ---
		addLabels("contours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "contours", host.getContours(), rep, "sd.as.Contour", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.UnitaryDiagram", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.FalseDiagram' */
	public Object visit(sd.as.FalseDiagramFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.FalseDiagramFactory");
		return frame;
	}
	/** Visit class for 'sd.as.FalseDiagram' */
	public Object visit(sd.as.FalseDiagram host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.FalseDiagram finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'zones' ---
		//--- Add labels ---
		addLabels("zones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "zones", host.getZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'shadedZones' ---
		//--- Add labels ---
		addLabels("shadedZones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "shadedZones", host.getShadedZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'spiders' ---
		//--- Add labels ---
		addLabels("spiders", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "spiders", host.getSpiders(), rep, "sd.as.Spider", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add association 'contours' ---
		//--- Add labels ---
		addLabels("contours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "contours", host.getContours(), rep, "sd.as.Contour", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.FalseDiagram", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.OrCompound' */
	public Object visit(sd.as.OrCompoundFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.OrCompoundFactory");
		return frame;
	}
	/** Visit class for 'sd.as.OrCompound' */
	public Object visit(sd.as.OrCompound host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.OrCompound finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'children' ---
		//--- Add labels ---
		addLabels("children", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "children", host.getChildren(), rep, "sd.as.Diagram", editPanel, c, line, frame);
		//--- Add association 'unitaryParts' ---
		//--- Add labels ---
		addLabels("unitaryParts", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryParts", host.getUnitaryParts(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.OrCompound", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.Spider' */
	public Object visit(sd.as.SpiderFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.SpiderFactory");
		return frame;
	}
	/** Visit class for 'sd.as.Spider' */
	public Object visit(sd.as.Spider host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.Spider finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add association 'habitat' ---
		//--- Add labels ---
		addLabels("habitat", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "habitat", host.getHabitat(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'unitaryDiagram' ---
		//--- Add labels ---
		addLabels("unitaryDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryDiagram", host.getUnitaryDiagram(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.Spider", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.NotCompound' */
	public Object visit(sd.as.NotCompoundFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.NotCompoundFactory");
		return frame;
	}
	/** Visit class for 'sd.as.NotCompound' */
	public Object visit(sd.as.NotCompound host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.NotCompound finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'children' ---
		//--- Add labels ---
		addLabels("children", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "children", host.getChildren(), rep, "sd.as.Diagram", editPanel, c, line, frame);
		//--- Add association 'unitaryParts' ---
		//--- Add labels ---
		addLabels("unitaryParts", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "unitaryParts", host.getUnitaryParts(), rep, "sd.as.UnitaryDiagram", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.NotCompound", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}
	/** Visit factory for 'sd.as.TrueDiagram' */
	public Object visit(sd.as.TrueDiagramFactory host, Object data) {
		JFrame frame = new JFrame("sd.as.TrueDiagramFactory");
		return frame;
	}
	/** Visit class for 'sd.as.TrueDiagram' */
	public Object visit(sd.as.TrueDiagram host, Object data) {
		//--- Get the repository ---
		final sd.repository.SdRepository rep = (sd.repository.SdRepository)data;

		//--- Make a final copy of host ---
		final sd.as.TrueDiagram finalHost = host;

		//--- Frame settings ---
		final SdViewEditFrame$Class frame = new SdViewEditFrame$Class(host, rep);
		//--- Get refresh info to be stored ---
		java.util.List primitiveContainers = frame.getPrimitiveContainers();
		java.util.List primitiveNames = frame.getPrimitiveNames();
		java.util.List collectionContainers = frame.getCollectionContainers();
		java.util.List collectionNames = frame.getCollectionNames();
		java.util.List userContainers = frame.getUserContainers();
		java.util.List userNames = frame.getUserNames();
		java.util.List possibleContainers = frame.getPossibleContainers();
		java.util.List keys = frame.getKeys();

		//--- Create VIEW-EDIT panel ---
		JPanel editPanel = new JPanel(new GridBagLayout());
		//--- Give the panel a border gap of 5 pixels ---
		editPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		//--- Get the constraints ---
		GridBagConstraints c = new GridBagConstraints();
		//--- Add space around all components to avoid clutter ---
		c.insets = new Insets(2, 2, 2, 2);
		//--- Anchor all components WEST ---
		c.anchor = GridBagConstraints.WEST;
		//--- Initialize ---
		String name;
		Object value;
		int line = 0;
		//--- Add attribute 'name' ---
		//--- Add labels ---
		addLabels("name", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4Primitive(finalHost, "name", host.getName(), rep, "String", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add labels ---
		addLabels("compoundDiagram", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "compoundDiagram", host.getCompoundDiagram(), rep, "sd.as.CompoundDiagram", editPanel, c, line, frame);
		//--- Add association 'zones' ---
		//--- Add labels ---
		addLabels("zones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "zones", host.getZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'shadedZones' ---
		//--- Add labels ---
		addLabels("shadedZones", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "shadedZones", host.getShadedZones(), rep, "sd.as.Zone", editPanel, c, line, frame);
		//--- Add association 'spiders' ---
		//--- Add labels ---
		addLabels("spiders", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "spiders", host.getSpiders(), rep, "sd.as.Spider", editPanel, c, line, frame);
		//--- Add association 'compoundDiagram' ---
		//--- Add association 'contours' ---
		//--- Add labels ---
		addLabels("contours", editPanel, c, line++);
		//--- Add VALUE to panel ---
		addJs4User(finalHost, "contours", host.getContours(), rep, "sd.as.Contour", editPanel, c, line, frame);

		//--- Create EVALUATE panel ---
		JPanel evalPanel = createEvalPanel("sd.as.TrueDiagram", finalHost);

		//--- Create REFRESH panel ---
		JPanel refreshPanel = createRefreshPanel(frame);

		//--- Add EDIT, EVALUATE, and REFRESH panels ---
		addPanels(frame, refreshPanel, editPanel, evalPanel);
		return frame;
	}

	//--- Create EVALUATE panel ---
	protected JPanel createEvalPanel(final String classPathName, final Object finalHost) {
		JPanel evalPanel = new JPanel();
		evalPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		evalPanel.setLayout(new BoxLayout(evalPanel, BoxLayout.Y_AXIS) );
		//--- Create INPUT ---
		final JTextArea expressionText = new JTextArea();
		expressionText.setRows(5);
		expressionText.setLineWrap(true);
		//--- Create OUTPUT ---
		final ILog evaluationText = new ConsoleLog();
		((JTextArea)evaluationText).setRows(5);
		((JTextArea)evaluationText).setLineWrap(true);
		//--- Create EVALUATE BUTTON ---
		JButton evaluateButton = new JButton(new AbstractAction("Evaluate") {
			public void actionPerformed(ActionEvent e) {
				try {
					String constraint = expressionText.getText();
					if (!constraint.startsWith("context ")) constraint = "context "+classPathName.replaceAll("[.]", "::")+" inv: "+ constraint;
					java.util.List result = oclProcessor.evaluate(constraint, finalHost, evaluationText);
					evaluationText.reportMessage(result.get(0).toString());
				} catch(Exception e1) {
					evaluationText.reportMessage("undefined");
				}
			}
		});
		evaluateButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add INPUT, EVALUATE BUTTON, and OUTPUT ---
		evalPanel.add(new JScrollPane(expressionText, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		evalPanel.add(evaluateButton);
		evalPanel.add(new JScrollPane(((JTextArea)evaluationText), JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
		return evalPanel;
	}

	//--- Create REFRESH panel ---
	protected JPanel createRefreshPanel(final SdViewEditFrame$Class frame) {
		JPanel refreshPanel = new JPanel();
		refreshPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		refreshPanel.setLayout(new BoxLayout(refreshPanel, BoxLayout.Y_AXIS) );
		//--- Create REFRESH BUTTON ---
		JButton refreshButton = new JButton(new AbstractAction("Refresh") {
			public void actionPerformed(ActionEvent e) {
				frame.refreshAction();
			}
		});
		refreshButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);
		//--- Add REFRESH BUTTON ---
		refreshPanel.add(refreshButton);
		return refreshPanel;
	}
		//--- Add EDIT, EVALUATE, and REFRESH panels ---
	protected void addPanels(final SdViewEditFrame$Class frame, JPanel refreshPanel, JPanel editPanel, JPanel evalPanel) {
		frame.getContentPane().add(new JScrollPane(refreshPanel), BorderLayout.NORTH);
		frame.getContentPane().add(new JScrollPane(editPanel), BorderLayout.CENTER);
		frame.getContentPane().add(new JScrollPane(evalPanel), BorderLayout.SOUTH);
		frame.pack();
	}
	//--- Set the grid ---
	void setGrid() {
	}

	//--- Add labels name and = ---
	protected void addLabels(String name, JPanel editPanel, GridBagConstraints c, int line) {
		//--- Add property name to panel ---
		JLabel label = new JLabel(name);
		label.setBorder(border);
		c.gridx = 0;
		c.gridy = line;
		c.ipadx = 5;
		c.ipady = 5;
		c.weightx = 0.0;
		c.weighty = 0.0;
		editPanel.add(label, c);
		//--- Add = to panel---
		label = new JLabel(" = ");
		c.gridx = 1;
		label.setBorder(border);
		editPanel.add(label, c);
	}
	//--- Add SWING components for a primitive field ---
	protected void addJs4Primitive(final Object finalHost, final String name, final Object value, sd.repository.SdRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, SdViewEditFrame$Class refreshFrame) {
		//--- Add VALUE to panel ---
		final JTextField textField = new JTextField(value == null ? "null" : value.toString(), 20);
		textField.setFont(font);
		textField.setPreferredSize(fieldSize);
		textField.setEditable(false);
		c.gridx = 2;
		editPanel.add(textField, c);
		//--- Store refresh info ---
		refreshFrame.getPrimitiveContainers().add(textField);
		refreshFrame.getPrimitiveNames().add(name);
	}
		//--- Add SWING components for a collection field ---
	protected void addJs4Collection(String name, final Object value, sd.repository.SdRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, SdViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		Collection col = (java.util.Collection)value;
		Iterator it = col.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			objects1.add(obj);
		}
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(listSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getCollectionContainers().add(list1);
		frame.getCollectionNames().add(name);
	}
		//--- Add SWING components for a user field ---
	protected void addJs4User(final Object finalHost, final String name, final Object value, sd.repository.SdRepository rep, String filter, JPanel editPanel, GridBagConstraints c, int line, SdViewEditFrame$Class frame) {
		//--- Add VALUE to panel ---
		final Vector objects1 = new Vector();
		objects1.add(value);
		final JList list1 = new JList(objects1);
		list1.setFont(font);
		list1.setVisibleRowCount(1);
		JScrollPane scroller1 = new JScrollPane(list1, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroller1.setPreferredSize(fieldSize);
		c.gridx = 2;
		editPanel.add(scroller1, c);
		//--- Store refresh info ---
		frame.getUserContainers().add(list1);
		frame.getUserNames().add(name);
}
	//--- Look settings ---
	final EmptyBorder border = new EmptyBorder(new Insets(0, 0, 0, 10));
	final Font font = sd.repository.SdBrowser$Class.font;
	final Dimension listSize = sd.repository.SdBrowser$Class.listSize;
	final Dimension fieldSize = sd.repository.SdBrowser$Class.fieldSize;;
}
