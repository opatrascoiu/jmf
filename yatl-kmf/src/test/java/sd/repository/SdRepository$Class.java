/**
 *
 *  Class SdRepository$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:46
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.repository;

import java.io.*;
import java.util.*;
import javax.swing.tree.*;
import uk.ac.kent.cs.kmf.xmi.*;
import uk.ac.kent.cs.kmf.util.*;

import sd.*;

public class SdRepository$Class
	extends uk.ac.kent.cs.kmf.common.RepositoryImpl
	implements SdRepository
{
	/** Default repository constructor */
	public SdRepository$Class() {
		setLog(new FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public SdRepository$Class(ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init sd repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'sd.as.Diagram'");
		factories.put("sd.as.Diagram", new sd.as.DiagramFactory$Class(this));
		population.put("sd.as.Diagram", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.CompoundDiagram'");
		factories.put("sd.as.CompoundDiagram", new sd.as.CompoundDiagramFactory$Class(this));
		population.put("sd.as.CompoundDiagram", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.AndCompound'");
		factories.put("sd.as.AndCompound", new sd.as.AndCompoundFactory$Class(this));
		population.put("sd.as.AndCompound", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.Contour'");
		factories.put("sd.as.Contour", new sd.as.ContourFactory$Class(this));
		population.put("sd.as.Contour", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.Zone'");
		factories.put("sd.as.Zone", new sd.as.ZoneFactory$Class(this));
		population.put("sd.as.Zone", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.UnitaryDiagram'");
		factories.put("sd.as.UnitaryDiagram", new sd.as.UnitaryDiagramFactory$Class(this));
		population.put("sd.as.UnitaryDiagram", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.FalseDiagram'");
		factories.put("sd.as.FalseDiagram", new sd.as.FalseDiagramFactory$Class(this));
		population.put("sd.as.FalseDiagram", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.OrCompound'");
		factories.put("sd.as.OrCompound", new sd.as.OrCompoundFactory$Class(this));
		population.put("sd.as.OrCompound", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.Spider'");
		factories.put("sd.as.Spider", new sd.as.SpiderFactory$Class(this));
		population.put("sd.as.Spider", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.NotCompound'");
		factories.put("sd.as.NotCompound", new sd.as.NotCompoundFactory$Class(this));
		population.put("sd.as.NotCompound", new Vector());
		log.reportMessage("Adding factory and initializing population for 'sd.as.TrueDiagram'");
		factories.put("sd.as.TrueDiagram", new sd.as.TrueDiagramFactory$Class(this));
		population.put("sd.as.TrueDiagram", new Vector());
	}

	//--- MODEL NAME ---
	protected String modelName = "sd";
	public String getModelName() {
		return modelName;
	}

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			SdFactory factory = (SdFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}
	/** Get all instances from population */
	public List getAllElements() {
		List res = new ArrayList();
		Iterator i = population.keySet().iterator();
		while (i.hasNext()) {
			String key = (String)i.next();
			res.addAll((Collection)population.get(key));
		}
		return res;
	}
	/** Get the entire population */
	public Map getPopulation() {
		return population;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public SdFactory getFactory(String fullClassName) {
		SdFactory factory = null;
		try {
			factory = (SdFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Get the all factories */
	public Map getFactories() {
		return factories;
	}

	//--- BROWSER ---
	/** Get a description using a JTree */
	public DefaultMutableTreeNode toJTree() {
		//--- Creat the JTree visitor ---
		SdJTreeVisitor jtreeVisitor = new SdJTreeVisitor$Class();
		//--- Init root ---
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Repository", true);
		DefaultMutableTreeNode factoriesNode = new DefaultMutableTreeNode("Lifecycle", true);
		DefaultMutableTreeNode elementsNode = new DefaultMutableTreeNode("Elements", true);
		root.add(factoriesNode);
		root.add(elementsNode);
		//--- Add every factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String factoryName = (String)i.next();
			SdFactory factory = (SdFactory)factories.get(factoryName);
			DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)factory.accept(jtreeVisitor, new Object());
			factoriesNode.add(factoryNode);
		}
		//--- Add every element ---
		Set elemNames = population.keySet();
		Iterator j = elemNames.iterator();
		while (j.hasNext()) {
			String elemName = (String)j.next();
			//--- Add a node for each class ---
			List elements = (List)population.get(elemName);
			if (elements.size() != 0) {
				DefaultMutableTreeNode elemNode = new DefaultMutableTreeNode("Instances of "+elemName, true);
				Iterator elementIt = elements.iterator();
				while (elementIt.hasNext()) {
					SdElement element = (SdElement)elementIt.next();
					//--- Add a node for each instance ---
					Set visitedElements = new LinkedHashSet();
					visitedElements.add(element);
					DefaultMutableTreeNode instanceNode = (DefaultMutableTreeNode)element.accept(jtreeVisitor, visitedElements);
					elemNode.add(instanceNode);
				}
				elementsNode.add(elemNode);
			}
		}
		return root;
	}

	/** Save the content into an XMI file */
	public void saveXMI(String fileName) {
		//--- Create an XMI file ---
		if (!fileName.toLowerCase().endsWith(".xml")) fileName += ".xml";
		XMIFile xmiFile = new XMIFile(fileName);
		//--- Create an XMI vistor ---
		SdXMIVisitor xmiVisitor = new SdXMIVisitor$Class();
		//--- Create an empty (reference, xmiObject) table  ---
		Map mapRefToXMI = new IdentityHashMap();
		//--- Create the top objects container ---
		Collection topObjs = xmiFile.getTopObjects();
		//--- For each factory ---
		Set factoryNames = factories.keySet();
		Iterator i = factoryNames.iterator();
		while (i.hasNext()) {
			String elemName = (String)i.next();
			SdFactory factory = (SdFactory)factories.get(elemName);
			//--- Create the factory ---
			XMIObject xmifactory = (XMIObject)factory.accept(xmiVisitor, mapRefToXMI);
			//--- Add factory to top objects ---
			//--- Compute all the instances created by the factory ---
			List elements = (List)population.get(elemName);
			if (elements == null) continue;
			Iterator j = elements.iterator();
			while (j.hasNext()) {
				SdElement element = (SdElement)j.next();
				//--- Create the XMI element ---
				XMIObject xmiElement = (XMIObject)element.accept(xmiVisitor, mapRefToXMI);
				//--- Add the element to top objects ---
				topObjs.add(xmiElement);
			}
		}
		try {
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new SdFactoryAdapter$Class(this, log));
			//--- Save the elements ---
			IXMIWriter writer = new XMIWriter();
			writer.write(xmiFile, fileName, log);
		} catch (Exception e) {
			log.reportMessage(""+e);
		}
	}
	/** Create a new repository from an XMI file */
	public uk.ac.kent.cs.kmf.common.Repository loadXMI(String fileName) {
		try {
			//--- Create a repository ---
			SdRepository rep = new SdRepository$Class();
			rep.setLog(log);
			//--- Register the AdapterFactory into XMI framework ---
			AdapterFactoryRegister.registerAdapterFactory(new SdFactoryAdapter$Class(rep, log));
			//--- Build the elements ---
			XMIFile xmiFile = (new XMIReader()).read(fileName, log);
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}

	/** Get a HUTN description of the repository */
	public String toHUTN() {
		//--- Create the HUTN visitor ---
		SdHUTNVisitor hutnVisitor = new SdHUTNVisitor$Class();
		//--- Add every factory ---
		String buffer = new String();
		buffer += "SdRepository {\n";
		buffer += "factories\n";
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			buffer += "  "+factoryName+"\n";
		}
		buffer += "\n";
		//--- Add every element ---
		buffer += "Elements\n";
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			buffer += "Instances of "+elemName+"\n";
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				SdElement element = (SdElement)elementIt.next();
				buffer += element.accept(hutnVisitor, new Object());
			}
		}
		buffer += "}\n";
		log.reportMessage(buffer);
		return buffer;
	}
	/** Save the content into a HUTN file */
	public void saveHUTN(String fileName) {
		//--- Open the HUTN file ---
		if (!fileName.toLowerCase().endsWith(".hutn")) fileName += ".hutn";
		PrintWriter out;
		try {
			out = new PrintWriter(new FileWriter(new File(fileName)), true);
		} catch (Exception e) {
			log.reportMessage(""+e);
			return;
		}
		//--- Create the HUTN visitor ---
		SdHUTNVisitor hutnVisitor = new SdHUTNVisitor$Class();
		//--- Add every factory ---
		out.println("SdRepository {");
		out.println("factories");
		Set factoryNames = factories.keySet();
		Iterator factoryIt = factoryNames.iterator();
		while (factoryIt.hasNext()) {
			String factoryName = (String)factoryIt.next();
			out.println("  "+factoryName);
		}
		out.println();
		//--- Add every element ---
		out.println("Elements");
		Set elemNames = population.keySet();
		Iterator elemIt = elemNames.iterator();
		while (elemIt.hasNext()) {
			String elemName = (String)elemIt.next();
			out.println("Instances of "+elemName);
			List elements = (List)population.get(elemName);
			Iterator elementIt = elements.iterator();
			while (elementIt.hasNext()) {
				SdElement element = (SdElement)elementIt.next();
				out.println(element.accept(hutnVisitor, new Object()));
			}
		}
		out.println("}");
		out.close();
	}
	/** Create a new repository from an HUTN file */
	public SdRepository loadHUTN(String fileName) {
		try {
			//--- Create a repository ---
			SdRepository rep = new SdRepository$Class();
			return rep;
		} catch (Exception e) {
			log.reportMessage(""+e);
			return null;
		}
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, SdFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}
	/** Get the log file */
	public ILog getLog() {
		return log;
	}
	/** Set the log file */
	public void setLog(ILog log) {
		this.log = log;
	}

	/** The log */
	protected ILog log;
	/** The factories */
	protected Hashtable factories = new Hashtable();
	/** The population */
	protected Hashtable population = new Hashtable();

}
