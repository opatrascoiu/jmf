/**
 *
 *  Class SdXMIVisitor$Class.java
 *
 *  Generated by KMFStudio at 18 February 2004 20:38:47
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package sd.repository;

import java.util.*;

import uk.ac.kent.cs.kmf.xmi.*;
import uk.ac.kent.cs.kmf.util.*;

import sd.*;

public class SdXMIVisitor$Class
	implements SdXMIVisitor
{
	/** Visit factory for 'sd.SdFactory' */
	public Object visit(sd.SdFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.SdFactory", host);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.DiagramFactory' */
	public Object visit(sd.as.DiagramFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.DiagramFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.Diagram' */
	public Object visit(sd.as.Diagram host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.Diagram", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Diagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.Diagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.CompoundDiagramFactory' */
	public Object visit(sd.as.CompoundDiagramFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.CompoundDiagramFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.CompoundDiagram' */
	public Object visit(sd.as.CompoundDiagram host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.CompoundDiagram", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for CompoundDiagram ---
		//--- Association sd.as.CompoundDiagram.children ---
		IXMIProperty childrenIXMIProperty = getProperty("sd.as.CompoundDiagram.children", host.getChildren(), (Map)data);
		xmiObject.add(childrenIXMIProperty);
		//--- Association sd.as.CompoundDiagram.unitaryParts ---
		IXMIProperty unitaryPartsIXMIProperty = getProperty("sd.as.CompoundDiagram.unitaryParts", host.getUnitaryParts(), (Map)data);
		xmiObject.add(unitaryPartsIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Diagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.Diagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.AndCompoundFactory' */
	public Object visit(sd.as.AndCompoundFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.AndCompoundFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.AndCompound' */
	public Object visit(sd.as.AndCompound host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.AndCompound", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for AndCompound ---
		//--- Properties for CompoundDiagram ---
		//--- Association sd.as.CompoundDiagram.children ---
		IXMIProperty childrenIXMIProperty = getProperty("sd.as.CompoundDiagram.children", host.getChildren(), (Map)data);
		xmiObject.add(childrenIXMIProperty);
		//--- Association sd.as.CompoundDiagram.unitaryParts ---
		IXMIProperty unitaryPartsIXMIProperty = getProperty("sd.as.CompoundDiagram.unitaryParts", host.getUnitaryParts(), (Map)data);
		xmiObject.add(unitaryPartsIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Diagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.Diagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.ContourFactory' */
	public Object visit(sd.as.ContourFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.ContourFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.Contour' */
	public Object visit(sd.as.Contour host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.Contour", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for Contour ---
		//--- Attribute sd.as.Contour.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Contour.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Contour.excludingContourZones ---
		IXMIProperty excludingContourZonesIXMIProperty = getProperty("sd.as.Contour.excludingContourZones", host.getExcludingContourZones(), (Map)data);
		xmiObject.add(excludingContourZonesIXMIProperty);
		//--- Association sd.as.Contour.containingContourZones ---
		IXMIProperty containingContourZonesIXMIProperty = getProperty("sd.as.Contour.containingContourZones", host.getContainingContourZones(), (Map)data);
		xmiObject.add(containingContourZonesIXMIProperty);
		//--- Association sd.as.Contour.allContourZone ---
		IXMIProperty allContourZoneIXMIProperty = getProperty("sd.as.Contour.allContourZone", host.getAllContourZone(), (Map)data);
		xmiObject.add(allContourZoneIXMIProperty);
		//--- Association sd.as.Contour.unitaryDiagrams ---
		IXMIProperty unitaryDiagramsIXMIProperty = getProperty("sd.as.Contour.unitaryDiagrams", host.getUnitaryDiagrams(), (Map)data);
		xmiObject.add(unitaryDiagramsIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.ZoneFactory' */
	public Object visit(sd.as.ZoneFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.ZoneFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.Zone' */
	public Object visit(sd.as.Zone host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.Zone", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for Zone ---
		//--- Association sd.as.Zone.excludingContours ---
		IXMIProperty excludingContoursIXMIProperty = getProperty("sd.as.Zone.excludingContours", host.getExcludingContours(), (Map)data);
		xmiObject.add(excludingContoursIXMIProperty);
		//--- Association sd.as.Zone.containingContours ---
		IXMIProperty containingContoursIXMIProperty = getProperty("sd.as.Zone.containingContours", host.getContainingContours(), (Map)data);
		xmiObject.add(containingContoursIXMIProperty);
		//--- Association sd.as.Zone.spider ---
		IXMIProperty spiderIXMIProperty = getProperty("sd.as.Zone.spider", host.getSpider(), (Map)data);
		xmiObject.add(spiderIXMIProperty);
		//--- Association sd.as.Zone.unitaryDiagrams ---
		IXMIProperty unitaryDiagramsIXMIProperty = getProperty("sd.as.Zone.unitaryDiagrams", host.getUnitaryDiagrams(), (Map)data);
		xmiObject.add(unitaryDiagramsIXMIProperty);
		//--- Association sd.as.Zone.shadedDiagrams ---
		IXMIProperty shadedDiagramsIXMIProperty = getProperty("sd.as.Zone.shadedDiagrams", host.getShadedDiagrams(), (Map)data);
		xmiObject.add(shadedDiagramsIXMIProperty);
		//--- Association sd.as.Zone.allContours ---
		IXMIProperty allContoursIXMIProperty = getProperty("sd.as.Zone.allContours", host.getAllContours(), (Map)data);
		xmiObject.add(allContoursIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.UnitaryDiagramFactory' */
	public Object visit(sd.as.UnitaryDiagramFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.UnitaryDiagramFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.UnitaryDiagram' */
	public Object visit(sd.as.UnitaryDiagram host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.UnitaryDiagram", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for UnitaryDiagram ---
		//--- Association sd.as.UnitaryDiagram.zones ---
		IXMIProperty zonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.zones", host.getZones(), (Map)data);
		xmiObject.add(zonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.shadedZones ---
		IXMIProperty shadedZonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.shadedZones", host.getShadedZones(), (Map)data);
		xmiObject.add(shadedZonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.spiders ---
		IXMIProperty spidersIXMIProperty = getProperty("sd.as.UnitaryDiagram.spiders", host.getSpiders(), (Map)data);
		xmiObject.add(spidersIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.UnitaryDiagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.contours ---
		IXMIProperty contoursIXMIProperty = getProperty("sd.as.UnitaryDiagram.contours", host.getContours(), (Map)data);
		xmiObject.add(contoursIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.FalseDiagramFactory' */
	public Object visit(sd.as.FalseDiagramFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.FalseDiagramFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.FalseDiagram' */
	public Object visit(sd.as.FalseDiagram host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.FalseDiagram", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for FalseDiagram ---
		//--- Properties for UnitaryDiagram ---
		//--- Association sd.as.UnitaryDiagram.zones ---
		IXMIProperty zonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.zones", host.getZones(), (Map)data);
		xmiObject.add(zonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.shadedZones ---
		IXMIProperty shadedZonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.shadedZones", host.getShadedZones(), (Map)data);
		xmiObject.add(shadedZonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.spiders ---
		IXMIProperty spidersIXMIProperty = getProperty("sd.as.UnitaryDiagram.spiders", host.getSpiders(), (Map)data);
		xmiObject.add(spidersIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.UnitaryDiagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.contours ---
		IXMIProperty contoursIXMIProperty = getProperty("sd.as.UnitaryDiagram.contours", host.getContours(), (Map)data);
		xmiObject.add(contoursIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.OrCompoundFactory' */
	public Object visit(sd.as.OrCompoundFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.OrCompoundFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.OrCompound' */
	public Object visit(sd.as.OrCompound host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.OrCompound", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for OrCompound ---
		//--- Properties for CompoundDiagram ---
		//--- Association sd.as.CompoundDiagram.children ---
		IXMIProperty childrenIXMIProperty = getProperty("sd.as.CompoundDiagram.children", host.getChildren(), (Map)data);
		xmiObject.add(childrenIXMIProperty);
		//--- Association sd.as.CompoundDiagram.unitaryParts ---
		IXMIProperty unitaryPartsIXMIProperty = getProperty("sd.as.CompoundDiagram.unitaryParts", host.getUnitaryParts(), (Map)data);
		xmiObject.add(unitaryPartsIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Diagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.Diagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.SpiderFactory' */
	public Object visit(sd.as.SpiderFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.SpiderFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.Spider' */
	public Object visit(sd.as.Spider host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.Spider", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for Spider ---
		//--- Association sd.as.Spider.habitat ---
		IXMIProperty habitatIXMIProperty = getProperty("sd.as.Spider.habitat", host.getHabitat(), (Map)data);
		xmiObject.add(habitatIXMIProperty);
		//--- Association sd.as.Spider.unitaryDiagram ---
		IXMIProperty unitaryDiagramIXMIProperty = getProperty("sd.as.Spider.unitaryDiagram", host.getUnitaryDiagram(), (Map)data);
		xmiObject.add(unitaryDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.NotCompoundFactory' */
	public Object visit(sd.as.NotCompoundFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.NotCompoundFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.NotCompound' */
	public Object visit(sd.as.NotCompound host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.NotCompound", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for NotCompound ---
		//--- Properties for CompoundDiagram ---
		//--- Association sd.as.CompoundDiagram.children ---
		IXMIProperty childrenIXMIProperty = getProperty("sd.as.CompoundDiagram.children", host.getChildren(), (Map)data);
		xmiObject.add(childrenIXMIProperty);
		//--- Association sd.as.CompoundDiagram.unitaryParts ---
		IXMIProperty unitaryPartsIXMIProperty = getProperty("sd.as.CompoundDiagram.unitaryParts", host.getUnitaryParts(), (Map)data);
		xmiObject.add(unitaryPartsIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		//--- Association sd.as.Diagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.Diagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		return xmiObject;
	}
	/** Visit factory for 'sd.as.TrueDiagramFactory' */
	public Object visit(sd.as.TrueDiagramFactory host, Object data) {
		IXMIObject xmiObject = new XMIObject("sd.as.TrueDiagramFactory", host);
		return xmiObject;
	}
	/** Visit class for 'sd.as.TrueDiagram' */
	public Object visit(sd.as.TrueDiagram host, Object data) {
		if (((Map)data).containsKey(host)) return ((Map)data).get(host);
		IXMIObject xmiObject = new XMIObject("sd.as.TrueDiagram", host);
		//--- Add (host, xmiObject) to data ---
		((Map)data).put(host, xmiObject);
		//--- Properties for TrueDiagram ---
		//--- Properties for UnitaryDiagram ---
		//--- Association sd.as.UnitaryDiagram.zones ---
		IXMIProperty zonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.zones", host.getZones(), (Map)data);
		xmiObject.add(zonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.shadedZones ---
		IXMIProperty shadedZonesIXMIProperty = getProperty("sd.as.UnitaryDiagram.shadedZones", host.getShadedZones(), (Map)data);
		xmiObject.add(shadedZonesIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.spiders ---
		IXMIProperty spidersIXMIProperty = getProperty("sd.as.UnitaryDiagram.spiders", host.getSpiders(), (Map)data);
		xmiObject.add(spidersIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.compoundDiagram ---
		IXMIProperty compoundDiagramIXMIProperty = getProperty("sd.as.UnitaryDiagram.compoundDiagram", host.getCompoundDiagram(), (Map)data);
		xmiObject.add(compoundDiagramIXMIProperty);
		//--- Association sd.as.UnitaryDiagram.contours ---
		IXMIProperty contoursIXMIProperty = getProperty("sd.as.UnitaryDiagram.contours", host.getContours(), (Map)data);
		xmiObject.add(contoursIXMIProperty);
		//--- Properties for Diagram ---
		//--- Attribute sd.as.Diagram.name ---
		IXMIProperty nameIXMIProperty = getProperty("sd.as.Diagram.name", host.getName(), (Map)data);
		xmiObject.add(nameIXMIProperty);
		return xmiObject;
	}
	/** Auxiliary function */
	IXMIProperty getProperty(String name, Object obj, Map data) {
		//--- Create property ---
		IXMIProperty prop = new XMIProperty(name);
		//--- Compute property type ---
		prop.setXMIType(XMIProperty.OBJECT);
		if (Type.isInstanceofPrimitiveType(obj)) {
			prop.setXMIType(XMIProperty.BASIC);
		}
		//--- Collection types ---
		if (Type.isInstanceofCollectionType(obj)) {
			prop.setXMIType(XMIProperty.COLLECTION);
		}
		//--- Check if obj is null ---
		if (obj == null) {
			prop.setXMIValue(null);
			return prop;
		}
		//--- Check if obj is already in data ---
		if (data.containsKey(obj)) {
			prop.setXMIValue(data.get(obj));
			return prop;
		}
		//--- Construct the value: an XMI object ---
		//--- Basic types ---
		if (Type.isInstanceofPrimitiveType(obj)) {
			prop.setXMIValue(obj.toString());
			return prop;
		}
		//--- Collection types ---
		if (Type.isInstanceofCollectionType(obj)) {
			Collection col = (Collection)obj;
			Iterator i = col.iterator();
			while (i.hasNext()) {
				Object value = i.next();
				if (Type.isInstanceofPrimitiveType(value)) {
					IXMIObject xmiElem = new XMIObject("BASIC", value);
					xmiElem.setLABEL(value.toString());
					if (value instanceof java.lang.Boolean) xmiElem = new XMIObject("Boolean", value);
					else if (value instanceof java.lang.Integer) xmiElem = new XMIObject("Integer", value);
					else if (value instanceof java.lang.Double) xmiElem = new XMIObject("Double", value);
					else if (value instanceof java.lang.String) xmiElem = new XMIObject("String", value);
					//--- Link collection to elem ---
					prop.addXMIValue(xmiElem);
				} else if (value instanceof SdElement) {
					IXMIObject xmiElem = (IXMIObject)((SdElement)value).accept(this, data);
					//--- Link collection to elem ---
					prop.addXMIValue(xmiElem);
				}
			}
			return prop;
		}
		//--- User types ---
		prop.setXMIValue(((SdElement)obj).accept(this, data));
		return prop;
	}
}
