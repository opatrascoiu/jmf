package uk.ac.kent.cs.kmf.templates.java;

import java.io.PrintWriter;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

import uk.ac.kent.cs.kmf.kmfstudio.Context;
import uk.ac.kent.cs.kmf.util.ILog;
import uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model;

/**
 * @author Octavian Patrascoiu
 *
 */
public class BrowserImplTemplate {
	public BrowserImplTemplate(Model model, Context context, java.io.PrintWriter out) { 
		this.model = model;
		this.context = context;
		this.out = out;
		this.log = context.getLog();
		initLocalProperties();
	}
	
	protected void initLocalProperties() {
		this.indent = context.getIndent();
		this.modelName = context.getNaming().getModelName();
		this.modelPackage = context.getNaming().getModelPackage();
		this.licenceFileName = context.getLicenseFileName();
		this.browserInterface = context.getNaming().getBrowserInterface(modelName);
		this.browserClass = context.getNaming().getBrowserClass(modelName);
		this.repositoryInterface = context.getNaming().getFullRepositoryInterface(modelName);
		this.repositoryClass = context.getNaming().getFullRepositoryClass(modelName);
		this.factoryInterface = context.getNaming().getFullFactoryInterface(modelName);
		this.factoryClass = context.getNaming().getFullFactoryClass(modelName);
		this.invokeMethodClass = context.getNaming().getInvokeMethodClass(modelName);
		this.elementInterface = context.getNaming().getElementInterface(modelName);
	}

	/**
	  * Print browser implementation
	  */
	public void generate() {
		// Print generation stamp
		context.getNaming().putStamp(browserClass, out);
		// Print the code
		// Print header
		out.println("package "+modelPackage+".repository;");
		out.println();
		out.println("import java.io.*;");
		out.println("import java.util.*;");
		out.println("import java.lang.reflect.*;");
		out.println();
		out.println("import java.awt.*;");
		out.println("import java.awt.event.*;");
		out.println("import javax.swing.*;");
		out.println("import javax.swing.event.*;");
		out.println("import javax.swing.tree.*;");
		out.println();
		out.println("import uk.ac.kent.cs.kmf.util.*;");
		out.println();
		out.println("import uk.ac.kent.cs.ocl20.*;");
		out.println("import uk.ac.kent.cs.ocl20.bridge4kmf.*;");
		out.println();
		out.println("import "+modelPackage+".*;");
		out.println();
		out.println("public class "+browserClass+" extends JFrame {");
		out.println(indent+"/** Construct the BROWSER */");
		out.println(indent+"public "+browserClass+"(String xmiFileName) {");
		out.println(indent+indent+"//--- Set title and size to full screen ---");
		out.println(indent+indent+"super(\"KMF ["+modelName+"]\");");
		out.println(indent+indent+"screenSize = getToolkit().getScreenSize();");
		out.println(indent+indent+"screenSize.setSize(screenSize.width, screenSize.height);");
		out.println(indent+indent+"setSize(screenSize);");
		out.println(indent+indent+"getContentPane().setLayout(new BorderLayout());");
		out.println(indent+indent+"//--- Create MENU ---");
		out.println(indent+indent+"JMenuBar menuBar = createMenuBar();");
		out.println(indent+indent+"getContentPane().add(menuBar, BorderLayout.NORTH);");
		out.println(indent+indent+"//--- Create EXPLORER ---");
		out.println(indent+indent+"JTabbedPane explorerPane = createExplorer();");
		out.println(indent+indent+"//--- Create DESKTOP ---");
		out.println(indent+indent+"JTabbedPane desktopPane = createDesktop();");
		out.println(indent+indent+"//--- Create OUTPUT ---");
		out.println(indent+indent+"JInternalFrame consoleFrame = createConsole();");
		out.println(indent+indent+"//--- Create SPLIT PANELS ---");
		out.println(indent+indent+"mainPanel = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);");
		out.println(indent+indent+"mainPanel.setDividerSize(dividerSize);");
		out.println(indent+indent+"mainPanel.setDividerLocation((int)(screenSize.width*mainDiv));");
		out.println(indent+indent+"mainPanel.setContinuousLayout(true);");
		out.println(indent+indent+"leftPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT);");
		out.println(indent+indent+"leftPanel.setDividerSize(dividerSize);");
		out.println(indent+indent+"leftPanel.setContinuousLayout(true);");
		out.println(indent+indent+"rightPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT);");
		out.println(indent+indent+"rightPanel.setDividerSize(dividerSize);");
		out.println(indent+indent+"rightPanel.setDividerLocation((int)(screenSize.height*rightDiv));");
		out.println(indent+indent+"rightPanel.setContinuousLayout(true);");
		out.println(indent+indent+"//--- Add components to SPLIT PANELS ---");
		out.println(indent+indent+"leftPanel.setTopComponent(explorerPane);");
		out.println(indent+indent+"rightPanel.setTopComponent(desktopPane);");
		out.println(indent+indent+"rightPanel.setBottomComponent(consoleFrame);");
		out.println(indent+indent+"mainPanel.setLeftComponent(leftPanel);");
		out.println(indent+indent+"mainPanel.setRightComponent(rightPanel);");
		out.println(indent+indent+"getContentPane().add(mainPanel, BorderLayout.CENTER);");
		out.println(indent+indent+"//--- Initialize FILE CHOOSER ---");
		out.println(indent+indent+"fileChooser = new JFileChooser();");
		out.println(indent+indent+"fileChooser.setFileFilter(new BasicFileFilter(new String[] {\"xmi\", \"hutn\"}));");
		out.println(indent+indent+"//--- Set the xmiFile ---");
		out.println(indent+indent+"this.xmiFileName = xmiFileName;");
		String rootOffset = context.getPackageOffset();
		out.println(indent+indent+"this.rootOffset = \""+rootOffset+"\";");
		out.println(indent+indent+"oclProcessor = new KmfOclProcessorImpl(xmiFileName, console);");
		out.println(indent+indent+"//--- Set the repository ---");
		out.println(indent+indent+"setRep(new "+repositoryClass+"());");
		out.println(indent+indent+"//--- Add listener for window closing event ---");
		out.println(indent+indent+"WindowListener wndCloser = new WindowAdapter() {");
		out.println(indent+indent+indent+"public void windowClosing(WindowEvent e) {");
		out.println(indent+indent+indent+indent+"System.exit(0);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"addWindowListener(wndCloser);");
		out.println(indent+indent+"show();");
		out.println(indent+indent+"this.setExtendedState(JFrame.MAXIMIZED_BOTH);");
		out.println(indent+"}");
		out.println();
		out.println(indent+"// Static constants ---");
		out.println(indent+"public static final Font font = new Font(\"dialog\", Font.PLAIN, 12);");
		out.println(indent+"public static final Dimension listSize = new Dimension(215, 6*font.getSize());");
		out.println(indent+"public static final Dimension fieldSize = new Dimension(200, 3*font.getSize());");
		out.println(indent+"public static final Dimension wndSize = new Dimension(600, 600);");
		out.println();
		out.println(indent+"/** XMI file name which contains the model */");
		out.println(indent+"protected String xmiFileName;");
		out.println(indent+"public String getXmiFileName() { return xmiFileName;}");
		out.println(indent+"public void setXmiFileName(String string) {	xmiFileName = string; }");
		out.println();
		out.println(indent+"/** OclProcessor */");
		out.println(indent+"protected OclProcessor oclProcessor;");
		out.println(indent+"public OclProcessor getOclProcessor() { return oclProcessor; }");
		out.println(indent+"public void setOclProcessor(OclProcessor processor) { oclProcessor = processor;	}");
		out.println();
		out.println(indent+"/** Root offset */");
		out.println(indent+"protected String rootOffset;");
		out.println(indent+"public String getRootOffset() { return rootOffset; }");
		out.println(indent+"public void setRootOffset(String string) { rootOffset = string; }");
		out.println();
		out.println(indent+"/** Repository */");
		out.println(indent+"protected "+repositoryInterface+" crtRep;");
		out.println(indent+"public void setRep("+repositoryInterface+" rep) {");
		out.println(indent+indent+"//--- Reset console ---");
		out.println(indent+indent+"resetConsole();");
		out.println(indent+indent+"//--- Set current repository ---");
		out.println(indent+indent+"this.crtRep = rep;");
		out.println(indent+indent+"//--- Set current repository's log ---");
		out.println(indent+indent+"crtRep.setLog(console);");
		out.println(indent+indent+"//--- Update explorer area ---");
		out.println(indent+indent+"refreshExplorer();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"// Panels");
		out.println(indent+"protected JSplitPane mainPanel;");
		out.println(indent+"protected JSplitPane leftPanel;");
		out.println(indent+"protected JSplitPane rightPanel;");
		out.println(indent+"protected Dimension screenSize;");
		out.println(indent+"protected int barHeight = 33;");
		out.println(indent+"protected double mainDiv = 0.22;");
		out.println(indent+"protected double rightDiv = 0.70;");
		out.println(indent+"protected int dividerSize = 4;");
		out.println(indent+"//--- Explorer trees ---");
		out.println(indent+"protected DefaultTreeModel factoriesModel;");
		out.println(indent+"protected JTree factoriesTree;");
		out.println(indent+"protected Vector selectedLifecycleNodes = new Vector();");
		out.println(indent+"protected DefaultTreeModel elementsModel;");
		out.println(indent+"protected JTree elementsTree;");
		out.println(indent+"protected Vector selectedElementNodes = new Vector();");
		out.println(indent+"//--- View, Edit and OCL desktops ---");
		out.println(indent+"protected JDesktopPane viewDesktop;");
		out.println(indent+"protected int viewCount;");
		out.println(indent+"protected JDesktopPane editDesktop;");
		out.println(indent+"protected int editCount;");
		out.println(indent+"protected JDesktopPane evalDesktop;");
		out.println(indent+"protected int evalCount;");
		out.println(indent+"protected JDesktopPane buildDesktop;");
		out.println(indent+"protected int buildCount;");
		out.println(indent+"//--- Console ---");
		out.println(indent+"protected ILog console = new ConsoleLog();");
		out.println(indent+"public ILog "+context.getNaming().getGetter("log")+"() {");
		out.println(indent+indent+"return console;");
		out.println(indent+"}");
		out.println(indent+"//--- File chooser ---");
		out.println(indent+"protected JFileChooser fileChooser;");
		out.println(indent+"protected class BasicFileFilter extends javax.swing.filechooser.FileFilter {");
		out.println(indent+indent+"String ext[];");
		out.println(indent+indent+"public BasicFileFilter() {");
		out.println(indent+indent+indent+"this.ext = new String[] {\"\"};");
		out.println(indent+indent+"}");
		out.println(indent+indent+"public BasicFileFilter(String ext[]) {");
		out.println(indent+indent+indent+"this.ext = new String[ext.length];");
		out.println(indent+indent+indent+"for(int i=0; i<ext.length; i++) this.ext[i] = ext[i];");
		out.println(indent+indent+"}");
		out.println(indent+indent+"public boolean accept(File f) {");
		out.println(indent+indent+indent+"if (f.isDirectory()) return true;");
		out.println(indent+indent+indent+"String path = f.getPath();");
		out.println(indent+indent+indent+"int pos = path.lastIndexOf(\".\");");
		out.println(indent+indent+indent+"if (pos == -1) return true;");
		out.println(indent+indent+indent+"if (ext.length == 0) return true;");
		out.println(indent+indent+indent+"String ext1 = path.substring(pos+1);");
		out.println(indent+indent+indent+"for(int i=0; i<ext.length; i++) {");
		out.println(indent+indent+indent+indent+"if (ext[i].equals(\"\")) return true;");
		out.println(indent+indent+indent+indent+"if (ext1.equalsIgnoreCase(ext[i])) return true;");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+indent+"return false;");
		out.println(indent+indent+"}");
		out.println(indent+indent+"public String getDescription() {");
		out.println(indent+indent+indent+"if (ext.length == 0) return \"*.*\";");
		out.println(indent+indent+indent+"String str = new String();");
		out.println(indent+indent+indent+"str += \"*.\"+ext[0];");
		out.println(indent+indent+indent+"for(int i=1; i<ext.length; i++) {");
		out.println(indent+indent+indent+indent+"str += \", *.\"+ext[i];");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+indent+"return str;");
		out.println(indent+indent+"}");
		out.println(indent+"};");
		out.println(indent+"//--- File name ---");
		out.println(indent+"protected String crtFileName;");
		out.println();
		out.println();
		out.println(indent+"/** Create the MENU */");
		out.println(indent+"protected JMenuBar createMenuBar() {");
		out.println(indent+indent+"final JMenuBar menuBar = new JMenuBar();");
		out.println();
		out.println(indent+indent+"//--- Add FILE items ---");
		out.println(indent+indent+"JMenu fileMenu = new JMenu(\"File\");");
		out.println(indent+indent+"fileMenu.setMnemonic('f');");
		out.println(indent+indent+"//--- Add NEW ---");
		out.println(indent+indent+"JMenuItem item = new JMenuItem(\"New\");");
		out.println(indent+indent+"item.setMnemonic('n');");
		out.println(indent+indent+"ActionListener lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"newFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"//--- Add OPEN item ---");
		out.println(indent+indent+"item = new JMenuItem(\"Open ...\");");
		out.println(indent+indent+"item.setMnemonic('o');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"openFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"//--- Add CLOSE item ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close\");");
		out.println(indent+indent+"item.setMnemonic('c');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"fileMenu.addSeparator();");
		out.println(indent+indent+"// Add SAVE item");
		out.println(indent+indent+"item = new JMenuItem(\"Save\");");
		out.println(indent+indent+"item.setMnemonic('s');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"saveFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"// Add SAVE AS item");
		out.println(indent+indent+"item = new JMenuItem(\"Save As ...\");");
		out.println(indent+indent+"item.setMnemonic('a');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"saveAsFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"fileMenu.addSeparator();");
		out.println(indent+indent+"//--- Create EXIT item ---");
		out.println(indent+indent+"item = new JMenuItem(\"Exit\");");
		out.println(indent+indent+"item.setMnemonic('x');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"exitFileAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"fileMenu.add(item);");
		out.println(indent+indent+"//--- Add FILE ---");
		out.println(indent+indent+"menuBar.add(fileMenu);");
		out.println();
		out.println(indent+indent+"//--- Add VIEW items ---");
		out.println(indent+indent+"JMenu viewMenu = new JMenu(\"View\");");
		out.println(indent+indent+"viewMenu.setMnemonic('v');");
		out.println(indent+indent+"//--- Add REFRESH EXPLORER ---");
		out.println(indent+indent+"item = new JMenuItem(\"Refresh Explorer\");");
		out.println(indent+indent+"item.setMnemonic('x');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"refreshExplorer();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"viewMenu.add(item);");
		out.println(indent+indent+"//--- Add REFRESH VIEW ---");
		out.println(indent+indent+"item = new JMenuItem(\"Refresh View\");");
		out.println(indent+indent+"item.setMnemonic('v');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"refreshViewDesktop();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"viewMenu.add(item);");
		out.println(indent+indent+"//--- Add REFRESH EDIT ---");
		out.println(indent+indent+"item = new JMenuItem(\"Refresh Edit\");");
		out.println(indent+indent+"item.setMnemonic('d');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"refreshEditDesktop();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"viewMenu.add(item);");
		out.println(indent+indent+"//--- Add REFRESH BUILD ---");
		out.println(indent+indent+"item = new JMenuItem(\"Refresh Lifecycle\");");
		out.println(indent+indent+"item.setMnemonic('l');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"refreshBuildDesktop();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"viewMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"viewMenu.addSeparator();");
		out.println(indent+indent+"//--- Add REFRESH ---");
		out.println(indent+indent+"item = new JMenuItem(\"Refresh All\");");
		out.println(indent+indent+"item.setMnemonic('r');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"refreshExplorer();");
		out.println(indent+indent+indent+indent+"refreshDesktop();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"viewMenu.add(item);");
		out.println(indent+indent+"//--- Add View ---");
		out.println(indent+indent+"menuBar.add(viewMenu);");
		out.println();
		out.println(indent+indent+"//--- Add EDIT items ---");
		out.println(indent+indent+"JMenu editMenu = new JMenu(\"Edit\");");
		out.println(indent+indent+"editMenu.setMnemonic('e');");
		out.println(indent+indent+"//--- Add BUILD ELEMENT ---");
		out.println(indent+indent+"item = new JMenuItem(\"Build Element\");");
		out.println(indent+indent+"item.setMnemonic('b');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"buildEditAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"editMenu.add(item);");
		out.println(indent+indent+"//--- Add DELETE ELEMENT ---");
		out.println(indent+indent+"item = new JMenuItem(\"Delete Element\");");
		out.println(indent+indent+"item.setMnemonic('d');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"deleteEditAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"editMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"editMenu.addSeparator();");
		out.println(indent+indent+"//--- Add VIEW PROPERTIES---");
		out.println(indent+indent+"item = new JMenuItem(\"View Properties\");");
		out.println(indent+indent+"item.setMnemonic('v');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"classViewAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"editMenu.add(item);");
		out.println(indent+indent+"//--- Add EDIT PROPERTIES ---");
		out.println(indent+indent+"item = new JMenuItem(\"Edit Properties\");");
		out.println(indent+indent+"item.setMnemonic('e');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"classEditAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"editMenu.add(item);");
		out.println(indent+indent+"//--- Add Edit ---");
		out.println(indent+indent+"menuBar.add(editMenu);");
		out.println();
		out.println(indent+indent+"//--- Add TOOLS items ---");
		out.println(indent+indent+"JMenu toolsMenu = new JMenu(\"Tools\");");
		out.println(indent+indent+"toolsMenu.setMnemonic('t');");
		out.println(indent+indent+"//--- Add PARSE ---");
		out.println(indent+indent+"item = new JMenuItem(\"Parse\");");
		out.println(indent+indent+"item.setMnemonic('p');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"parseToolsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"toolsMenu.add(item);");
		out.println(indent+indent+"//--- Add EVALUATE ---");
		out.println(indent+indent+"item = new JMenuItem(\"Evaluate\");");
		out.println(indent+indent+"item.setMnemonic('e');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"evaluateToolsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"toolsMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"toolsMenu.addSeparator();");
		out.println(indent+indent+"//--- Add PARSE ALL ---");
		out.println(indent+indent+"item = new JMenuItem(\"Parse All\");");
		out.println(indent+indent+"item.setMnemonic('r');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"parseAllToolsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"toolsMenu.add(item);");
		out.println(indent+indent+"//--- Add EVALUATE ALL ---");
		out.println(indent+indent+"item = new JMenuItem(\"Evaluate All\");");
		out.println(indent+indent+"item.setMnemonic('v');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"evaluateAllToolsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"toolsMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"toolsMenu.addSeparator();");
		out.println(indent+indent+"//--- Add OCL EVALUATION item ---");
		out.println(indent+indent+"item = new JMenuItem(\"OCL Evaluation\");");
		out.println(indent+indent+"item.setMnemonic('o');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"oclEvaluationToolsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"toolsMenu.add(item);");
		out.println(indent+indent+"//--- Add Tools ---");
		out.println(indent+indent+"menuBar.add(toolsMenu);");
		out.println();
		out.println(indent+indent+"//--- Add WINDOW items ---");
		out.println(indent+indent+"JMenu windowMenu = new JMenu(\"Window\");");
		out.println(indent+indent+"windowMenu.setMnemonic('w');");
		out.println(indent+indent+"//--- Add CLOSE ALL VIEWS ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close All Views\");");
		out.println(indent+indent+"item.setMnemonic('v');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeAllViewWindowsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"windowMenu.add(item);");
		out.println(indent+indent+"//--- Add CLOSE ALL EDIT ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close All Editors\");");
		out.println(indent+indent+"item.setMnemonic('e');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeAllEditWindowsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"windowMenu.add(item);");
		out.println(indent+indent+"//--- Add CLOSE ALL OCL ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close All Evaluators\");");
		out.println(indent+indent+"item.setMnemonic('a');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeAllEvalWindowsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"windowMenu.add(item);");
		out.println(indent+indent+"//--- Add CLOSE ALL BUILD ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close All Lifecycles\");");
		out.println(indent+indent+"item.setMnemonic('b');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeAllBuildWindowsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"windowMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"windowMenu.addSeparator();");
		out.println(indent+indent+"//--- Add CLOSE ALL ---");
		out.println(indent+indent+"item = new JMenuItem(\"Close All\");");
		out.println(indent+indent+"item.setMnemonic('l');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"closeAllWindowsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"windowMenu.add(item);");
		out.println(indent+indent+"//--- Add Window ---");
		out.println(indent+indent+"menuBar.add(windowMenu);");
		out.println();
		out.println(indent+indent+"//--- Add HELP items ---");
		out.println(indent+indent+"JMenu helpMenu = new JMenu(\"Help\");");
		out.println(indent+indent+"helpMenu.setMnemonic('h');");
		out.println(indent+indent+"//--- Add README ---");
		out.println(indent+indent+"item = new JMenuItem(\"Readme\");");
		out.println(indent+indent+"item.setMnemonic('r');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"readmeHelpAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"helpMenu.add(item);");
		out.println(indent+indent+"//--- Add a separator ---");
		out.println(indent+indent+"helpMenu.addSeparator();");
		out.println(indent+indent+"//--- Add ABOUT ---");
		out.println(indent+indent+"item = new JMenuItem(\"About "+modelName+"\");");
		out.println(indent+indent+"item.setMnemonic('a');");
		out.println(indent+indent+"lst = new ActionListener() {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"aboutHelpAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"};");
		out.println(indent+indent+"item.addActionListener(lst);");
		out.println(indent+indent+"helpMenu.add(item);");
		out.println(indent+indent+"//--- Add Help ---");
		out.println(indent+indent+"menuBar.add(helpMenu);");
		out.println();
		out.println(indent+indent+"return menuBar;");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Create the EXPLORER */");
		out.println(indent+"protected JTabbedPane createExplorer() {");
		out.println(indent+indent+"//--- Create LifecycleS and ELEMENTS frames ---");
		out.println(indent+indent+"JInternalFrame factoriesFrame = new JInternalFrame(\"Lifecycle Explorer\", true);");
		out.println(indent+indent+"JInternalFrame elementsFrame = new JInternalFrame(\"Elements Explorer\", true);");
		out.println(indent+indent+"//--- Create the LifecycleS and ELEMENTS models ---");
		out.println(indent+indent+"DefaultMutableTreeNode factoriesRoot = new DefaultMutableTreeNode(\"Lifecycle\", true);");
		out.println(indent+indent+"factoriesModel = new DefaultTreeModel(factoriesRoot);");
		out.println(indent+indent+"DefaultMutableTreeNode elementsRoot = new DefaultMutableTreeNode(\"Elements\", true);");
		out.println(indent+indent+"elementsModel = new DefaultTreeModel(elementsRoot);");
		out.println(indent+indent+"//--- Create the LifecycleS and ELEMENTS JTrees ---");
		out.println(indent+indent+"factoriesTree = new JTree(factoriesModel);");
		out.println(indent+indent+"factoriesTree.setShowsRootHandles(true);");
		out.println(indent+indent+"factoriesTree.setEditable(false);");
		out.println(indent+indent+"factoriesTree.addTreeSelectionListener(new TreeSelectionListener() {");
		out.println(indent+indent+indent+"public void valueChanged(TreeSelectionEvent e) {");
		out.println(indent+indent+indent+indent+"selectLifecyclesAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"});");
		out.println(indent+indent+"elementsTree = new JTree(elementsModel);");
		out.println(indent+indent+"elementsTree.setShowsRootHandles(true);");
		out.println(indent+indent+"elementsTree.setEditable(false);");
		out.println(indent+indent+"elementsTree.addTreeSelectionListener(new TreeSelectionListener() {");
		out.println(indent+indent+indent+"public void valueChanged(TreeSelectionEvent e) {");
		out.println(indent+indent+indent+indent+"selectElementsAction(e);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"});");
		out.println(indent+indent+"//--- Add the LIFECYCLE and ELEMENTS JTrees to frames ---");
		out.println(indent+indent+"JScrollPane factoriesScroll = new JScrollPane();");
		out.println(indent+indent+"factoriesScroll.getViewport().add(factoriesTree);");
		out.println(indent+indent+"factoriesFrame.getContentPane().add(factoriesScroll);");
		out.println(indent+indent+"factoriesFrame.setVisible(true);");
		out.println(indent+indent+"JScrollPane elementsScroll = new JScrollPane();");
		out.println(indent+indent+"elementsScroll.getViewport().add(elementsTree);");
		out.println(indent+indent+"elementsFrame.getContentPane().add(elementsScroll);");
		out.println(indent+indent+"elementsFrame.setVisible(true);");
		out.println(indent+indent+"//--- Create the TABBEDPANE ---");
		out.println(indent+indent+"JTabbedPane explorerPane = new JTabbedPane();");
		out.println(indent+indent+"explorerPane.addTab(\"Elements\", elementsFrame);");
		out.println(indent+indent+"explorerPane.addTab(\"Lifecycle\", factoriesFrame);");
		out.println(indent+indent+"return explorerPane;");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Create the DESKTOP */");
		out.println(indent+"protected JTabbedPane createDesktop() {");
		out.println(indent+indent+"//--- Create the VIEW, EDIT and OCL desktops ---");
		out.println(indent+indent+"viewDesktop = new JDesktopPane();");
		out.println(indent+indent+"editDesktop = new JDesktopPane();");
		out.println(indent+indent+"evalDesktop = new JDesktopPane();");
		out.println(indent+indent+"buildDesktop = new JDesktopPane();");
		out.println(indent+indent+"//--- Create the TABBEDPANE ---");
		out.println(indent+indent+"JTabbedPane desktopPane = new JTabbedPane();");
		out.println(indent+indent+"desktopPane.addTab(\"View\", viewDesktop);");
		out.println(indent+indent+"desktopPane.addTab(\"Edit\", editDesktop);");
		out.println(indent+indent+"desktopPane.addTab(\"Evaluate\", evalDesktop);");
		out.println(indent+indent+"desktopPane.addTab(\"Lifecycle\", buildDesktop);");
		out.println(indent+indent+"return desktopPane;");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Create the CONSOLE */");
		out.println(indent+"protected JInternalFrame createConsole() {");
		out.println(indent+indent+"JInternalFrame frame = new JInternalFrame(\"Console\", true);");
		out.println(indent+indent+"//--- Create console panel ---");
		out.println(indent+indent+"console = new ConsoleLog();");
		out.println(indent+indent+"((ConsoleLog)console).setEditable(false);");
		out.println(indent+indent+"JScrollPane scroller = new JScrollPane((ConsoleLog)console);");
		out.println(indent+indent+"frame.getContentPane().add(scroller);");
		out.println(indent+indent+"frame.setVisible(true);");
		out.println(indent+indent+"return frame;");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Reset the BROWSER */");
		out.println(indent+"protected void resetBrowser() {");
		out.println(indent+indent+"/** Reset file name */");
		out.println(indent+indent+"crtFileName = null;");
		out.println(indent+indent+"/** Reset repository */");
		out.println(indent+indent+"crtRep = null;");
		out.println(indent+indent+"/** Reset EXPLORER */");
		out.println(indent+indent+"refreshExplorer();");
		out.println(indent+indent+"/** Reset DESKTOP */");
		out.println(indent+indent+"resetDesktop();");
		out.println(indent+indent+"/** Reset output area */");
		out.println(indent+indent+"resetConsole();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Reset the DESKTOP */");
		out.println(indent+"protected void resetDesktop() {");
		out.println(indent+indent+"//--- Reset all desktops ---");
		out.println(indent+indent+"resetViewDesktop();");
		out.println(indent+indent+"resetEditDesktop();");
		out.println(indent+indent+"resetEvalDesktop();");
		out.println(indent+indent+"resetBuildDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Reset the VIEW DESKTOP */");
		out.println(indent+"protected void resetViewDesktop() {");
		out.println(indent+indent+"//--- Close all VIEW frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = viewDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) frames[i].setVisible(false);");
		out.println(indent+indent+"//--- Reset counter ---");
		out.println(indent+indent+"viewCount = 0;");
		out.println(indent+"}");
		out.println(indent+"/** Reset the EDIT DESKTOP */");
		out.println(indent+"protected void resetEditDesktop() {");
		out.println(indent+indent+"//--- Close all EDIT frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = editDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) frames[i].setVisible(false);");
		out.println(indent+indent+"//--- Reset counter ---");
		out.println(indent+indent+"editCount = 0;");
		out.println(indent+"}");
		out.println(indent+"/** Reset the EVAL DESKTOP */");
		out.println(indent+"protected void resetEvalDesktop() {");
		out.println(indent+indent+"//--- Close all EVAL frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = evalDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) frames[i].setVisible(false);");
		out.println(indent+indent+"//--- Reset counter ---");
		out.println(indent+indent+"evalCount = 0;");
		out.println(indent+"}");
		out.println(indent+"/** Reset the BUILD DESKTOP */");
		out.println(indent+"protected void resetBuildDesktop() {");
		out.println(indent+indent+"//--- Close all BUILD frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = buildDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) frames[i].setVisible(false);");
		out.println(indent+indent+"//--- Reset counter ---");
		out.println(indent+indent+"buildCount = 0;");
		out.println(indent+"}");
		out.println(indent+"/** Reset the CONSOLE */");
		out.println(indent+"protected void resetConsole() {");
		out.println(indent+"  console.reset();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Refresh EXPLORER */");
		out.println(indent+"protected void refreshExplorer() {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"DefaultMutableTreeNode root = crtRep.toJTree();");
		out.println(indent+indent+"factoriesModel.setRoot(root.getChildAt(0));");
		out.println(indent+indent+"elementsModel.setRoot(root.getChildAt(1));");
		out.println(indent+"}");
		out.println();
		String viewEditFrameClass = context.getNaming().getViewEditFrameClass(modelName);
		out.println(indent+"/** Refresh DESKTOP */");
		out.println(indent+"protected void refreshDesktop() {");
		out.println(indent+indent+"//--- Refresh all desktops ---");
		out.println(indent+indent+"refreshViewDesktop();");
		out.println(indent+indent+"refreshEditDesktop();");
		out.println(indent+indent+"refreshEvalDesktop();");
		out.println(indent+indent+"refreshBuildDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Refresh VIEW DESKTOP */");
		out.println(indent+"protected void refreshViewDesktop() {");
		out.println(indent+indent+"//--- Refresh all VIEW frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = viewDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) (("+viewEditFrameClass+")frames[i]).refreshAction();");
		out.println(indent+"}");
		out.println(indent+"/** Refresh EDIT DESKTOP */");
		out.println(indent+"protected void refreshEditDesktop() {");
		out.println(indent+indent+"//--- Refresh all EDIT frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = editDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) (("+viewEditFrameClass+")frames[i]).refreshAction();");
		out.println(indent+"}");
		out.println(indent+"/** Refresh EVAL DESKTOP */");
		out.println(indent+"protected void refreshEvalDesktop() {");
		out.println(indent+"}");
		out.println(indent+"/** Refresh BUILD DESKTOP */");
		out.println(indent+"protected void refreshBuildDesktop() {");
		out.println(indent+indent+"//--- Refresh all BUILD frames ---");
		out.println(indent+indent+"JInternalFrame frames[] = buildDesktop.getAllFrames();");
		out.println(indent+indent+"for(int i=0; i<frames.length; i++) (("+context.getNaming().getInvokeMethodClass(modelName)+")frames[i]).refreshAction();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Refresh CONSOLE */");
		out.println(indent+"protected void refreshConsole() {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/**");
		out.println(indent+"  *  MENU actions");
		out.println(indent+"  */");
		out.println(indent+"/** Create a new file */");
		out.println(indent+"protected void newFileAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Set current fileName to null ---");
		out.println(indent+indent+"crtFileName = null;");
		out.println(indent+indent+"//--- Create a new repository ---");
		out.println(indent+indent+"crtRep = new "+repositoryClass+"();");
		out.println(indent+indent+"//--- Refresh explorer area ---");
		out.println(indent+indent+"refreshExplorer();");
		out.println(indent+indent+"//--- Reset output area ---");
		out.println(indent+indent+"refreshConsole();");
		out.println(indent+"}");
		out.println(indent+"/** Open a file */");
		out.println(indent+"protected void openFileAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Open choose file dialog ---");
		out.println(indent+indent+"fileChooser.setDialogTitle(\"Open\");");
		out.println(indent+indent+"fileChooser.setApproveButtonText(\"Open\");");
		out.println(indent+indent+"fileChooser.setApproveButtonToolTipText(\"Open repository\");");
		out.println(indent+indent+"if (fileChooser.showOpenDialog("+browserClass+".this) != JFileChooser.APPROVE_OPTION) return;");
		out.println(indent+indent+"//--- Get file name ---");
		out.println(indent+indent+"File file = fileChooser.getSelectedFile();");
		out.println(indent+indent+"crtFileName = file.getAbsolutePath();");
		out.println(indent+indent+"//--- Load the repository ---");
		out.println(indent+indent+""+repositoryClass+" rep1 = null;");
		out.println(indent+indent+"if (crtFileName.endsWith(\"xmi\")) {");
		out.println(indent+indent+indent+"if (crtRep == null) crtRep = new "+repositoryClass+"(console);");
		if (context.isGenerateID()) {
			out.println(indent+indent+indent+""+context.getNaming().getFactoryClass(modelName)+".resetId();");
		}
		out.println(indent+indent+indent+"rep1 = ("+repositoryClass+")crtRep.loadXMI(crtFileName);");
		out.println(indent+indent+"} else if (crtFileName.endsWith(\"hutn\")) {");
		out.println(indent+indent+indent+"console.reportMessage(\"HUTN loader is not implemented\");");
		out.println(indent+indent+"}");
		out.println(indent+indent+"//--- Reset output area ---");
		out.println(indent+indent+"if (rep1 != null) {");
		out.println(indent+indent+indent+"crtRep = rep1;");
		out.println(indent+indent+indent+"//--- Refresh explorer area ---");
		out.println(indent+indent+indent+"refreshExplorer();");
		out.println(indent+indent+indent+"//--- Add message to output ---");
		out.println(indent+indent+indent+"console.reportMessage(\"Load repository from '\"+crtFileName+\"'\");");
		out.println(indent+indent+"} else {");
		out.println(indent+indent+indent+"console.reportMessage(\"Error while reading input file '\"+crtFileName+\"'\");");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** Close current file */");
		out.println(indent+"protected void closeFileAction(ActionEvent e) {");
		out.println(indent+indent+"saveFileAction(e);");
		out.println(indent+"}");
		out.println(indent+"/** Save current file */");
		out.println(indent+"protected void saveFileAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"if (crtFileName != null) {;");
		out.println(indent+indent+indent+"//--- Save the repository ---");
		out.println(indent+indent+indent+"if (crtFileName.endsWith(\"xmi\")) {");
		out.println(indent+indent+indent+indent+"crtRep.saveXMI(crtFileName);");
		out.println(indent+indent+indent+"} else if (crtFileName.endsWith(\"hutn\")) {");
		out.println(indent+indent+indent+indent+"crtRep.saveHUTN(crtFileName);");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+indent+"//--- Add message to output ---");
		out.println(indent+indent+indent+"console.reportMessage(\"Save repository to '\"+crtFileName+\"'\");");
		out.println(indent+indent+"} else {");
		out.println(indent+indent+indent+"//--- Choose file and save ---");
		out.println(indent+indent+indent+"saveAsFileAction(e);");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** Save current file as a new file */");
		out.println(indent+"protected void saveAsFileAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"fileChooser.setDialogTitle(\"Save\");");
		out.println(indent+indent+"fileChooser.setApproveButtonText(\"Save\");");
		out.println(indent+indent+"fileChooser.setApproveButtonToolTipText(\"Save repository\");");
		out.println(indent+indent+"if (fileChooser.showOpenDialog("+browserClass+".this) != JFileChooser.APPROVE_OPTION) return;");
		out.println(indent+indent+"//--- Get file name ---");
		out.println(indent+indent+"File file = fileChooser.getSelectedFile();");
		out.println(indent+indent+"crtFileName = file.getAbsolutePath();");
		out.println(indent+indent+"//--- Save the repository ---");
		out.println(indent+indent+"if (crtFileName.endsWith(\"xmi\")) {");
		out.println(indent+indent+indent+"crtRep.saveXMI(crtFileName);");
		out.println(indent+indent+"} else if (crtFileName.endsWith(\"hutn\")) {");
		out.println(indent+indent+indent+"crtRep.saveHUTN(crtFileName);");
		out.println(indent+indent+"}");
		out.println(indent+indent+"//--- Add message to output ---");
		out.println(indent+indent+"console.reportMessage(\"Save repository to '\"+crtFileName+\"'\");");
		out.println(indent+"}");
		out.println(indent+"/** Exit */");
		out.println(indent+"protected void exitFileAction(ActionEvent e) {");
		out.println(indent+indent+"saveAsFileAction(e);");
		out.println(indent+indent+"if (crtFileName != null) {");
		out.println(indent+indent+indent+"File file = new File(\"Repository.log\");");
		out.println(indent+indent+indent+"file.delete();");
		out.println(indent+indent+"}");
		out.println(indent+indent+"System.exit(0);");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Refresh view */");
		out.println(indent+"protected void refreshViewAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"//--- Refresh EXPLORER ---");
		out.println(indent+indent+"refreshExplorer();");
		out.println(indent+indent+"//--- Refresh DESKTOP ---");
		out.println(indent+indent+"refreshDesktop();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Build an object */");
		out.println(indent+"protected void buildEditAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"for(int i=0; i<selectedLifecycleNodes.size(); i++) {");
		out.println(indent+indent+indent+"//--- Get the Lifecycle ---");
		out.println(indent+indent+indent+"DefaultMutableTreeNode methodNode = (DefaultMutableTreeNode)selectedLifecycleNodes.elementAt(i);");
		out.println(indent+indent+indent+"Object methodObject = methodNode.getUserObject();");
		out.println(indent+indent+indent+"if (!(methodObject instanceof Method)) continue;");
		out.println(indent+indent+indent+"Method method = (Method)methodObject;");
		out.println(indent+indent+indent+"DefaultMutableTreeNode factoryNode = (DefaultMutableTreeNode)methodNode.getParent();");
		out.println(indent+indent+indent+"Object factoryObject = factoryNode.getUserObject();");
		out.println(indent+indent+indent+"if (!(factoryObject instanceof "+factoryClass+")) continue;");
		out.println(indent+indent+indent+""+factoryInterface+" factory = ("+factoryClass+")factoryObject;");
		out.println(indent+indent+indent+"//--- Make Lifecycle frame ---");
		out.println(indent+indent+indent+""+invokeMethodClass+" buildFrame = new "+invokeMethodClass+"(crtRep, this, factory, method);");
		out.println(indent+indent+indent+"//--- Set Lifecycle's location ---");
		out.println(indent+indent+indent+"if (buildDesktop.getAllFrames().length == 0) buildCount = 0;");
		out.println(indent+indent+indent+"int x1 = buildCount/20;");
		out.println(indent+indent+indent+"if (x1 == 3) x1 = 0;");
		out.println(indent+indent+indent+"int x = buildCount%20+10*x1;");
		out.println(indent+indent+indent+"int y = buildCount%20;");
		out.println(indent+indent+indent+"buildFrame.setLocation(25*x, 25*y);");
		out.println(indent+indent+indent+"//--- Add Lifecycle ---");
		out.println(indent+indent+indent+"buildDesktop.add(buildFrame);");
		out.println(indent+indent+indent+"buildFrame.setVisible(true);");
		out.println(indent+indent+indent+"buildCount++;");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** Delete an object */");
		out.println(indent+"protected void deleteEditAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
		out.println(indent+indent+indent+"//--- Get the ELEMENT ---");
		out.println(indent+indent+indent+"Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
		out.println(indent+indent+indent+"if (!(userObject instanceof "+elementInterface+")) continue;");
		out.println(indent+indent+indent+elementInterface+" element = ("+elementInterface+")userObject;");
		out.println(indent+indent+indent+"//--- Remove from repository ---");
		out.println(indent+indent+indent+"String classPathName = element.toString();");
		out.println(indent+indent+indent+"int pos = classPathName.indexOf(\"'\");");
		out.println(indent+indent+indent+"if (pos != -1) classPathName = classPathName.substring(0, pos-1);");
		out.println(indent+indent+indent+"crtRep.getElements(classPathName).remove(element);");
		out.println(indent+indent+indent+"//--- Delete links ---");
		out.println(indent+indent+indent+"element.delete();");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** View an object */");
		out.println(indent+"protected void classViewAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
		out.println(indent+indent+indent+"//--- Get the ELEMENT ---");
		out.println(indent+indent+indent+"Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
		out.println(indent+indent+indent+"if (!(userObject instanceof "+elementInterface+")) continue;");
		out.println(indent+indent+indent+""+elementInterface+" element = ("+elementInterface+")userObject;");
		out.println(indent+indent+indent+"//--- Make the VIEW frame ---");
		out.println(indent+indent+"	"+context.getNaming().getViewVisitorInterface(modelName)+" view = new "+context.getNaming().getViewVisitorClass(modelName)+"(oclProcessor);");
		out.println(indent+indent+indent+"JInternalFrame viewFrame = (JInternalFrame)element.accept(view, null);");
		out.println(indent+indent+indent+"//--- Set the VIEW's location ---");
		out.println(indent+indent+indent+"if (viewDesktop.getAllFrames().length == 0) viewCount = 0;");
		out.println(indent+indent+indent+"int x1 = viewCount/20;");
		out.println(indent+indent+indent+"if (x1 == 3) x1 = 0;");
		out.println(indent+indent+indent+"int x = viewCount%20+10*x1;");
		out.println(indent+indent+indent+"int y = viewCount%20;");
		out.println(indent+indent+indent+"viewFrame.setLocation(25*x, 25*y);");
		out.println(indent+indent+indent+"//--- Add VIEW ---");
		out.println(indent+indent+indent+"viewDesktop.add(viewFrame);");
		out.println(indent+indent+indent+"viewFrame.setVisible(true);");
		out.println(indent+indent+indent+"viewCount++;");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** Edit an object */");
		out.println(indent+"protected void classEditAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
		out.println(indent+indent+"	//--- Get the ELEMENT ---");
		out.println(indent+indent+"	Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
		out.println(indent+indent+"	if (!(userObject instanceof "+elementInterface+")) continue;");
		out.println(indent+indent+"	"+elementInterface+" element = ("+elementInterface+")userObject;");
		out.println(indent+indent+"	//--- Make the EDIT frame ---");
		out.println(indent+indent+"	"+context.getNaming().getEditVisitorInterface(modelName)+" edit = new "+context.getNaming().getEditVisitorClass(modelName)+"(oclProcessor);");
		out.println(indent+indent+"	JInternalFrame editFrame = (JInternalFrame)element.accept(edit, crtRep);");
		out.println(indent+indent+"	//--- Set the EDIT's location ---");
		out.println(indent+indent+"	if (editDesktop.getAllFrames().length == 0) editCount = 0;");
		out.println(indent+indent+"	int x1 = editCount/20;");
		out.println(indent+indent+"	if (x1 == 3) x1 = 0;");
		out.println(indent+indent+"	int x = editCount%20+10*x1;");
		out.println(indent+indent+"	int y = editCount%20;");
		out.println(indent+indent+"	editFrame.setLocation(25*x, 25*y);");
		out.println(indent+indent+"	//--- Add EDIT ---");
		out.println(indent+indent+"	editDesktop.add(editFrame);");
		out.println(indent+indent+"	editFrame.setVisible(true);");
		out.println(indent+indent+"	editCount++;");
		out.println(indent+"	}");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Parse invariants for current object */");
		if (context.isGenerateInvariant()) {
			out.println(indent+context.getNaming().getParseAllVisitorInterface(modelName)+" parseAllVis = new "+context.getNaming().getParseAllVisitorClass(modelName)+"();");
		}
		out.println(indent+"protected void parseToolsAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		if (context.isGenerateInvariant()) {
			out.println(indent+indent+"Map data = new HashMap();");
			out.println(indent+indent+"data.put(\"log\", crtRep."+context.getNaming().getGetter("log")+"());");
			out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
			out.println(indent+indent+indent+"//--- Get the ELEMENT ---");
			out.println(indent+indent+indent+"Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
			out.println(indent+indent+indent+"if (!(userObject instanceof "+elementInterface+")) continue;");
			out.println(indent+indent+indent+elementInterface+" element = ("+elementInterface+")userObject;");
			out.println(indent+indent+indent+"//--- Parse ELEMENT's constraints ---");
			out.println(indent+indent+indent+"element.accept(parseAllVis, data);");
			out.println(indent+indent+indent+"//--- Refresh OUTPUT ---");
			out.println(indent+indent+indent+"refreshConsole();");
			out.println(indent+indent+"}");
		}
		out.println(indent+"}");
		out.println(indent+"/** Evaluate invariants for current object */");
		if (context.isGenerateInvariant()) {
			out.println(indent+context.getNaming().getEvaluateAllVisitorInterface(modelName)+" evaluateAllVis = new "+context.getNaming().getEvaluateAllVisitorClass(modelName)+"();");
		}
		out.println(indent+"protected void evaluateToolsAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		if (context.isGenerateInvariant()) {
			out.println(indent+indent+"Map data = new HashMap();");
			out.println(indent+indent+"data.put(\"log\", crtRep."+context.getNaming().getGetter("log")+"());");
//			out.println(indent+indent+"data.put(\"env\", crtRep."+Naming.getGetter("env")+"());");
			out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
			out.println(indent+indent+indent+"//--- Get the ELEMENT ---");
			out.println(indent+indent+indent+"Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
			out.println(indent+indent+indent+"if (!(userObject instanceof "+elementInterface+")) continue;");
			out.println(indent+indent+indent+elementInterface+" element = ("+elementInterface+")userObject;");
			out.println(indent+indent+indent+"//--- Analyse ELEMENT's constraints ---");
			out.println(indent+indent+indent+"element.accept(evaluateAllVis, data);");
			out.println(indent+indent+indent+"//--- Update OUTPUT ---");
			out.println(indent+indent+indent+"refreshConsole();");
			out.println(indent+indent+"}");
		}
		out.println(indent+"}");
		out.println(indent+"/** Parse all invariants */");
		out.println(indent+"protected void parseAllToolsAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		if (context.isGenerateInvariant()) {
			out.println(indent+indent+"//--- Parse all the OCL invariants from the repository ---");
			out.println(indent+indent+"crtRep.parseInvariants();");
			out.println(indent+indent+"//--- Update OUTPUT area ---");
			out.println(indent+indent+"refreshConsole();");
		}
		out.println(indent+"}");
		out.println(indent+"/** Evaluate all invariants */");
		out.println(indent+"protected void evaluateAllToolsAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		if (context.isGenerateInvariant()) {
			out.println(indent+indent+"//--- Parse all the OCL invariants from the repository ---");
			out.println(indent+indent+"crtRep.evaluateInvariants();");
			out.println(indent+indent+"//--- Update output area ---");
			out.println(indent+indent+"refreshConsole();");
		}
		out.println(indent+"}");
		out.println(indent+"/** Run-time invariant evaluation */");
		out.println(indent+"protected void oclEvaluationToolsAction(ActionEvent e) {");
		out.println(indent+indent+"if (crtRep == null) return;");
		if (context.isGenerateInvariant()) {
			out.println(indent+indent+"for(int i=0; i<selectedElementNodes.size(); i++) {");
			out.println(indent+indent+indent+"//--- Get the ELEMENT ---");
			out.println(indent+indent+indent+"Object userObject = ((DefaultMutableTreeNode)selectedElementNodes.elementAt(i)).getUserObject();");
			out.println(indent+indent+indent+"if (!(userObject instanceof "+elementInterface+")) continue;");
			out.println(indent+indent+indent+elementInterface+" element = ("+elementInterface+")userObject;");
			out.println(indent+indent+indent+"//--- Make OCL evaluator ---");
			String oclClass = context.getNaming().getOCLClass(modelName);
			out.println(indent+indent+indent+"Map context = new HashMap();");
			out.println(indent+indent+indent+"context.put(\"self\", element);");
			out.println(indent+indent+indent+oclClass+" evalFrame = new "+oclClass+"(context, oclProcessor);");
			out.println(indent+indent+indent+"//--- Set the OCL's location ---");
			out.println(indent+indent+indent+"if (evalDesktop.getAllFrames().length == 0) evalCount = 0;");
			out.println(indent+indent+indent+"int x1 = evalCount/20;");
			out.println(indent+indent+indent+"if (x1 == 3) x1 = 0;");
			out.println(indent+indent+indent+"int x = evalCount%20+10*x1;");
			out.println(indent+indent+indent+"int y = evalCount%20;");
			out.println(indent+indent+indent+"evalFrame.setLocation(25*x, 25*y);");
			out.println(indent+indent+indent+"evalDesktop.add(evalFrame);");
			out.println(indent+indent+indent+"evalFrame.setVisible(true);");
			out.println(indent+indent+indent+"evalCount++;");
			out.println(indent+indent+"}");
		}
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Close all view windows */");
		out.println(indent+"protected void closeAllViewWindowsAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Reset desktop ---");
		out.println(indent+indent+"resetViewDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Close all edit windows */");
		out.println(indent+"protected void closeAllEditWindowsAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Reset desktop ---");
		out.println(indent+indent+"resetEditDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Close all evaluate windows */");
		out.println(indent+"protected void closeAllEvalWindowsAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Reset desktop ---");
		out.println(indent+indent+"resetEvalDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Close all build windows */");
		out.println(indent+"protected void closeAllBuildWindowsAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Reset desktop ---");
		out.println(indent+indent+"resetBuildDesktop();");
		out.println(indent+"}");
		out.println(indent+"/** Close all windows */");
		out.println(indent+"protected void closeAllWindowsAction(ActionEvent e) {");
		out.println(indent+indent+"//--- Reset desktop ---");
		out.println(indent+indent+"resetDesktop();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Readme */");
		out.println(indent+"protected void readmeHelpAction(ActionEvent e) {");
		out.println(indent+"}");
		out.println(indent+"/** About */");
		out.println(indent+"protected void aboutHelpAction(ActionEvent e) {");
		if (licenceFileName!=null && licenceFileName.length()!=0) {
			out.println(indent+indent+"JFrame aboutFrame = new JFrame(\"About "+modelName+"\");");
			out.println(indent+indent+"JTextArea textArea;");
			out.println(indent+indent+"JTabbedPane aboutTab = new JTabbedPane();");
			// Add panels
			try {
				// Create the XMLReader
				String parserClassName = "org.apache.xerces.parsers.SAXParser";
				XMLReader reader = XMLReaderFactory.createXMLReader(parserClassName);
				// Create and register the ContentHandler
				ContentHandler aboutHandler = new AboutGenerator(out, indent);
				reader.setContentHandler(aboutHandler);
				// Parse
				licenceFileName = "file:///"+licenceFileName;
				InputSource inputSource = new InputSource(licenceFileName);
				reader.parse(inputSource);
			} catch (Exception e) {
				log.reportError("SAX error in '"+licenceFileName+"' file\n", e);
			}
			out.println(indent+indent+"// Add the panel into frame");
			out.println(indent+indent+"aboutFrame.getContentPane().add(aboutTab);");
			out.println(indent+indent+"aboutFrame.pack();");
			out.println(indent+indent+"// Put frame in the middle of the screen");
			out.println(indent+indent+"Dimension screen = getToolkit().getScreenSize();");
			out.println(indent+indent+"int width  = aboutFrame.getContentPane().getSize().width;");
			out.println(indent+indent+"int height = aboutFrame.getContentPane().getSize().height;");
			out.println(indent+indent+"int left = (screen.width - width)/2;");
			out.println(indent+indent+"int top = (screen.height - height)/2;");
			out.println(indent+indent+"aboutFrame.setBounds(left, top, width, height);");
			out.println(indent+indent+"aboutFrame.show();");
		}
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Select lifecycle */");
		out.println(indent+"protected void selectLifecyclesAction(TreeSelectionEvent e) {");
		out.println(indent+indent+"TreePath paths[] = factoriesTree.getSelectionPaths();");
		out.println(indent+indent+"selectedLifecycleNodes.clear();");
		out.println(indent+indent+"if (paths == null) return;        ");
		out.println(indent+indent+"for(int i=0; i<paths.length; i++) {");
		out.println(indent+indent+"	selectedLifecycleNodes.add(paths[i].getLastPathComponent());");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println(indent+"/** Select element */");
		out.println(indent+"protected void selectElementsAction(TreeSelectionEvent e) {");
		out.println(indent+indent+"TreePath paths[] = elementsTree.getSelectionPaths();");
		out.println(indent+indent+"selectedElementNodes.clear();");
		out.println(indent+indent+"if (paths == null) return;        ");
		out.println(indent+indent+"for(int i=0; i<paths.length; i++) {");
		out.println(indent+indent+"	selectedElementNodes.add(paths[i].getLastPathComponent());");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/**");
		out.println(indent+"  *   Main function");
		out.println(indent+"  */");
		out.println(indent+"public static void main(String[] args) {");
		out.println(indent+indent+"try {");
		out.println("//            UIManager.setLookAndFeel(new com.incors.plaf.alloy.AlloyLookAndFeel());");
		out.println("//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());");
		out.println("//            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());");
		out.println("//            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");");
		out.println("//            UIManager.setLookAndFeel(new com.incors.plaf.alloy.AlloyLookAndFeel());");
		out.println(indent+indent+"} catch (Exception e) {");
		out.println(indent+indent+"}");
		String cleanName = context.getXMIFileName().replace('\\', '/');
		out.println(indent+indent+"new "+browserClass+"(\""+cleanName+"\");");
		out.println(indent+"}");
		out.println("}");
	}
	
	//
	// Local properties
	//
	protected Model model;
	protected Context context;
	protected PrintWriter out;

	protected String indent;
	protected String modelName;
	protected String modelPackage;
	protected String browserInterface;
	protected String browserClass;
	protected String repositoryInterface;
	protected String repositoryClass;
	protected String factoryInterface;
	protected String factoryClass;
	protected String invokeMethodClass;
	protected String elementInterface;
	protected ILog log;
	protected String licenceFileName; 
}

/** XML handler to read the about file */ 
class AboutGenerator
	implements ContentHandler
{
	protected PrintWriter out;
	protected String text;
	protected Locator locator;
	protected String indent;
	public AboutGenerator(PrintWriter out, String indent) {
		this.out = out;
		this.indent = indent;
	}
	public void setDocumentLocator(Locator locator) {
		this.locator = locator;
	}
	public void startDocument() throws SAXException {
	}
	public void endDocument() throws SAXException {
	}
	public void startPrefixMapping(String prefix, String uri) throws SAXException {
	}
	public void endPrefixMapping(String prefix) throws SAXException {
	}
	public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
		text = new String();
	}
	public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
		if (localName.equals("About")) {
		} else {
			out.println(indent+indent+"// Add tab '"+localName+"'");
			text = text.trim();
			text = text.replaceAll("\t", "");
			text = text.replaceAll("\n", "\\\\n");
			out.println(indent+indent+"textArea = new JTextArea(\""+text+"\", 30, 60);");
			out.println(indent+indent+"textArea.setLineWrap(true);");
			out.println(indent+indent+"textArea.setWrapStyleWord(true);");
			out.println(indent+indent+"aboutTab.addTab(\""+localName+"\", new JScrollPane(textArea));");
		}
	}
	public void characters(char ch[], int start, int length) throws SAXException {
		String str = new String(ch, start, length);
		text += str;
	}
	public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
	}
	public void processingInstruction(String target, String data) throws SAXException {
	}
	public void skippedEntity(String name) throws SAXException {
	}
}

