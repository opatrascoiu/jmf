package uk.ac.kent.cs.kmf.templates.java;

import java.io.PrintWriter;

import uk.ac.kent.cs.kmf.kmfstudio.Context;
import uk.ac.kent.cs.kmf.util.ILog;
import uk.ac.ukc.cs.kmf.kmfstudio.uml.Model_Management.Model;

/**
 * @author Octavian Patrascoiu
 *
 */
public class ViewEditInvokeMethodImplTemplate {
	public ViewEditInvokeMethodImplTemplate(Model model, Context context, PrintWriter out) {
		this.model = model;
		this.context = context;
		this.out = out;
		initLocalProperties();
	}
	
	/**
	  * Print instant evaluator implementation
	  */
	public void generate() {
		// Print generation stamp
		context.getNaming().putStamp(invokeMethodClass, out);
		// Print the code
		out.println("package "+modelPackage+".repository;");
		out.println();
		out.println("import java.util.*;");
		out.println("import java.lang.reflect.*;");
		out.println();
		out.println("import java.awt.*;");
		out.println("import java.awt.event.*;");
		out.println("import javax.swing.*;");
		out.println("import javax.swing.border.*;");
		out.println();
		out.println("public class "+invokeMethodClass);
		out.println("	 extends JInternalFrame");
		out.println("{");
		String repositoryInterface = context.getNaming().getFullRepositoryInterface(modelName);
		String browserClass = context.getNaming().getFullBrowserClass(modelName);
		out.println(indent+"//--- Repository, console, instance, method, and types ---");
		out.println(indent+"protected "+repositoryInterface+" rep;");
		out.println(indent+"protected "+browserClass+" brow;");
		out.println(indent+"protected Object instance;");
		out.println(indent+"protected Method method;");
		out.println(indent+"protected Class types[];");
		out.println(indent+"protected JComponent values[];");
		out.println(indent+"protected java.util.List indices = new Vector();");
		out.println(indent+"protected java.util.List filters = new Vector();");
		out.println();
		out.println(indent+"/** Construct invoker */");
		out.println(indent+"public "+invokeMethodClass+"("+repositoryInterface+" rep, "+browserClass+" brow, Object instance, Method method) {");
		out.println(indent+indent+"//--- Init members ---");
		out.println(indent+indent+"this.brow = brow;");
		out.println(indent+indent+"this.rep = rep;");
		out.println(indent+indent+"this.instance = instance;");
		out.println(indent+indent+"this.method = method;");
		out.println(indent+indent+"indices = new Vector();");
		out.println(indent+indent+"filters = new Vector();");
		out.println(indent+indent+"if (rep == null || instance == null || method == null) return;");
		out.println();
		out.println(indent+indent+"//--- Frame settings ---");
		out.println(indent+indent+"setTitle(\"Instant Lifecycle [\"+instance+\"]\");");
		out.println(indent+indent+"setResizable(true);");
		out.println(indent+indent+"setClosable(true);");
		out.println(indent+indent+"setMaximizable(true);");
		out.println(indent+indent+"setIconifiable(true);");
		out.println();
		out.println(indent+indent+"//--- Panel settings ---");
		out.println(indent+indent+"JPanel mainPanel = new JPanel(new BorderLayout());");
		out.println();
		out.println(indent+indent+"//--- Get the names of parameters ---");
		out.println(indent+indent+"String key = method.toString();");
		out.println(indent+indent+"int pos = key.indexOf('(');");
		out.println(indent+indent+"String key1 = new String();");
		out.println(indent+indent+"String key2 = new String();");
		out.println(indent+indent+"if (pos != -1) {");
		out.println(indent+indent+indent+"key1 = key.substring(0, pos+1);");
		out.println(indent+indent+indent+"key2 = key.substring(pos+1, key.length());");
		out.println(indent+indent+indent+"pos = key1.lastIndexOf('.');");
		out.println(indent+indent+indent+"if (pos != -1) key1 = key1.substring(pos+1, key1.length());");
		out.println(indent+indent+indent+"key = key1 + key2;");
		out.println(indent+indent+"}");
		out.println(indent+indent+"String paramNames[] = new String[] {};");
		out.println(indent+indent+"try {");
		out.println(indent+indent+indent+"Method getter = instance.getClass().getMethod(\"getParamNames\", new Class[] {String.class});");
		out.println(indent+indent+indent+"paramNames = (String [])getter.invoke(instance, new Object[] {key});");
		out.println(indent+indent+"} catch (Exception e) {");
		out.println(indent+indent+"}");
		out.println();
		out.println(indent+indent+"//--- Get the types of parameters ---");
		out.println(indent+indent+"types = method.getParameterTypes();");
		out.println(indent+indent+"if (types.length != 0) {");
		out.println(indent+indent+indent+"//--- Create INVOKE panel ---");
		out.println(indent+indent+indent+"JPanel invokePanel = new JPanel(new BorderLayout());");
		out.println(indent+indent+indent+"invokePanel.setLayout(new GridBagLayout());");
		out.println(indent+indent+indent+"//--- Give the panel a border gap of 5 pixels ---");
		out.println(indent+indent+indent+"invokePanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));");
		out.println(indent+indent+indent+"//--- Get the constraints ---");
		out.println(indent+indent+indent+"GridBagConstraints c = new GridBagConstraints();");
		out.println(indent+indent+indent+"c.gridx = 0;");
		out.println(indent+indent+indent+"c.gridy = 0;");
		out.println(indent+indent+indent+"c.ipadx = 5;");
		out.println(indent+indent+indent+"c.ipady = 5;");
		out.println(indent+indent+indent+"c.weightx = 0.0;");
		out.println(indent+indent+indent+"c.weighty = 0.0;");
		out.println(indent+indent+indent+"//--- Add space around all components to avoid clutter ---");
		out.println(indent+indent+indent+"c.insets = new Insets(2, 2, 2, 2);");
		out.println(indent+indent+indent+"//--- Anchor all components WEST ---");
		out.println(indent+indent+indent+"c.anchor = GridBagConstraints.WEST;");
		out.println(indent+indent+indent+"//--- Preferred sizes ---");
		out.println(indent+indent+indent+"Dimension listSize = "+browserClass+".listSize;");
		out.println(indent+indent+indent+"Dimension fieldSize = "+browserClass+".fieldSize;");
		out.println(indent+indent+indent+"//--- Add labels and values ---");
		out.println(indent+indent+indent+"values = new JComponent[types.length];");
		out.println(indent+indent+indent+"for(int i=0; i<types.length; i++) {");
		out.println(indent+indent+indent+indent+"String strType = types[i].toString();");
		out.println(indent+indent+indent+indent+"//--- Add label ---");
		out.println(indent+indent+indent+indent+"String strLabel = new String();");
		out.println(indent+indent+indent+indent+"if (paramNames != null && i<paramNames.length) strLabel = paramNames[i];");
		out.println(indent+indent+indent+indent+"strLabel += \" : \";");
		out.println(indent+indent+indent+indent+"pos = strType.lastIndexOf('.');");
		out.println(indent+indent+indent+indent+"if (pos != -1) strLabel += strType.substring(pos+1, strType.length());");
		out.println(indent+indent+indent+indent+"JLabel label = new JLabel(strLabel);");
		out.println(indent+indent+indent+indent+"c.gridx = 0;");
		out.println(indent+indent+indent+indent+"c.gridy = i;");
		out.println(indent+indent+indent+indent+"invokePanel.add(label, c);");
		out.println(indent+indent+indent+indent+"//--- Get typeName ---");
		out.println(indent+indent+indent+indent+"String typeName = strType;");
		out.println(indent+indent+indent+indent+"if (typeName.indexOf(\"interface \") == 0) typeName = typeName.replaceFirst(\"interface \", \"\");");
		// Remove I in old ToolGen
//		out.println(indent+indent+indent+indent+"pos = typeName.lastIndexOf('.');");
//		out.println(indent+indent+indent+indent+"if (pos != -1) typeName = typeName.substring(0, pos+1)+typeName.substring(pos+2, typeName.length());");
		out.println(indent+indent+indent+indent+"//--- Add FIELD or UNIVERSAL SET ---");
		out.println(indent+indent+indent+indent+"c.gridx = 1;");
		out.println(indent+indent+indent+indent+"c.gridy = i;");
		out.println(indent+indent+indent+indent+"if (typeName.endsWith(\"Boolean\") || typeName.endsWith(\"Integer\") || typeName.endsWith(\"Real\") || ");
		out.println(indent+indent+indent+indent+indent+"typeName.endsWith(\"String\") ||	typeName.endsWith(\"StringBuffer\")) {");
		out.println(indent+indent+indent+indent+indent+"values[i] = new JTextField(\"\");");
		out.println(indent+indent+indent+indent+indent+"values[i].setFont("+browserClass+".font);");
		out.println(indent+indent+indent+indent+indent+"values[i].setPreferredSize(fieldSize);");
		out.println(indent+indent+indent+indent+indent+"invokePanel.add(values[i], c);");
		out.println(indent+indent+indent+indent+"} else if (typeName.endsWith(\"Set\") || typeName.endsWith(\"List\") || typeName.endsWith(\"Collection\")) {");
		out.println(indent+indent+indent+indent+indent+"Vector objects = (Vector)rep.getInstances(typeName);");
		out.println(indent+indent+indent+indent+indent+"values[i] = new JList(objects == null ? new Vector() : objects);");
		out.println(indent+indent+indent+indent+indent+"values[i].setFont("+browserClass+".font);");
		out.println(indent+indent+indent+indent+indent+"JScrollPane scroller = new JScrollPane(values[i]);");
		out.println(indent+indent+indent+indent+indent+"scroller.setPreferredSize(listSize);");
		out.println(indent+indent+indent+indent+indent+"invokePanel.add(scroller, c);");
		out.println(indent+indent+indent+indent+indent+"//--- Store index and name for refresh ---");
		out.println(indent+indent+indent+indent+indent+"indices.add(new Integer(i));");
		out.println(indent+indent+indent+indent+indent+"filters.add(typeName);");
		out.println(indent+indent+indent+indent+"} else {");
		out.println(indent+indent+indent+indent+indent+"Vector objects = (Vector)rep.getInstances(typeName);");
		out.println(indent+indent+indent+indent+indent+"values[i] = new JList(objects == null ? new Vector() : objects);");
		out.println(indent+indent+indent+indent+indent+"((JList)values[i]).setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
		out.println(indent+indent+indent+indent+indent+"values[i].setFont("+browserClass+".font);");
		out.println(indent+indent+indent+indent+indent+"JScrollPane scroller = new JScrollPane(values[i]);");
		out.println(indent+indent+indent+indent+indent+"scroller.setPreferredSize(listSize);");
		out.println(indent+indent+indent+indent+indent+"invokePanel.add(scroller, c);");
		out.println(indent+indent+indent+indent+indent+"//--- Store index and name for refresh ---");
		out.println(indent+indent+indent+indent+indent+"indices.add(new Integer(i));");
		out.println(indent+indent+indent+indent+indent+"filters.add(typeName);");
		out.println(indent+indent+indent+indent+"}");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+indent+"//--- Add INVOKE panel ---");
		out.println(indent+indent+indent+"mainPanel.add(invokePanel, BorderLayout.CENTER);");
		out.println();
		out.println(indent+indent+indent+"//--- Create REFRESH panel ---");
		out.println(indent+indent+indent+"JPanel refreshPanel = new JPanel();");
		out.println(indent+indent+indent+"refreshPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));");
		out.println(indent+indent+indent+"refreshPanel.setLayout(new BoxLayout(refreshPanel, BoxLayout.Y_AXIS) );");
		out.println(indent+indent+indent+"//--- Create REFRESH BUTTON ---");
		out.println(indent+indent+indent+"JButton refreshButton = new JButton(new AbstractAction(\"Refresh\") {");
		out.println(indent+indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+indent+"refreshAction();");
		out.println(indent+indent+indent+indent+"}");
		out.println(indent+indent+indent+"});");
		out.println(indent+indent+indent+"refreshButton.setAlignmentX(JScrollPane.CENTER_ALIGNMENT);");
		out.println(indent+indent+indent+"refreshPanel.add(refreshButton);");
		out.println(indent+indent+indent+"//--- Add REFRESH ---");
		out.println(indent+indent+indent+"getContentPane().add(new JScrollPane(refreshPanel), BorderLayout.NORTH);");
		out.println(indent+indent+" }");
		out.println();
		out.println(indent+indent+" //--- Create BUTTON panel ---");
		out.println(indent+indent+" JPanel buttonPanel = new JPanel();");
		out.println(indent+indent+" JButton invokeButton = new JButton(new AbstractAction(\"Invoke\") {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+"invokeAction();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+" });");
		out.println(indent+indent+" buttonPanel.add(invokeButton);");
		out.println(indent+indent+" JButton cancelButton = new JButton(new AbstractAction(\"Cancel\") {");
		out.println(indent+indent+indent+"public void actionPerformed(ActionEvent e) {");
		out.println(indent+indent+indent+indent+" cancelAction();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+" });");
		out.println(indent+indent+" buttonPanel.add(cancelButton);");
		out.println(indent+indent+" //--- Add BUTTON panel ---");
		out.println(indent+indent+" mainPanel.add(buttonPanel, BorderLayout.SOUTH);");
		out.println();
		out.println(indent+indent+" //--- Add MAIN PANEL to frame ---");
		out.println(indent+indent+" getContentPane().add(new JScrollPane(mainPanel));");
		out.println(indent+indent+" pack();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Invoke action a method using reflection */");
		out.println(indent+"protected void invokeAction() {");
		out.println(indent+indent+"Object arguments[] = new Object[types.length];");
		out.println(indent+indent+"for(int i=0; i<types.length; i++) {");
		out.println(indent+indent+indent+"//--- Get typeName ---");
		out.println(indent+indent+indent+"String typeName = types[i].toString();");
		out.println(indent+indent+indent+"if (typeName.indexOf(\"interface \") == 0) typeName = typeName.replaceFirst(\"interface \", \"\");");
		out.println(indent+indent+indent+"if (typeName.indexOf(\"class \") == 0) typeName = typeName.replaceFirst(\"class \", \"\");");
		// Remove I for ToolGen
//		out.println(indent+indent+indent+"int pos = typeName.lastIndexOf('.');");
//		out.println(indent+indent+indent+"if (pos != -1) typeName = typeName.substring(0, pos+1)+typeName.substring(pos+2, typeName.length());");
		out.println();
		out.println(indent+indent+indent+"//--- Get argument ---");
		out.println(indent+indent+indent+"if (typeName.endsWith(\"java.lang.Boolean\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Boolean(false) : Boolean.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Byte\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Byte(\"0\") : Byte.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Character\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Character('0') : new Character(strValue.charAt(0));");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Double\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Double(0.0) : Double.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Float\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Float(0.0) : Float.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Integer\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Integer(0) : Integer.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Long\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Long(0) : Long.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.Short\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue.length()==0 ? new Short(\"0\") : Short.valueOf(strValue);");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.String\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue;");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.lang.StringBuffer\")) {");
		out.println(indent+indent+indent+indent+"String strValue = ((JTextField)values[i]).getText();");
		out.println(indent+indent+indent+indent+"arguments[i] = strValue;");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.util.Collection\")) {");
		out.println(indent+indent+indent+indent+"Object selValues[] = ((JList)values[i]).getSelectedValues();");
		out.println(indent+indent+indent+indent+"Collection colValue = new Vector();");
		out.println(indent+indent+indent+indent+"if (selValues != null)");
		out.println(indent+indent+indent+indent+indent+"for(int j=0; j<selValues.length; j++) colValue.add(selValues[j]);");
		out.println(indent+indent+indent+indent+"arguments[i] = colValue;");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.util.Set\")) {");
		out.println(indent+indent+indent+indent+"Object selValues[] = ((JList)values[i]).getSelectedValues();");
		out.println(indent+indent+indent+indent+"Set colValue = new HashSet();");
		out.println(indent+indent+indent+indent+"if (selValues != null)");
		out.println(indent+indent+indent+indent+indent+"for(int j=0; j<selValues.length; j++) colValue.add(selValues[j]);");
		out.println(indent+indent+indent+indent+"arguments[i] = colValue;");
		out.println(indent+indent+indent+"} else if (typeName.endsWith(\"java.util.List\")) {");
		out.println(indent+indent+indent+indent+"Object selValues[] = ((JList)values[i]).getSelectedValues();");
		out.println(indent+indent+indent+indent+"Collection colValue = new Vector();");
		out.println(indent+indent+indent+indent+"if (selValues != null)");
		out.println(indent+indent+indent+indent+indent+"for(int j=0; j<selValues.length; j++) colValue.add(selValues[j]);");
		out.println(indent+indent+indent+indent+"arguments[i] = colValue;");
		out.println(indent+indent+indent+"} else {");
		out.println(indent+indent+indent+indent+"arguments[i] = ((JList)values[i]).getSelectedValue();");
		out.println(indent+indent+indent+"}");
		out.println(indent+indent+"}");
		String getter = context.getNaming().getGetter("log");
		out.println(indent+indent+"try {");
		out.println(indent+indent+indent+"//--- Invoke METHOD ---");
		out.println(indent+indent+indent+"method.invoke(instance, arguments);");
		out.println(indent+indent+indent+"//--- Update CONSOLE ---");
		out.println(indent+indent+indent+"brow."+getter+"().reportMessage(\"Invoke method '\"+method.toString()+\"'\");");
		out.println(indent+indent+"} catch (Exception except) {");
		out.println(indent+indent+indent+"//--- Update CONSOLE ---");
		out.println(indent+indent+indent+"brow."+getter+"().reportMessage(\"Error while invoking method '\"+method.toString()+\"'\");");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Cancel action */");
		out.println(indent+"protected void cancelAction() {");
		out.println(indent+indent+"dispose();");
		out.println(indent+"}");
		out.println();
		out.println(indent+"/** Refresh action */");
		out.println(indent+"protected void refreshAction() {");
		out.println(indent+indent+"Iterator itIndex = indices.iterator();");
		out.println(indent+indent+"Iterator itFilter = filters.iterator();");
		out.println(indent+indent+"while (itIndex.hasNext()) {");
		out.println(indent+indent+indent+"int index = ((Integer)itIndex.next()).intValue();");
		out.println(indent+indent+indent+"String filter = (String)itFilter.next();");
		out.println(indent+indent+indent+"//--- Update UNIVERSAL SET ---");
		out.println(indent+indent+indent+"((JList)values[index]).setListData((Vector)rep.getInstances(filter));");
		out.println(indent+indent+"}");
		out.println(indent+"}");
		out.println("}");
	}

	protected void initLocalProperties() {
		this.indent = context.getIndent();
		this.log = context.getLog();
		this.modelName = context.getNaming().getModelName();
		this.modelPackage = context.getNaming().getModelPackage();
		this.viewEditFrameClass = context.getNaming().getViewEditFrameClass(modelName);
		this.invokeMethodClass = context.getNaming().getInvokeMethodClass(modelName);
		this.viewInterface = context.getNaming().getViewVisitorInterface(modelName);
		this.viewClass = context.getNaming().getViewVisitorClass(modelName);
		this.editInterface = context.getNaming().getEditVisitorInterface(modelName);
		this.editClass = context.getNaming().getEditVisitorClass(modelName);
		this.indent = context.getIndent();
	}

	//
	// Local properties
	//
	protected Model model;
	protected Context context;
	protected PrintWriter out;
	
	protected ILog log;
	protected String indent;
	protected String modelName;
	protected String modelPackage;
	protected String viewEditFrameClass;
	protected String invokeMethodClass;
	protected String viewInterface;
	protected String viewClass;
	protected String editInterface;
	protected String editClass;
}
