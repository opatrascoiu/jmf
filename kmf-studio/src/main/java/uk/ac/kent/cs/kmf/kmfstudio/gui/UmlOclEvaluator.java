/**
 *
 *  Class UmlOCLEvaluator$Class.java
 *
 *  Generated by KMFStudio at 14 April 2004 22:36:48
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package uk.ac.kent.cs.kmf.kmfstudio.gui;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import uk.ac.kent.cs.ocl20.OclProcessor;
import uk.ac.kent.cs.kmf.util.*;

public class UmlOclEvaluator
	extends JInternalFrame
{
	//--- CONTEXT ---
	protected Map context = new HashMap();
	//--- OCL processor ---
	protected OclProcessor processor;
	//--- INPUT and OUTPUT text area ---
	protected JTextArea expressionText;
	protected ILog evaluationText;
	//--- EVALUATE button ---
	protected JButton evaluateButton;

	/** Construct evaluator */
	public UmlOclEvaluator(Map context, OclProcessor processor) {
		//--- Set CONTEXT ---
		this.context = context;
		String strContext = "context:\n";
		Iterator i = context.entrySet().iterator();
		while (i.hasNext()) {
			Map.Entry me = (Map.Entry)i.next();
			strContext += "  "+(String)me.getKey()+" : "+me.getValue().toString()+"\n";
		}
		//--- Set processor ---
		this.processor = processor;

		//--- Frame settings ---
		setTitle("OCL Evaluator ["+strContext+"]");
		setResizable(true);
		setClosable(true);
		setMaximizable(true);
		setIconifiable(true);

		//--- Panel settings ---
		JPanel mainPanel = new JPanel();
		mainPanel.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
		mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS) );

		//--- Add INPUT ---
		expressionText = new JTextArea();
		expressionText.setLineWrap(true);
		expressionText.setRows(5);
		mainPanel.add(new JScrollPane(expressionText, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));

		//--- Add EVALUATE BUTTON ---
		evaluateButton = new JButton(new AbstractAction("Evaluate") {
			public void actionPerformed(ActionEvent e) {
				evaluateAction(e);
			}
		});
		evaluateButton.setAlignmentX(CENTER_ALIGNMENT);
		mainPanel.add(evaluateButton);

		//--- Add OUTPUT ---
		evaluationText = new ConsoleLog();
		((JTextArea)evaluationText).setRows(5);
		((JTextArea)evaluationText).setLineWrap(true);
		mainPanel.add(new JScrollPane(((JTextArea)evaluationText), JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));

		//--- Add the mainPanel ---
		setContentPane(new JScrollPane(mainPanel));
		pack();
	}

	/** Evaluate action */
	protected void evaluateAction(ActionEvent e) {
		try {
			String constraint = expressionText.getText();
			Object host = context.get("self");
			String classPathName = host.toString();
			int pos = classPathName.indexOf("'");
			if (pos != -1) classPathName = classPathName.substring(0, pos-1);
			if (!constraint.startsWith("context ")) constraint = "context "+classPathName.replaceAll("[.]", "::")+" inv: "+ constraint;
			java.util.List result = processor.evaluate(constraint, host, evaluationText);
			evaluationText.reportMessage(result.get(0).toString());
		} catch(Exception e1) {
			evaluationText.reportMessage("undefined");
		}
	}
}
