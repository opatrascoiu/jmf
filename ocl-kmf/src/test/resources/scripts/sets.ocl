context library::Library inv: Set{1, 2}
context library::Library inv: Set{1..3}
context library::Library inv: Set{1..3,5..9}
context library::Library inv: Set{1..3,5..6,7}
context library::Library inv: Set{1..2*2}
context library::Library inv: Set{1.3, 2.5}
context library::Library inv: Set{1.0}->including(1)
context library::Library inv: Set{1.3,1.2,1/5,1/8}
context library::Library inv: Set{'b','a'}
context library::Library inv: Set{1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9}
context library::Library inv: Set{1/0}
context library::Library inv: Set{1,1 div 0}
context library::Library inv: Set{1/0,1}
context library::Library inv: Set{1/0,1.0}
context library::Library inv: Set{1,1/0}
context library::Library inv: Set{Set{1}, Set{2}}
context library::Library inv: Set{Set{1}, Set{2}, Set{2}, Set{3}}
context library::Library inv: Set{}
context library::Library inv: Set{1,2,3}->select(true)
context library::Library inv: Set{1,2,3}->select(e :  Integer | e > 1)
context library::Library inv: Set{1,2,3}->select(e | e > 1)
context library::Library inv: Set{1,2,3,4,5,6}->iterate(e : Integer; acc : Integer = 0 | acc + e)
context library::Library inv: Set{Set{1,2},Set{2,3,4}}->iterate(e : Set(Integer); acc : Set(String) = Set{'a'} | Set{'b'})
context library::Library inv: Set{Set{1,2},Set{3},Set{2,3,4}}->iterate(e : Set(Integer); acc : Set(Integer) = Set{0} | acc->union(e))
context library::Library inv: Set{1,2,3}->size()
context library::Library inv: Set{1,2,3}->includes(2)
context library::Library inv: Set{1,2,3}->includes(5)
context library::Library inv: Set{1,2,3}->excludes(2)
context library::Library inv: Set{1,2,3}->excludes(5)
context library::Library inv: Set{1,2,3}->count(1)
context library::Library inv: Set{1}->includesAll(Bag{1})
context library::Library inv: Set{1.0}->includesAll(Bag{1})
context library::Library inv: Set{1,2,3}->includesAll(Set{2,3})
context library::Library inv: Set{1,2,3}->includesAll(Set{2,4})
context library::Library inv: Set{1,2,3}->includesAll(Bag{2,2,3})
context library::Library inv: Set{1,2,3}->includesAll(Sequence{3,2})
context library::Library inv: Set{1,2,3}->excludesAll(Set{2,3})
context library::Library inv: Set{1,2,3}->excludesAll(Set{2,4})
context library::Library inv: Set{1,2,3}->excludesAll(Set{4,5})
context library::Library inv: Set{1,2,3}->excludesAll(Bag{2,2,3})
context library::Library inv: Set{1,2,3}->excludesAll(Sequence{3,2})
context library::Library inv: Set{1,2,3}->isEmpty()
context library::Library inv: Set{}->isEmpty()
context library::Library inv: Set{1,2,3}->notEmpty()
context library::Library inv: Set{}->notEmpty()
context library::Library inv: Set{1,2,3}->sum()
context library::Library inv: Set{1} = Set{1}
context library::Library inv: Set{1,2} = Set{2,1}
context library::Library inv: Set{1.0,2.0} = Set{1,2}
context library::Library inv: Set{1.0,2.2} = Set{1,2}
context library::Library inv: Set{1,2} <> Set{2,1}
context library::Library inv: Set{1,2,3}->union(Set{0,2,4})
context library::Library inv: Set{1,2}->union(Set{1,2})
context library::Library inv: Set{1,2}->union(Bag{1,1,2,3})
context library::Library inv: Set{1,2,3}->intersection(Set{1,2})
context library::Library inv: Set{1,2,3}->intersection(Set{4})
context library::Library inv: Set{1,2,3}->intersection(Bag{1,2})
context library::Library inv: Set{1,2,3}->intersection(Bag{1,1})
context library::Library inv: Set{1,2,3} - Set{2}
context library::Library inv: Set{1,2,3}->symmetricDifference(Set{2,4})
context library::Library inv: Set{1,2,3}->including(5)
context library::Library inv: Set{1,2,3}->including(1)
context library::Library inv: Set{1,2,3}->excluding(5)
context library::Library inv: Set{1,2,3}->excluding(1)
context library::Library inv: Set{1,2,3}->select(e | e > 1)
context library::Library inv: Set{1,2,3}->select(e | e <> 2)
context library::Library inv: Set{Set{1,2},Set{2,3,4}}->select(s | s->size() > 2)
context library::Library inv: Set{Set{2},Set{1,2},Set{2,3,4}}->select(s | s->size() mod 2 = 1)
context library::Library inv: Set{Set{2},Set{1,2},Set{2,3,4}}->select(s | s->size() mod 2 = 1)->size()
context library::Library inv: Set{1,2,3}->reject(e | e > 1)
context library::Library inv: Set{1,2,3}->reject(e | e <> 2)
context library::Library inv: Set{Set{1..5}}->forAll(e|e->notEmpty())
context library::Library inv: Set{Set{1..5}}->forAll(e|e->forAll(e->size()=2))
context library::Library inv: Set{Set{1..5}}->forAll(e|e->forAll(e->select(not (e->size()=2))->isEmpty()))
context library::Library inv: Set{1,2,3}->collect(e | e * 2)
context library::Library inv: Set{1,2,3}->collect(1)
context library::Library inv: Set{1,2,3}->collect(e | 'abc'.substring(e,3))
context library::Library inv: Set{1,2,3}->asSequence()->size() = 3
context library::Library inv: Set{1,2,3}->asBag()
context library::Library inv: Set{Set{1}, Set{2}, Set{2}, Set{3}}->flatten()
context library::Library inv: Set{Bag{1,1}, Bag{2,1}, Bag{1,2,3}}->flatten()
context library::Library inv: Set{Sequence{1,2}, Sequence{2,1}, Sequence{2,3}}->flatten()
context library::Library inv: Set{1,2,3,4,5,6}->exists(e | e > 0)
context library::Library inv: Set{1,2,3,4,5,6}->exists(e | e = 7)
context library::Library inv: Set{1,2,3,4,5,6}->forAll(e | e > 0)
context library::Library inv: Set{1,2,3,4,5,6}->forAll(e | e > 1)
context library::Library inv: Set{1,2,3,4,5,6}->isUnique(e | e)
context library::Library inv: Set{1,2,3,4,5,6}->isUnique(e | Set{e})
context library::Library inv: Set{1,2,3,4,5,6}->isUnique(e | e mod 2)
context library::Library inv: Set{Set{1},Set{2}}->isUnique(e | e)
context library::Library inv: Set{4,2,3,1,6,5}->sortedBy(e | e)
context library::Library inv: Set{4,2,3,1,6,5}->sortedBy(1)->includesAll(Set{4,2,3,1,6,5})
context library::Library inv: Set{'c','ca','cc','a','aa'}->sortedBy(e | e.size())
context library::Library inv: Set{4,2,3,1,6,5}->one(e | e = 2)
context library::Library inv: Set{4,2,3,1,6,5}->one(e | e = 7)
context library::Library inv: Set{}->one(e | e = 2)
context library::Library inv: Set{1,2}->any(e | e < 2)
context library::Library inv: Set{1,2}->any(e | e < 1)
context library::Library inv: Set{1,2}->any(e | e < 3) < 3
context library::Library inv: Set{ Set{1}, Set{1,2} }->collect(x|x)->size()
context library::Library inv: Set{ Set{1}, Set{1,2} }->collectNested(x|x)->size()
context library::Library inv: Set{ Set{1}, Set{1,2} }->collectNested(x|x).size()
context library::Library inv: Set{ Set{1}, Set{1,2} }->collectNested(x:Set(Integer)|x).size()
context library::Library inv: Set{Set{1,2},Set{2,3,4}}->iterate(
    e1 :  Set(Integer); acc1 : Integer = 0 | 
    e1->iterate(
        e2 : Integer; acc2 : Integer = 0 | 
        acc2 + e2) + acc1)
context library::Library inv: Set{1,2,3}->iterate(
    e3 : Integer; 
    s3 : Set(Sequence(Integer)) = Set{Sequence{1,2}, Sequence{2,3}} | 
    Set{1,2,3}->iterate(
        e2 : Integer; s2 : Set(Sequence(Integer)) = s3 | 
        Set{1,2,3}->iterate(
            e1 : Integer; 
            s1 : Set(Sequence(Integer)) = s2 | 
            if s1->exists(p1 : Sequence(Integer) | 
                s1->exists(p2 : Sequence(Integer) | 
                    (p1->at(1) = e1 and p1->at(2) = e2) or
                    (p1->at(1) = e1 and p1->at(2) = e3 and
                     p2->at(1) = e3 and p2->at(2) = e2)
                ))
            then
                s1->including(Sequence{e1,e2})
            else 
                s1
            endif)))
context library::Library inv: Set{1,2,3,4}->iterate(
    e3 : Integer; 
    s3 : Set(Sequence(Integer)) = Set{Sequence{1,2}, Sequence{2,3}, Sequence{3,4}} | 
    Set{1,2,3,4}->iterate(
        e2 : Integer;
        s2 : Set(Sequence(Integer)) = s3 | 
        Set{1,2,3,4}->iterate(
            e1 : Integer; 
            s1 : Set(Sequence(Integer)) = s2 | 
            if s1->exists(p1 : Sequence(Integer) | 
                s1->exists(p2 : Sequence(Integer) | 
                    (p1->at(1) = e1 and p1->at(2) = e2) or
                    (p1->at(1) = e1 and p1->at(2) = e3 and
                     p2->at(1) = e3 and p2->at(2) = e2)
                ))
            then
                s1->including(Sequence{e1,e2})
            else 
                s1
            endif)))->size()
