/**
 *
 *  Class LibraryRepository$Class.java
 *
 *  Generated by KMFStudio at 29 June 2003 12:59:43
 *  Visit http://www.cs.ukc.ac.uk/kmf
 *
 */

package library.repository;

import java.util.*;
import uk.ac.kent.cs.kmf.util.*;

import library.*;

public class LibraryRepository$Class
	implements LibraryRepository
{
	/** Default repository constructor */
	public LibraryRepository$Class() {
		setLog(new FileLog("Repository.log"));
		init();
	}
	/** Repository constructor */
	public LibraryRepository$Class(ILog log) {
		setLog(log);
		init();
	}
	/** Init the attributes */
	protected void init() {
		log.reportMessage("Init library repository");
		// Add factories
		log.reportMessage("Adding factory and initializing population for 'library.Author'");
		factories.put("library.Author", new library.Author$Factory$Class(this));
		population.put("library.Author", new Vector());
		log.reportMessage("Adding factory and initializing population for 'library.BookCategory'");
		factories.put("library.BookCategory", new library.BookCategory$Factory$Class(this));
		population.put("library.BookCategory", new Vector());
		log.reportMessage("Adding factory and initializing population for 'library.Book'");
		factories.put("library.Book", new library.Book$Factory$Class(this));
		population.put("library.Book", new Vector());
		log.reportMessage("Adding factory and initializing population for 'library.Library'");
		factories.put("library.Library", new library.Library$Factory$Class(this));
		population.put("library.Library", new Vector());
   }

	//--- POPULATION ---
	/** Build an element */
	public Object buildElement(String fullClassName) {
		Object elem = null;
		try {
			LibraryFactory factory = (LibraryFactory)factories.get(fullClassName);
			elem = factory.build();
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class ");
		}
		return elem;
	}
	/** Add an element */
	public void addElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).add(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Remove an element */
	public void removeElement(String fullClassName, Object elem) {
		try {
			((List)population.get(fullClassName)).remove(elem);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
	}
	/** Get all elements of a type */
	public List getElements(String fullClassName) {
		List objs = null;
		try {
			objs = (List)population.get(fullClassName);
		} catch (Exception e) {;
			log.reportMessage("Error: Missing population for '"+fullClassName+"' class");
		}
		return objs;
	}
	/** Check if the first class name is an instance of the second class name */
	protected boolean isInstanceOf(String elemName, String fullClassName) {
		//--- Check if fullClassName is a superinterface of elemName ---
		boolean res = false;
		try {
			res = Class.forName(fullClassName).isAssignableFrom(Class.forName(elemName));
		} catch (Exception e) {
		}
		return res;
	}
	/** Get all instances of a type */
	public List getInstances(String fullClassName) {
		List objs = new Vector();
		Set elemNames = population.keySet();
		Iterator nameIt = elemNames.iterator();
		while (nameIt.hasNext()) {
			String elemName = (String)nameIt.next();
			if (isInstanceOf(elemName, fullClassName)) {
				List elements = (List)population.get(elemName);
				Iterator elemIt = elements.iterator();
				while (elemIt.hasNext()) {
					Object elem = elemIt.next();
					objs.add(elem);
				}
			}
		}
		return objs;
	}

	//--- FACTORIES ---
	/** Get a specific factory */
	public LibraryFactory getFactory(String fullClassName) {
		LibraryFactory factory = null;
		try {
			factory = (LibraryFactory)factories.get(fullClassName);
		} catch (Exception e) {
			log.reportMessage("Error: Missing factory for '"+fullClassName+"' class");
		}
		return factory;
	}
	/** Add a factory */
	public void registerFactory(String fullClassName, LibraryFactory factory) {
		if (!factories.containsKey(fullClassName)) {
			log.reportMessage("Factory for '"+fullClassName+"' was replaced");
		}
		factories.put(fullClassName, factory);
	}
	/** Get the log file */
	public ILog getLog() {
		return log;
	}
	/** Set the log file */
	public void setLog(ILog log) {
		this.log = log;
	}

	/** The log */
	protected ILog log;
	/** The factories */
	protected Hashtable factories = new Hashtable();
	/** The population */
	protected Hashtable population = new Hashtable();

}
